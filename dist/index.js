!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.GLCompute=e():t.GLCompute=e()}(self,(function(){return(()=>{var t={501:(t,e,r)=>{"use strict";r.r(e),r.d(e,{Float16Array:()=>dt,getFloat16:()=>mt,hfround:()=>p,setFloat16:()=>yt});const n=new ArrayBuffer(4),o=new Float32Array(n),i=new Uint32Array(n),a=new Uint32Array(512),s=new Uint32Array(512);for(let t=0;t<256;++t){const e=t-127;e<-27?(a[0|t]=0,a[256|t]=32768,s[0|t]=24,s[256|t]=24):e<-14?(a[0|t]=1024>>-e-14,a[256|t]=1024>>-e-14|32768,s[0|t]=-e-1,s[256|t]=-e-1):e<=15?(a[0|t]=e+15<<10,a[256|t]=e+15<<10|32768,s[0|t]=13,s[256|t]=13):e<128?(a[0|t]=31744,a[256|t]=64512,s[0|t]=24,s[256|t]=24):(a[0|t]=31744,a[256|t]=64512,s[0|t]=13,s[256|t]=13)}function l(t){o[0]=t;const e=i[0],r=e>>23&511;return a[r]+((8388607&e)>>s[r])}const u=new Uint32Array(2048),f=new Uint32Array(64),h=new Uint32Array(64);u[0]=0;for(let t=1;t<1024;++t){let e=t<<13,r=0;for(;0==(8388608&e);)r-=8388608,e<<=1;e&=-8388609,r+=947912704,u[t]=e|r}for(let t=1024;t<2048;++t)u[t]=939524096+(t-1024<<13);f[0]=0;for(let t=1;t<31;++t)f[t]=t<<23;f[31]=1199570944,f[32]=2147483648;for(let t=33;t<63;++t)f[t]=2147483648+(t-32<<23);f[63]=3347054592,h[0]=0;for(let t=1;t<64;++t)h[t]=32===t?0:1024;function c(t){const e=t>>10;return i[0]=u[h[e]+(1023&t)]+f[e],o[0]}function p(t){return t=Number(t),Number.isFinite(t)&&0!==t?c(l(t)):t}var d=r(277),_="object"==typeof self&&self&&self.Object===Object&&self;const g=d.Z||_||Function("return this")(),m=g.Symbol;var y=Object.prototype,b=y.hasOwnProperty,v=y.toString,E=m?m.toStringTag:void 0;var T=Object.prototype.toString;var w=m?m.toStringTag:void 0;const A=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":w&&w in Object(t)?function(t){var e=b.call(t,E),r=t[E];try{t[E]=void 0;var n=!0}catch(t){}var o=v.call(t);return n&&(e?t[E]=r:delete t[E]),o}(t):function(t){return T.call(t)}(t)},x=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)},R=g["__core-js_shared__"];var F,U=(F=/[^.]+$/.exec(R&&R.keys&&R.keys.IE_PROTO||""))?"Symbol(src)_1."+F:"";var L=Function.prototype.toString;var S=/^\[object .+?Constructor\]$/,O=Function.prototype,P=Object.prototype,D=O.toString,C=P.hasOwnProperty,B=RegExp("^"+D.call(C).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const N=function(t){return!(!x(t)||(e=t,U&&U in e))&&(function(t){if(!x(t))return!1;var e=A(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}(t)?B:S).test(function(t){if(null!=t){try{return L.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t));var e},k=function(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return N(r)?r:void 0},I=k(Object,"create");var G=Object.prototype.hasOwnProperty;var M=Object.prototype.hasOwnProperty;function j(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}j.prototype.clear=function(){this.__data__=I?I(null):{},this.size=0},j.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},j.prototype.get=function(t){var e=this.__data__;if(I){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return G.call(e,t)?e[t]:void 0},j.prototype.has=function(t){var e=this.__data__;return I?void 0!==e[t]:M.call(e,t)},j.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=I&&void 0===e?"__lodash_hash_undefined__":e,this};const X=j,V=function(t,e){for(var r=t.length;r--;)if((n=t[r][0])===(o=e)||n!=n&&o!=o)return r;var n,o;return-1};var W=Array.prototype.splice;function H(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}H.prototype.clear=function(){this.__data__=[],this.size=0},H.prototype.delete=function(t){var e=this.__data__,r=V(e,t);return!(r<0||(r==e.length-1?e.pop():W.call(e,r,1),--this.size,0))},H.prototype.get=function(t){var e=this.__data__,r=V(e,t);return r<0?void 0:e[r][1]},H.prototype.has=function(t){return V(this.__data__,t)>-1},H.prototype.set=function(t,e){var r=this.__data__,n=V(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this};const z=H,Y=k(g,"Map"),q=function(t,e){var r,n,o=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof e?"string":"hash"]:o.map};function Z(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}Z.prototype.clear=function(){this.size=0,this.__data__={hash:new X,map:new(Y||z),string:new X}},Z.prototype.delete=function(t){var e=q(this,t).delete(t);return this.size-=e?1:0,e},Z.prototype.get=function(t){return q(this,t).get(t)},Z.prototype.has=function(t){return q(this,t).has(t)},Z.prototype.set=function(t,e){var r=q(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this};const $=Z;function K(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var r=function(){var n=arguments,o=e?e.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var a=t.apply(this,n);return r.cache=i.set(o,a)||i,a};return r.cache=new(K.Cache||$),r}K.Cache=$;const J=K,Q=Object.getOwnPropertyDescriptor(new Uint8Array(1),0).writable;function tt(t){let e="number"!=typeof t?Number(t):t;return Number.isNaN(e)&&(e=0),Math.trunc(e)}function et(t,e){const[r,n]=[Number.isNaN(t),Number.isNaN(e)];if(r&&n)return 0;if(r)return 1;if(n)return-1;if(t<e)return-1;if(t>e)return 1;if(0===t&&0===e){const[r,n]=[Object.is(t,0),Object.is(e,0)];if(!r&&n)return-1;if(r&&!n)return 1}return 0}function rt(t){return t instanceof DataView}function nt(t){return"string"==typeof t&&t===tt(t)+""}var ot=r(730),it=ot.Z&&ot.Z.isArrayBuffer;const at=it?(st=it,function(t){return st(t)}):function(t){return function(t){return null!=t&&"object"==typeof t}(t)&&"[object ArrayBuffer]"==A(t)};var st;const lt=function(){const t=new WeakMap;return e=>{let r=t.get(e);return r||(r=Object.create(null),t.set(e,r),r)}}();function ut(t){return t instanceof dt}function ft(t){if(!ut(t))throw new TypeError("This is not a Float16Array")}function ht(t){const e=t.length,r=new Array(e);for(let n=0;n<e;++n)r[n]=c(t[n]);return r}const ct={apply(t,e,r){return ut(e)&&"function"==typeof(n=t)&&gt.has(n)?Reflect.apply(t,lt(e).target,r):Reflect.apply(t,e,r);var n}},pt={get(t,e){let r=null;if(Q||(r=t,t=lt(r).target),nt(e))return Reflect.has(t,e)?c(Reflect.get(t,e)):void 0;{const n=null!==r&&Reflect.has(r,e)?Reflect.get(r,e):Reflect.get(t,e);if("function"!=typeof n)return n;let o=lt(n).proxy;return void 0===o&&(o=lt(n).proxy=new Proxy(n,ct)),o}},set(t,e,r){let n=null;return Q||(n=t,t=lt(n).target),nt(e)?Reflect.set(t,e,l(r)):null===n||Reflect.has(t,e)&&!Object.isFrozen(n)?Reflect.set(t,e,r):Reflect.set(n,e,r)}};Q||(pt.getPrototypeOf=t=>Reflect.getPrototypeOf(lt(t).target),pt.setPrototypeOf=(t,e)=>Reflect.setPrototypeOf(lt(t).target,e),pt.defineProperty=(t,e,r)=>{const n=lt(t).target;return!Reflect.has(n,e)||Object.isFrozen(t)?Reflect.defineProperty(t,e,r):Reflect.defineProperty(n,e,r)},pt.deleteProperty=(t,e)=>{const r=lt(t).target;return Reflect.has(t,e)?Reflect.deleteProperty(t,e):Reflect.deleteProperty(r,e)},pt.has=(t,e)=>Reflect.has(t,e)||Reflect.has(lt(t).target,e),pt.isExtensible=t=>Reflect.isExtensible(t),pt.preventExtensions=t=>Reflect.preventExtensions(t),pt.getOwnPropertyDescriptor=(t,e)=>Reflect.getOwnPropertyDescriptor(t,e),pt.ownKeys=t=>Reflect.ownKeys(t));class dt extends Uint16Array{constructor(t,e,r){if(ut(t))super(lt(t).target);else if(null===t||"object"!=typeof t||at(t))switch(arguments.length){case 0:super();break;case 1:super(t);break;case 2:super(t,e);break;case 3:super(t,e,r);break;default:super(...arguments)}else{const e=Reflect.has(t,"length")||void 0===t[Symbol.iterator]?t:[...t],r=e.length;super(r);for(let t=0;t<r;++t)this[t]=l(e[t])}let n;if(Q)n=new Proxy(this,pt);else{const t=Object.create(null);lt(t).target=this,n=new Proxy(t,pt)}return lt(n).target=this,lt(this).proxy=n,n}static from(t,...e){if(0===e.length)return new dt(Uint16Array.from(t,l).buffer);const r=e[0],n=e[1];return new dt(Uint16Array.from(t,(function(t,...e){return l(r.call(this,t,...e))}),n).buffer)}static of(...t){return new dt(t)}*[Symbol.iterator](){for(const t of super[Symbol.iterator]())yield c(t)}keys(){return super.keys()}*values(){for(const t of super.values())yield c(t)}*entries(){for(const[t,e]of super.entries())yield[t,c(e)]}map(t,...e){ft(this);const r=e[0],n=[];for(let e=0,o=this.length;e<o;++e){const o=c(this[e]);n.push(t.call(r,o,e,lt(this).proxy))}return new dt(n)}filter(t,...e){ft(this);const r=e[0],n=[];for(let e=0,o=this.length;e<o;++e){const o=c(this[e]);t.call(r,o,e,lt(this).proxy)&&n.push(o)}return new dt(n)}reduce(t,...e){let r,n;ft(this),0===e.length?(r=c(this[0]),n=1):(r=e[0],n=0);for(let e=n,o=this.length;e<o;++e)r=t(r,c(this[e]),e,lt(this).proxy);return r}reduceRight(t,...e){let r,n;ft(this);const o=this.length;0===e.length?(r=c(this[o-1]),n=o-1):(r=e[0],n=o);for(let e=n;e--;)r=t(r,c(this[e]),e,lt(this).proxy);return r}forEach(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e)t.call(r,c(this[e]),e,lt(this).proxy)}find(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e){const n=c(this[e]);if(t.call(r,n,e,lt(this).proxy))return n}}findIndex(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e){const n=c(this[e]);if(t.call(r,n,e,lt(this).proxy))return e}return-1}every(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e)if(!t.call(r,c(this[e]),e,lt(this).proxy))return!1;return!0}some(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e)if(t.call(r,c(this[e]),e,lt(this).proxy))return!0;return!1}set(t,...e){ft(this);const r=e[0];let n;if(ut(t))n=lt(t).target;else{const e=Reflect.has(t,"length")||void 0===t[Symbol.iterator]?t:[...t],r=e.length;n=new Uint16Array(r);for(let t=0,r=e.length;t<r;++t)n[t]=l(e[t])}super.set(n,r)}reverse(){return ft(this),super.reverse(),lt(this).proxy}fill(t,...e){return ft(this),super.fill(l(t),...e),lt(this).proxy}copyWithin(t,e,...r){return ft(this),super.copyWithin(t,e,...r),lt(this).proxy}sort(...t){ft(this);let e=t[0];void 0===e&&(e=et);const r=J(c);return super.sort(((t,n)=>e(r(t),r(n)))),lt(this).proxy}slice(...t){let e;ft(this);try{e=super.slice(...t)}catch(r){if(!(r instanceof TypeError))throw r;e=new Uint16Array(this.buffer,this.byteOffset,this.length).slice(...t)}return new dt(e.buffer)}subarray(...t){let e;ft(this);try{e=super.subarray(...t)}catch(r){if(!(r instanceof TypeError))throw r;e=new Uint16Array(this.buffer,this.byteOffset,this.length).subarray(...t)}return new dt(e.buffer,e.byteOffset,e.length)}indexOf(t,...e){ft(this);const r=this.length;let n=tt(e[0]);n<0&&(n+=r,n<0&&(n=0));for(let e=n,o=r;e<o;++e)if(c(this[e])===t)return e;return-1}lastIndexOf(t,...e){ft(this);const r=this.length;let n=tt(e[0]);n=0===n?r:n+1,n>=0?n=n<r?n:r:n+=r;for(let e=n;e--;)if(c(this[e])===t)return e;return-1}includes(t,...e){ft(this);const r=this.length;let n=tt(e[0]);n<0&&(n+=r,n<0&&(n=0));const o=Number.isNaN(t);for(let e=n,i=r;e<i;++e){const r=c(this[e]);if(o&&Number.isNaN(r))return!0;if(r===t)return!0}return!1}join(...t){return ft(this),ht(this).join(...t)}toLocaleString(...t){return ft(this),ht(this).toLocaleString(...t)}get[Symbol.toStringTag](){if(ut(this))return"Float16Array"}}const _t=dt.prototype,gt=new WeakSet;for(const t of Reflect.ownKeys(_t)){const e=_t[t];"function"==typeof e&&gt.add(e)}function mt(t,e,...r){if(!rt(t))throw new TypeError("First argument to getFloat16 function must be a DataView");return c(t.getUint16(e,...r))}function yt(t,e,r,...n){if(!rt(t))throw new TypeError("First argument to setFloat16 function must be a DataView");t.setUint16(e,l(r),...n)}},277:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g},730:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(277);t=r.hmd(t);var o="object"==typeof exports&&exports&&!exports.nodeType&&exports,i=o&&t&&!t.nodeType&&t,a=i&&i.exports===o&&n.Z.process;const s=function(){try{return i&&i.require&&i.require("util").types||a&&a.binding&&a.binding("util")}catch(t){}}()},930:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DataLayer=void 0;var n=r(501),o=r(581),i=r(593),a=function(){function t(e,r,n,o,i,a){if(this.bufferIndex=0,this.buffers=[],this.name=e,this.gl=r,this.errorCallback=o,a<0||a%1!=0)throw new Error("Invalid numBuffers: "+a+" for DataLayer "+this.name+", must be positive integer.");if(this.numBuffers=a,isNaN(n.dimensions))this.width=n.dimensions[0],this.height=n.dimensions[1];else{if(n.dimensions<1)throw new Error("Invalid length "+n.dimensions+" for DataLayer "+e+".");this.length=n.dimensions;var s=this.calcWidthHeight(n.dimensions),l=s[0],u=s[1];this.width=l,this.height=u}this.numComponents=n.numComponents,this.writable=i,this.type=t.checkType(this.gl,n.type,this.writable,this.errorCallback);var f=n.filter?n.filter:this.length?"NEAREST":"LINEAR";this.filter=r[t.checkFilter(this.gl,f,this.type,this.errorCallback)],this.wrapS=r[t.checkWrap(this.gl,n.wrapS?n.wrapS:"CLAMP_TO_EDGE",this.type)],this.wrapT=r[t.checkWrap(this.gl,n.wrapT?n.wrapT:"CLAMP_TO_EDGE",this.type)];var h=t.getGLTextureParameters(this.gl,this.name,{numComponents:this.numComponents,writable:this.writable,type:this.type},this.errorCallback),c=h.glFormat,p=h.glInternalFormat,d=h.glType,_=h.glNumChannels;this.glInternalFormat=p,this.glFormat=c,this.glType=d,this.glNumChannels=_,this.initBuffers(n.data)}return t.prototype.calcWidthHeight=function(t){for(var e=1,r=t;r>2;)e++,r/=2;return[Math.pow(2,Math.floor(e/2)+e%2),Math.pow(2,Math.floor(e/2))]},t.checkWrap=function(t,e,r){return i.isWebGL2(t)||"CLAMP_TO_EDGE"===e?e:"float32"===r||"float16"===r?"CLAMP_TO_EDGE":e},t.checkFilter=function(t,e,r,n){return"NEAREST"===e||("float16"===r&&(o.getExtension(t,o.OES_TEXTURE_HAlF_FLOAT_LINEAR,n,!0)||o.getExtension(t,o.OES_TEXTURE_FLOAT_LINEAR,n,!0)||(e="NEAREST")),"float32"===r&&(o.getExtension(t,o.OES_TEXTURE_FLOAT_LINEAR,n,!0)||(e="NEAREST"))),e},t.checkType=function(e,r,n,a){return i.isWebGL2(e)||("float32"===r&&(o.getExtension(e,o.OES_TEXTURE_FLOAT,a,!0)||(r="float16"),n&&(t.testFramebufferWrite(e,r)||(r="float16"))),"float16"===r&&(o.getExtension(e,o.OES_TEXTURE_HALF_FLOAT,a),n&&(t.testFramebufferWrite(e,r)||a("This browser does not support rendering to half-float textures.")))),!i.isWebGL2(e)||"float16"!==r&&"float32"!==r||o.getExtension(e,o.EXT_COLOR_BUFFER_FLOAT,a),r},t.prototype.checkDataArray=function(t){if(t){var e=this,r=e.width,o=e.height,i=e.length,a=e.numComponents,s=e.glNumChannels,l=e.type,u=e.name;if(i&&t.length!==i*a||!i&&t.length!==r*o*a)throw new Error("Invalid data length "+t.length+" for DataLayer "+u+" of size "+(i||r+"x"+o)+"x"+a+".");var f=!1;switch(l){case"float32":f=f||t.constructor!==Float32Array;break;case"float16":f=f||t.constructor!==Float32Array&&t.constructor!==Uint16Array;break;case"uint8":f=f||t.constructor!==Uint8Array;break;case"int8":f=f||t.constructor!==Int8Array;break;case"uint16":f=f||t.constructor!==Uint16Array;break;case"int16":f=f||t.constructor!==Int16Array;break;case"uint32":f=f||t.constructor!==Uint32Array;break;case"int32":f=f||t.constructor!==Int32Array;break;default:throw new Error("Error initing "+u+".  Unsupported type "+l+" for GLCompute.initDataLayer.")}if(f)throw new Error("Invalid TypedArray of type "+t.constructor.name+" supplied to DataLayer "+u+" of type "+l+".");var h=t,c=r*o*s;if(h.length<c){switch(l){case"float32":h=new Float32Array(c);break;case"float16":h=new Uint16Array(c);break;case"uint8":h=new Uint8Array(c);break;case"int8":h=new Int8Array(c);break;case"uint16":h=new Uint16Array(c);break;case"int16":h=new Int16Array(c);break;case"uint32":h=new Uint32Array(c);break;case"int32":h=new Int32Array(c);break;default:throw new Error("Error initing "+u+".  Unsupported type "+l+" for GLCompute.initDataLayer.")}for(var p="float16"===l&&t.constructor===Float32Array,d=p?new DataView(h.buffer):null,_=0,g=t.length/a;_<g;_++)for(var m=0;m<a;m++)p?n.setFloat16(d,2*(_*s+m),t[_*a+m],!0):h[_*s+m]=t[_*a+m]}return h}},t.getGLTextureParameters=function(t,e,r,n){var a,s,l,u,f=r.numComponents,h=r.type,c=r.writable;if(i.isWebGL2(t)){if(u=f,3===f&&c&&(u=4),"float32"===h||"float16"===h||"uint8"===h)switch(u){case 1:s=t.RED;break;case 2:s=t.RG;break;case 3:s=t.RGB;break;case 4:s=t.RGBA;break;default:throw new Error("Unsupported glNumChannels "+u+" for DataLayer "+e+".")}else switch(u){case 1:s=t.RED_INTEGER;break;case 2:s=t.RG_INTEGER;break;case 3:s=t.RGB_INTEGER;break;case 4:s=t.RGBA_INTEGER;break;default:throw new Error("Unsupported glNumChannels "+u+" for DataLayer "+e+".")}switch(h){case"float32":switch(a=t.FLOAT,u){case 1:l=t.R32F;break;case 2:l=t.RG32F;break;case 3:l=t.RGB32F;break;case 4:l=t.RGBA32F;break;default:throw new Error("Unsupported glNumChannels "+u+" for DataLayer "+e+".")}break;case"float16":switch(a=t.HALF_FLOAT,u){case 1:l=t.R16F;break;case 2:l=t.RG16F;break;case 3:l=t.RGB16F;break;case 4:l=t.RGBA16F;break;default:throw new Error("Unsupported glNumChannels "+u+" for DataLayer "+e+".")}break;case"uint8":switch(a=t.UNSIGNED_BYTE,u){case 1:l=t.R8;break;case 2:l=t.RG8;break;case 3:l=t.RGB;break;case 4:l=t.RGBA;break;default:throw new Error("Unsupported glNumChannels "+u+" for DataLayer "+e+".")}break;default:throw new Error("Unsupported type "+h+" for DataLayer "+e+".")}}else{switch(f){case 1:case 2:case 3:s=t.RGB,l=t.RGB,u=3;break;case 4:s=t.RGBA,l=t.RGBA,u=4;break;default:throw new Error("Unsupported numComponents "+f+" for DataLayer "+e+".")}switch(h){case"float32":a=t.FLOAT;break;case"float16":a=o.getExtension(t,o.OES_TEXTURE_HALF_FLOAT,n).HALF_FLOAT_OES;break;case"uint8":a=t.UNSIGNED_BYTE;break;case"uint16":o.getExtension(t,o.WEBGL_DEPTH_TEXTURE,n),a=t.UNSIGNED_SHORT;break;case"uint32":o.getExtension(t,o.WEBGL_DEPTH_TEXTURE,n),a=t.UNSIGNED_INT;break;default:throw new Error("Unsupported type "+h+" for DataLayer "+e+".")}}if(void 0===a||void 0===s||void 0===l)throw new Error("Invalid type: "+h+" or numComponents "+f+".");if(void 0===u||f<1||f>4)throw new Error("Invalid numChannels: "+f+".");return{glFormat:s,glInternalFormat:l,glType:a,glNumChannels:u}},t.testFramebufferWrite=function(e,r,n){void 0===n&&(n={});var o=e.createTexture();if(!o)return!1;e.bindTexture(e.TEXTURE_2D,o);var i=e[n.wrapS||"CLAMP_TO_EDGE"],a=e[n.wrapT||"CLAMP_TO_EDGE"],s=e[n.filter||"NEAREST"];e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,a),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,s),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,s);var l=t.getGLTextureParameters(e,"test",{numComponents:n.numComponents||1,writable:!0,type:r},(function(){})),u=l.glInternalFormat,f=l.glFormat,h=l.glType;e.texImage2D(e.TEXTURE_2D,0,u,n.width||100,n.height||100,0,f,h,null);var c=e.createFramebuffer();return!!c&&(e.bindFramebuffer(e.FRAMEBUFFER,c),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,o,0),e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE)},t.prototype.initBuffers=function(t){for(var e=this,r=e.numBuffers,n=e.gl,o=e.width,i=e.height,a=e.glInternalFormat,s=e.glFormat,l=e.glType,u=e.filter,f=e.wrapS,h=e.wrapT,c=e.writable,p=e.errorCallback,d=this.checkDataArray(t),_=0;_<r;_++){var g=n.createTexture();if(!g)return void p("Could not init texture for DataLayer "+this.name+": "+n.getError()+".");n.bindTexture(n.TEXTURE_2D,g),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,f),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,h),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,u),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,u),n.texImage2D(n.TEXTURE_2D,0,a,o,i,0,s,l,d||null);var m={texture:g};if(c){var y=n.createFramebuffer();if(!y)return void p("Could not init framebuffer for DataLayer "+this.name+": "+n.getError()+".");n.bindFramebuffer(n.FRAMEBUFFER,y),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,g,0);var b=n.checkFramebufferStatus(n.FRAMEBUFFER);b!=n.FRAMEBUFFER_COMPLETE&&p("Invalid status for framebuffer for DataLayer "+this.name+": "+b+"."),m.framebuffer=y}this.buffers.push(m)}n.bindFramebuffer(n.FRAMEBUFFER,null)},t.prototype.getCurrentStateTexture=function(){return this.buffers[this.bufferIndex].texture},t.prototype.getPreviousStateTexture=function(t){if(void 0===t&&(t=-1),1===this.numBuffers)throw new Error("Cannot call getPreviousStateTexture on DataLayer "+this.name+" with only one buffer.");var e=this.bufferIndex+t+this.numBuffers;if(e<0||e>=this.numBuffers)throw new Error("Invalid index "+t+" passed to getPreviousStateTexture on DataLayer "+this.name+" with "+this.numBuffers+" buffers.");return this.buffers[e].texture},t.prototype.bindOutputBuffer=function(t){var e=this.gl;t&&(this.bufferIndex=(this.bufferIndex+1)%this.numBuffers);var r=this.buffers[this.bufferIndex].framebuffer;if(!r)throw new Error("DataLayer "+this.name+" is not writable.");e.bindFramebuffer(e.FRAMEBUFFER,r)},t.prototype.resize=function(t,e){if(isNaN(t)){if(this.length)throw new Error("Invalid dimensions "+t+" for 1D DataLayer "+this.name+", please specify a length as a number.");this.width=t[0],this.height=t[1]}else{if(!this.length)throw new Error("Invalid dimensions "+t+" for 2D DataLayer "+this.name+", please specify a width and height as an array.");this.length=t;var r=this.calcWidthHeight(this.length),n=r[0],o=r[1];this.width=n,this.height=o}this.destroyBuffers(),this.initBuffers(e)},t.prototype.clear=function(){this.destroyBuffers(),this.initBuffers()},t.prototype.getDimensions=function(){return[this.width,this.height]},t.prototype.getTextures=function(){return this.buffers.map((function(t){return t.texture}))},t.prototype.getLength=function(){if(!this.length)throw new Error("Cannot call getLength() on 2D DataLayer "+this.name+".");return this.length},t.prototype.getNumComponents=function(){return this.numComponents},t.prototype.getType=function(){return this.type},t.prototype.destroyBuffers=function(){var t=this.gl,e=this.buffers;e.forEach((function(e){var r=e.framebuffer,n=e.texture;t.deleteTexture(n),r&&t.deleteFramebuffer(r),delete e.texture,delete e.framebuffer})),e.length=0},t.prototype.destroy=function(){this.destroyBuffers(),delete this.gl,delete this.errorCallback},t}();e.DataLayer=a},321:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GLCompute=void 0;for(var n=r(930),o=r(664),i=r(663),a=r(593),s=r(273),l=r(17),u=r(87),f=new Float32Array([-1,-1,1,-1,-1,1,1,1]),h=new Float32Array([-1,-1,1,-1,1,1,-1,1,-1,-1]),c=[0,0],p=0;p<=18;p++)c.push(Math.cos(2*Math.PI*p/18),Math.sin(2*Math.PI*p/18));var d=new Float32Array(c),_=function(){function t(t,e,r,n,o){void 0===n&&(n=function(t){throw new Error(t)}),this.errorState=!1;var i=this;if(this.errorCallback=function(t){i.errorState||(i.errorState=!0,n&&n(t))},t||null!==(t=e.getContext("webgl2",r)||e.getContext("webgl",r)||e.getContext("experimental-webgl",r))){a.isWebGL2(t)?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=t,this.renderer=o,t.disable(t.DEPTH_TEST),t.pixelStorei(t.UNPACK_ALIGNMENT,1);var u=a.compileShader(t,this.errorCallback,s,t.VERTEX_SHADER);u?(this.defaultVertexShader=u,this.passThroughProgram=this.initProgram("passThrough",l,[{name:"u_state",value:0,dataType:"INT"}]),this.quadPositionsBuffer=this.initVertexBuffer(f),this.boundaryPositionsBuffer=this.initVertexBuffer(h),this.circlePositionsBuffer=this.initVertexBuffer(d),t.bindBuffer(t.ARRAY_BUFFER,null),this.onResize(e),this.maxNumTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),console.log(this.maxNumTextures+" textures max.")):this.errorCallback("Unable to initialize fullscreen quad vertex shader.")}else this.errorCallback("Unable to initialize WebGL context.")}return t.initWithThreeRenderer=function(e,r){return new t(e.getContext(),e.domElement,void 0,r,e)},t.prototype.initVertexBuffer=function(t){var e=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW),n;e("Unable to allocate gl buffer.")},t.prototype.initProgram=function(t,e,r,n,i){var a=this.gl,s=this.errorCallback;return new o.GPUProgram(t,a,s,i||this.defaultVertexShader,e,r,n)},t.prototype.initDataLayer=function(t,e,r,o){void 0===r&&(r=!1),void 0===o&&(o=1);var i=this.gl,a=this.errorCallback;return new n.DataLayer(t,i,e,a,r,o)},t.prototype.initTexture=function(t){var e=this.gl,r=this.errorCallback,n=e.createTexture();if(null===n)throw new Error("Unable to init texture.");e.bindTexture(e.TEXTURE_2D,n);var o=e.RGBA,i=e.RGBA,s=e.UNSIGNED_BYTE,l=new Uint8Array([0,0,255,255]);e.texImage2D(e.TEXTURE_2D,0,o,1,1,0,i,s,l);var u=new Image;return u.onload=function(){e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,o,i,s,u),a.isPowerOf2(u.width)&&a.isPowerOf2(u.height)||console.warn("Texture "+t+" dimensions ["+u.width+", "+u.height+"] are not power of 2."),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR)},u.onerror=function(e){r("Error loading image "+t+": "+e)},u.src=t,n},t.prototype.onResize=function(t){this.gl;var e=t.clientWidth,r=t.clientHeight;t.width=e,t.height=r,this.width=e,this.height=r},t.prototype.drawSetup=function(t,e,r,n){var o=this.gl;if(t.program){var i=r.map((function(t){return t.getCurrentStateTexture?t.getCurrentStateTexture():t}));this.setOutputLayer(e,r,n),o.useProgram(t.program);for(var a=0;a<i.length;a++)o.activeTexture(o.TEXTURE0+a),o.bindTexture(o.TEXTURE_2D,i[a])}},t.prototype.setOutputLayer=function(t,e,r){var n=this.gl,o=this.passThroughProgram;if(r){if(e.indexOf(r)>-1){if(1===r.numBuffers)throw new Error("\nCannot use same buffer for input and output of a program.\nTry increasing the number of buffers in your output layer to at least 2 so you\ncan render to nextState using currentState as an input.");t?r.bindOutputBuffer(!0):(this.step(o,[r],r),r.bindOutputBuffer(!1))}else r.bindOutputBuffer(!1);var i=r.getDimensions(),a=i[0],s=i[1];n.viewport(0,0,a,s)}else{n.bindFramebuffer(n.FRAMEBUFFER,null);var l=this.width,u=this.height;n.viewport(0,0,l,u)}},t.prototype.setPositionAttribute=function(t){var e=this.gl,r=e.getAttribLocation(t.program,"a_internal_position");e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(r)},t.prototype.setIndexAttribute=function(t){var e=this.gl,r=e.getAttribLocation(t.program,"a_internal_index");e.vertexAttribPointer(r,1,e.FLOAT,!1,0,0),e.enableVertexAttribArray(r)},t.prototype.step=function(t,e,r,n){void 0===e&&(e=[]);var o=this,i=o.gl,a=o.errorState,s=o.quadPositionsBuffer;a||(this.drawSetup(t,!0,e,r),t.setUniform("u_internal_scale",[1,1],"FLOAT"),t.setUniform("u_internal_translation",[0,0],"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,s),this.setPositionAttribute(t),(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),i.drawArrays(i.TRIANGLE_STRIP,0,4),i.disable(i.BLEND))},t.prototype.stepBoundary=function(t,e,r,n){void 0===e&&(e=[]);var o=this,i=o.gl,a=o.errorState,s=o.boundaryPositionsBuffer;if(!a){this.drawSetup(t,!1,e,r);var l=r?r.getDimensions():this,u=[1/l[0],1/l[1]];if(t.setUniform("u_internal_scale",[1-u[0],1-u[1]],"FLOAT"),t.setUniform("u_internal_translation",u,"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,s),this.setPositionAttribute(t),(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),null==n?void 0:n.singleEdge)switch(null==n?void 0:n.singleEdge){case"LEFT":i.drawArrays(i.LINES,3,2);break;case"RIGHT":i.drawArrays(i.LINES,1,2);break;case"TOP":i.drawArrays(i.LINES,2,2);break;case"BOTTOM":i.drawArrays(i.LINES,0,2);break;default:throw new Error("Unknown boundary edge type: "+(null==n?void 0:n.singleEdge)+".")}else i.drawArrays(i.LINE_LOOP,0,4);i.disable(i.BLEND)}},t.prototype.stepNonBoundary=function(t,e,r,n){void 0===e&&(e=[]);var o=this,i=o.gl,a=o.errorState,s=o.quadPositionsBuffer;if(!a){this.drawSetup(t,!1,e,r);var l=r?r.getDimensions():this,u=[1/l[0],1/l[1]];t.setUniform("u_internal_scale",[1-2*u[0],1-2*u[1]],"FLOAT"),t.setUniform("u_internal_translation",u,"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,s),this.setPositionAttribute(t),(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),i.drawArrays(i.TRIANGLE_STRIP,0,4),i.disable(i.BLEND)}},t.prototype.stepCircle=function(t,e,r,n,o,i){void 0===n&&(n=[]);var a=this,s=a.gl,l=a.errorState,u=a.circlePositionsBuffer,f=o?o.getDimensions():[this.width,this.height],h=f[0],c=f[1];l||(this.drawSetup(t,!1,n,o),t.setUniform("u_internal_radius",r,"FLOAT"),t.setUniform("u_internal_scale",[2/h,2/c],"FLOAT"),t.setUniform("u_internal_length",0,"FLOAT"),t.setUniform("u_internal_translation",[2*e[0]/h-1,2*e[1]/c-1],"FLOAT"),s.bindBuffer(s.ARRAY_BUFFER,u),this.setPositionAttribute(t),(null==i?void 0:i.shouldBlendAlpha)&&(s.enable(s.BLEND),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA)),s.drawArrays(s.TRIANGLE_FAN,0,20),s.disable(s.BLEND))},t.prototype.stepSegment=function(t,e,r,n,o,i,a){void 0===o&&(o=[]);var s=this,l=s.gl,u=s.errorState,f=s.circlePositionsBuffer,h=s.width,c=s.height;if(!u){this.drawSetup(t,!1,o,i),t.setUniform("u_internal_radius",n,"FLOAT"),t.setUniform("u_internal_scale",[2/h,2/c],"FLOAT");var p=e[0]-r[0],d=e[1]-r[1],_=Math.atan2(d,p);t.setUniform("u_internal_rotation",_,"FLOAT");var g=Math.sqrt(p*p+d*d);t.setUniform("u_internal_length",g,"FLOAT");var m=(e[0]+r[0])/2,y=(e[1]+r[1])/2;t.setUniform("u_internal_translation",[2*m/h-1,2*y/c-1],"FLOAT"),l.bindBuffer(l.ARRAY_BUFFER,f),this.setPositionAttribute(t),(null==a?void 0:a.shouldBlendAlpha)&&(l.enable(l.BLEND),l.blendFunc(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA)),l.drawArrays(l.TRIANGLE_FAN,0,20),l.disable(l.BLEND)}},t.prototype.drawPoints=function(t,e,r,n){var o=this,i=o.gl,a=o.errorState,s=o.width,l=o.height,u=o.pointIndexArray;if(!a){if(e.length<1)throw new Error("Invalid inputLayers for drawPoints on "+t.name+": must pass a positionDataLayer as first element of inputLayers.");var f=e[0],h=f.getLength(),c=(null==n?void 0:n.numPoints)||h;if(c>h)throw new Error("Invalid numPoint "+c+" for positionDataLayer of length "+h+".");var p=(null==n?void 0:n.pointSize)||1;this.drawSetup(t,!1,e,r),t.setUniform("u_internal_scale",[1/s,1/l],"FLOAT"),t.setUniform("u_internal_pointSize",p,"FLOAT");var d=f.getDimensions();if(t.setUniform("u_internal_positionDimensions",d,"FLOAT"),void 0===this.pointIndexBuffer||u&&u.length<c){for(var _=new Float32Array(h),g=0;g<h;g++)_[g]=g;this.pointIndexArray=_,this.pointIndexBuffer=this.initVertexBuffer(_)}i.bindBuffer(i.ARRAY_BUFFER,this.pointIndexBuffer),this.setIndexAttribute(t),!1!==(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),i.drawArrays(i.POINTS,0,c),i.disable(i.BLEND)}},t.prototype.getContext=function(){return this.gl},t.prototype.getValues=function(t){var e=this,r=e.gl,i=e.errorCallback,a=e.defaultVertexShader,s=this.packFloat32ToRGBA8Program,l=this.packToRGBA8OutputBuffer;s||(s=new o.GPUProgram("packFloat32ToRGBA8",r,i,a,u,[{name:"u_floatTexture",value:0,dataType:"INT"}]),this.packFloat32ToRGBA8Program=s);var f=t.getType();if("float16"!==f&&"float32"!==f)throw new Error("Unsupported type "+f+" for getValues().");var h=t.getDimensions(),c=h[0],p=h[1],d=t.getNumComponents(),_=c*d,g=p;if(l){var m=l.getDimensions();m[0]===_&&m[1]===g||l.resize([_,g])}else l=new n.DataLayer("packToRGBA8Output",r,{dimensions:[_,g],type:"uint8",numComponents:4},i,!0,1);if(s.setUniform("u_floatTextureDim",[c,p],"FLOAT"),s.setUniform("u_numFloatComponents",d,"FLOAT"),this.step(s,[t],l),this.readyToRead()){var y=new Uint8Array(_*g*4);return r.readPixels(0,0,_,g,r.RGBA,r.UNSIGNED_BYTE,y),new Float32Array(y.buffer)}throw new Error("Unable to read values from Buffer with status: "+r.checkFramebufferStatus(r.FRAMEBUFFER)+".")},t.prototype.readyToRead=function(){var t=this.gl;return t.checkFramebufferStatus(t.FRAMEBUFFER)==t.FRAMEBUFFER_COMPLETE},t.prototype.reset=function(){},t.prototype.resetThreeState=function(){if(!this.renderer)throw new Error("GLCompute was not inited with a renderer.");var t=this.gl,e=this.renderer.getViewport(new i.Vector4);t.viewport(e.x,e.y,e.width,e.height),this.renderer.setRenderTarget(null),this.renderer.resetState()},t.prototype.destroy=function(){delete this.renderer},t}();e.GLCompute=_},664:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GPUProgram=void 0;var n=r(593),o=function(){function t(t,e,r,o,i,a,s){var l=this;this.uniforms={},this.shaders=[],this.attributes={},this.attributeNames=[],this.name=t,this.gl=e,this.errorCallback=r;var u=e.createProgram();if(u){if("string"==typeof i||"string"==typeof i[0]){var f="string"==typeof i?i:i.join("\n");s&&(f=Object.keys(s).map((function(t){return"#define "+t+" "+s[t]+"\n"})).join("\n")+f);var h=n.compileShader(e,r,f,e.FRAGMENT_SHADER,t);if(!h)return void r("Unable to compile fragment shader for program "+t+".");this.shaders.push(h),e.attachShader(u,h)}else{if(s)throw new Error("Unable to attach defines to program "+t+" because it is already compiled.");e.attachShader(u,i)}if("string"==typeof o){var c=n.compileShader(e,r,o,e.VERTEX_SHADER,t);if(!c)return void r("Unable to compile vertex shader for program "+t+".");this.shaders.push(c),e.attachShader(u,c)}else e.attachShader(u,o);e.linkProgram(u),e.getProgramParameter(u,e.LINK_STATUS)?(this.program=u,null==a||a.forEach((function(t){var e=t.name,r=t.value,n=t.dataType;l.setUniform(e,r,n)}))):r("Program "+t+" failed to link: "+e.getProgramInfoLog(u))}else r("Unable to init gl program: "+t+".")}return t.prototype.uniformTypeForValue=function(t,e){if("FLOAT"===e){if(!isNaN(t)||1===t.length)return"1f";if(2===t.length)return"2f";if(3===t.length)return"3f";if(4===t.length)return"3f";throw new Error("Invalid uniform value: "+t)}if("INT"===e){if(!isNaN(t)||1===t.length)return"1i";if(2===t.length)return"2i";if(3===t.length)return"3i";if(4===t.length)return"3i";throw new Error("Invalid uniform value: "+t)}throw new Error("Invalid uniform data type: "+e)},t.prototype.setUniform=function(t,e,r){var n=this,o=n.gl,i=n.errorCallback,a=n.program,s=n.uniforms;if(a){o.useProgram(a);var l=this.uniformTypeForValue(e,r);if(!s[t]){var u=o.getUniformLocation(a,t);if(!u)return void i("Could not init uniform "+t+" for program "+this.name+".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type "+l+".\nError code: "+o.getError()+".");s[t]={location:u,type:l}}var f=s[t];if(f.type!=l)throw new Error("Uniform "+t+" cannot change from type "+f.type+" to type "+l+".");var h=f.location;switch(l){case"1f":o.uniform1f(h,e);break;case"2f":o.uniform2fv(h,e);break;case"3f":o.uniform3fv(h,e);break;case"3f":o.uniform4fv(h,e);break;case"1i":o.uniform1i(h,e);break;case"2i":o.uniform2iv(h,e);break;case"3i":o.uniform3iv(h,e);break;case"3i":o.uniform4iv(h,e);break;default:throw new Error("Unknown uniform type: "+l+".")}}else i("Program not inited.")},t.prototype.setVertexAttribute=function(t,e){var r=this,o=r.gl,i=r.errorCallback,a=r.program,s=r.attributes,l=r.attributeNames;if(a){if(!n.isWebGL2(o))throw new Error("Must use a webgl2 context for transform feedback.");if(o.useProgram(a),!s[t]){var u=o.getAttribLocation(a,t);if(!u)return void i("Could not init vertexAttribute "+t+". Error code: "+o.getError()+".");s[t]={location:u,type:e},l.push(t)}var f=s[t];if(f.type!=e)throw new Error("Vertex attribute "+t+" cannot change from type "+f.type+" to type "+e+".")}else i("Program not inited.")},t.prototype.getAttributeLocation=function(t){var e=this,r=e.attributes,n=e.attributeNames,o=e.name,i=n[t];if(!i)throw new Error("Invalid attribute index "+t+" for program "+o+", current attributes: "+n.join(", ")+".");var a=r[i];if(!a)throw new Error("Invalid attribute "+i+" for program "+o+".");return a.location},t.prototype.destroy=function(){var t=this,e=t.gl,r=t.program,n=t.shaders;r&&e.deleteProgram(r);for(var o=0;o<n.length;o++)e.deleteShader(n[o]);n.length=0,delete this.gl,delete this.errorCallback,delete this.program},t}();e.GPUProgram=o},581:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getExtension=e.EXT_COLOR_BUFFER_FLOAT=e.WEBGL_DEPTH_TEXTURE=e.OES_TEXTURE_HAlF_FLOAT_LINEAR=e.OES_TEXTURE_FLOAT_LINEAR=e.OES_TEXTURE_HALF_FLOAT=e.OES_TEXTURE_FLOAT=void 0;var r={};e.OES_TEXTURE_FLOAT="OES_texture_float",e.OES_TEXTURE_HALF_FLOAT="OES_texture_half_float",e.OES_TEXTURE_FLOAT_LINEAR="OES_texture_float_linear",e.OES_TEXTURE_HAlF_FLOAT_LINEAR="OES_texture_half_float_linear",e.WEBGL_DEPTH_TEXTURE="WEBGL_depth_texture",e.EXT_COLOR_BUFFER_FLOAT="EXT_color_buffer_float",e.getExtension=function(t,e,n,o){if(void 0===o&&(o=!1),void 0!==r[e])return r[e];var i;try{i=t.getExtension(e)}catch(t){}return i?(r[e]=i,console.log("Loaded extension: "+e+".")):(r[e]=!1,console.warn("Unsupported "+(o?"optional ":"")+"extension: "+e+".")),i||o||n("Required extension unsupported by this device / browser: "+e+"."),i}},663:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Vector4=void 0;var r=function(){function t(t,e,r,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===r&&(r=0),void 0===n&&(n=1),this.x=t,this.y=e,this.z=r,this.w=n}return Object.defineProperty(t.prototype,"width",{get:function(){return this.z},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.w},enumerable:!1,configurable:!0}),t.prototype.copy=function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this},t}();e.Vector4=r},593:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isPowerOf2=e.isWebGL2=e.compileShader=void 0,e.compileShader=function(t,e,r,n,o){var i=t.createShader(n);return i?(t.shaderSource(i,r),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS)?i:(e("Could not compile "+(n===t.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader"+(o?" for program "+o:"")+": "+t.getShaderInfoLog(i)+"."),null)):(e("Unable to init gl shader."),null)},e.isWebGL2=function(t){return!!t.HALF_FLOAT},e.isPowerOf2=function(t){return 0==(t&t-1)}},273:t=>{t.exports="// Vertex shader for fullscreen quad.\nprecision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},17:t=>{t.exports="precision highp float;\n\nvarying vec2 v_UV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_state, v_UV);\n}"},389:t=>{t.exports="/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Vertex shader for points.\nprecision highp float;\nprecision highp int;\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_positions; // Texture lookup with position data.\nuniform vec2 u_internal_positionDimensions;\nuniform vec2 u_internal_scale;\nuniform float u_internal_pointSize;\n\nvarying vec2 v_UV;\nvarying vec2 vParticleUV;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvParticleUV = vec2(modI(a_internal_index, u_internal_positionDimensions.x), floor(floor(a_internal_index + 0.5) / u_internal_positionDimensions.x)) / u_internal_positionDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\tv_UV = texture2D(u_internal_positions, vParticleUV).xy * u_internal_scale;\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_PointSize = u_internal_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}"},61:t=>{t.exports="/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\nprecision highp float;\nprecision highp int;\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_positions; // Texture lookup with position data.\nuniform vec2 u_internal_positionDimensions;\nuniform vec2 u_internal_scale;\nuniform float u_internal_pointSize;\n\nvarying vec2 v_UV;\nvarying vec2 vParticleUV;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvParticleUV = vec2(modI(a_internal_index, u_internal_positionDimensions.x), floor(floor(a_internal_index + 0.5) / u_internal_positionDimensions.x)) / u_internal_positionDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t// We have packed a 2D displacement with the position.\n\tvec4 positionData = texture2D(u_internal_positions, vParticleUV);\n\tvec2 positionAbsolute = positionData.rg + positionData.ba;\n\tv_UV = positionAbsolute * u_internal_scale;\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_PointSize = u_internal_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}"},54:t=>{t.exports="// Vertex shader for fullscreen quad.\nprecision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform float u_internal_radius;\nuniform vec2 u_internal_scale;\nuniform float u_internal_length;\nuniform float u_internal_rotation;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nmat2 rotate2d(float _angle){\n\treturn mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\tvec2 position = a_internal_position;\n\n\t// Apply radius.\n\tposition *= u_internal_radius;\n\n\t// Stretch center of shape to form a round-capped line segment.\n\tif (position.x < 0.0) {\n\t\tposition.x -= u_internal_length / 2.0;\n\t} else if (position.x > 0.0) {\n\t\tposition.x += u_internal_length / 2.0;\n\t}\n\n\t// Apply transformations.\n\tposition = u_internal_scale * (rotate2d(-u_internal_rotation) * position) + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},498:t=>{t.exports="// Fragment shader that draws a single color (for testing).\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},87:t=>{t.exports="// TODO: this is still off by a factor of 2 sometimes.\n\nprecision highp float;\n\nuniform vec2 u_floatTextureDim;\nuniform sampler2D u_floatTexture;\nuniform float u_numFloatComponents;\n\nfloat shift_right (float v, float amt) {\n\tv = floor(v) + 0.5;\n\treturn floor(v / exp2(amt));\n}\nfloat shift_left (float v, float amt) {\n\treturn floor(v * exp2(amt) + 0.5);\n}\nfloat mask_last (float v, float bits) {\n\treturn mod(v, shift_left(1.0, bits));\n}\nfloat extract_bits (float num, float from, float to) {\n\tfrom = floor(from + 0.5); to = floor(to + 0.5);\n\treturn mask_last(shift_right(num, from), to - from);\n}\nvec4 encode_float (float val) {\n\tif (val == 0.0) return vec4(0, 0, 0, 0);\n\tfloat sign = val > 0.0 ? 0.0 : 1.0;\n\tval = abs(val);\n\tfloat exponent = floor(log2(val));\n\tfloat biased_exponent = exponent + 127.0;\n\tfloat fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;\n\tfloat t = biased_exponent / 2.0;\n\tfloat last_bit_of_biased_exponent = fract(t) * 2.0;\n\tfloat remaining_bits_of_biased_exponent = floor(t);\n\tfloat byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;\n\tfloat byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;\n\tfloat byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;\n\tfloat byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0;\n\treturn vec4(byte4, byte3, byte2, byte1);\n}\nvoid main(){\n\tvec2 fragCoord = gl_FragCoord.xy;\n\tfloat textureXcoord = floor((fragCoord.x - 0.5)/u_numFloatComponents+0.0001) + 0.5;\n\tvec4 data = texture2D(u_floatTexture, vec2(textureXcoord, fragCoord.y)/u_floatTextureDim);\n\tint textureIndex = int(floor(mod(fragCoord.x-0.5+0.0001, u_numFloatComponents)));\n\tif (textureIndex == 0) gl_FragColor = encode_float(data[0]);\n\telse if (textureIndex == 1) gl_FragColor = encode_float(data[1]);\n\telse if (textureIndex == 2) gl_FragColor = encode_float(data[2]);\n\telse if (textureIndex == 3) gl_FragColor = encode_float(data[3]);\n}"}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,loaded:!1,exports:{}};return t[n](i,i.exports,r),i.loaded=!0,i.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{"use strict";var t=n;Object.defineProperty(t,"__esModule",{value:!0}),t.PassThroughFragmentShader=t.SegmentVertexShader=t.PointsVertexShaderWithDisplacement=t.PointsVertexShader=t.SingleColorFragShader=t.GLCompute=void 0;var e=r(321);Object.defineProperty(t,"GLCompute",{enumerable:!0,get:function(){return e.GLCompute}});var o=r(498);t.SingleColorFragShader=o;var i=r(389);t.PointsVertexShader=i;var a=r(61);t.PointsVertexShaderWithDisplacement=a;var s=r(54);t.SegmentVertexShader=s;var l=r(17);t.PassThroughFragmentShader=l})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,