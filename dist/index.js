!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.GLCompute=e():t.GLCompute=e()}(self,(function(){return(()=>{var t={501:(t,e,r)=>{"use strict";r.r(e),r.d(e,{Float16Array:()=>dt,getFloat16:()=>yt,hfround:()=>p,setFloat16:()=>bt});const n=new ArrayBuffer(4),i=new Float32Array(n),o=new Uint32Array(n),a=new Uint32Array(512),s=new Uint32Array(512);for(let t=0;t<256;++t){const e=t-127;e<-27?(a[0|t]=0,a[256|t]=32768,s[0|t]=24,s[256|t]=24):e<-14?(a[0|t]=1024>>-e-14,a[256|t]=1024>>-e-14|32768,s[0|t]=-e-1,s[256|t]=-e-1):e<=15?(a[0|t]=e+15<<10,a[256|t]=e+15<<10|32768,s[0|t]=13,s[256|t]=13):e<128?(a[0|t]=31744,a[256|t]=64512,s[0|t]=24,s[256|t]=24):(a[0|t]=31744,a[256|t]=64512,s[0|t]=13,s[256|t]=13)}function l(t){i[0]=t;const e=o[0],r=e>>23&511;return a[r]+((8388607&e)>>s[r])}const u=new Uint32Array(2048),f=new Uint32Array(64),c=new Uint32Array(64);u[0]=0;for(let t=1;t<1024;++t){let e=t<<13,r=0;for(;0==(8388608&e);)r-=8388608,e<<=1;e&=-8388609,r+=947912704,u[t]=e|r}for(let t=1024;t<2048;++t)u[t]=939524096+(t-1024<<13);f[0]=0;for(let t=1;t<31;++t)f[t]=t<<23;f[31]=1199570944,f[32]=2147483648;for(let t=33;t<63;++t)f[t]=2147483648+(t-32<<23);f[63]=3347054592,c[0]=0;for(let t=1;t<64;++t)c[t]=32===t?0:1024;function h(t){const e=t>>10;return o[0]=u[c[e]+(1023&t)]+f[e],i[0]}function p(t){return t=Number(t),Number.isFinite(t)&&0!==t?h(l(t)):t}var d=r(277),_="object"==typeof self&&self&&self.Object===Object&&self;const g=d.Z||_||Function("return this")(),y=g.Symbol;var b=Object.prototype,m=b.hasOwnProperty,v=b.toString,E=y?y.toStringTag:void 0;var w=Object.prototype.toString;var T=y?y.toStringTag:void 0;const A=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":T&&T in Object(t)?function(t){var e=m.call(t,E),r=t[E];try{t[E]=void 0;var n=!0}catch(t){}var i=v.call(t);return n&&(e?t[E]=r:delete t[E]),i}(t):function(t){return w.call(t)}(t)},R=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)},F=g["__core-js_shared__"];var x,U=(x=/[^.]+$/.exec(F&&F.keys&&F.keys.IE_PROTO||""))?"Symbol(src)_1."+x:"";var L=Function.prototype.toString;var S=/^\[object .+?Constructor\]$/,O=Function.prototype,P=Object.prototype,I=O.toString,D=P.hasOwnProperty,k=RegExp("^"+I.call(D).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const N=function(t){return!(!R(t)||(e=t,U&&U in e))&&(function(t){if(!R(t))return!1;var e=A(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}(t)?k:S).test(function(t){if(null!=t){try{return L.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t));var e},C=function(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return N(r)?r:void 0},B=C(Object,"create");var G=Object.prototype.hasOwnProperty;var M=Object.prototype.hasOwnProperty;function V(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}V.prototype.clear=function(){this.__data__=B?B(null):{},this.size=0},V.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},V.prototype.get=function(t){var e=this.__data__;if(B){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return G.call(e,t)?e[t]:void 0},V.prototype.has=function(t){var e=this.__data__;return B?void 0!==e[t]:M.call(e,t)},V.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=B&&void 0===e?"__lodash_hash_undefined__":e,this};const j=V,X=function(t,e){for(var r=t.length;r--;)if((n=t[r][0])===(i=e)||n!=n&&i!=i)return r;var n,i;return-1};var W=Array.prototype.splice;function H(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}H.prototype.clear=function(){this.__data__=[],this.size=0},H.prototype.delete=function(t){var e=this.__data__,r=X(e,t);return!(r<0||(r==e.length-1?e.pop():W.call(e,r,1),--this.size,0))},H.prototype.get=function(t){var e=this.__data__,r=X(e,t);return r<0?void 0:e[r][1]},H.prototype.has=function(t){return X(this.__data__,t)>-1},H.prototype.set=function(t,e){var r=this.__data__,n=X(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this};const z=H,Y=C(g,"Map"),q=function(t,e){var r,n,i=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map};function Z(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}Z.prototype.clear=function(){this.size=0,this.__data__={hash:new j,map:new(Y||z),string:new j}},Z.prototype.delete=function(t){var e=q(this,t).delete(t);return this.size-=e?1:0,e},Z.prototype.get=function(t){return q(this,t).get(t)},Z.prototype.has=function(t){return q(this,t).has(t)},Z.prototype.set=function(t,e){var r=q(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this};const $=Z;function K(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var r=function(){var n=arguments,i=e?e.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var a=t.apply(this,n);return r.cache=o.set(i,a)||o,a};return r.cache=new(K.Cache||$),r}K.Cache=$;const J=K,Q=Object.getOwnPropertyDescriptor(new Uint8Array(1),0).writable;function tt(t){let e="number"!=typeof t?Number(t):t;return Number.isNaN(e)&&(e=0),Math.trunc(e)}function et(t,e){const[r,n]=[Number.isNaN(t),Number.isNaN(e)];if(r&&n)return 0;if(r)return 1;if(n)return-1;if(t<e)return-1;if(t>e)return 1;if(0===t&&0===e){const[r,n]=[Object.is(t,0),Object.is(e,0)];if(!r&&n)return-1;if(r&&!n)return 1}return 0}function rt(t){return t instanceof DataView}function nt(t){return"string"==typeof t&&t===tt(t)+""}var it=r(730),ot=it.Z&&it.Z.isArrayBuffer;const at=ot?(st=ot,function(t){return st(t)}):function(t){return function(t){return null!=t&&"object"==typeof t}(t)&&"[object ArrayBuffer]"==A(t)};var st;const lt=function(){const t=new WeakMap;return e=>{let r=t.get(e);return r||(r=Object.create(null),t.set(e,r),r)}}();function ut(t){return t instanceof dt}function ft(t){if(!ut(t))throw new TypeError("This is not a Float16Array")}function ct(t){const e=t.length,r=new Array(e);for(let n=0;n<e;++n)r[n]=h(t[n]);return r}const ht={apply(t,e,r){return ut(e)&&"function"==typeof(n=t)&&gt.has(n)?Reflect.apply(t,lt(e).target,r):Reflect.apply(t,e,r);var n}},pt={get(t,e){let r=null;if(Q||(r=t,t=lt(r).target),nt(e))return Reflect.has(t,e)?h(Reflect.get(t,e)):void 0;{const n=null!==r&&Reflect.has(r,e)?Reflect.get(r,e):Reflect.get(t,e);if("function"!=typeof n)return n;let i=lt(n).proxy;return void 0===i&&(i=lt(n).proxy=new Proxy(n,ht)),i}},set(t,e,r){let n=null;return Q||(n=t,t=lt(n).target),nt(e)?Reflect.set(t,e,l(r)):null===n||Reflect.has(t,e)&&!Object.isFrozen(n)?Reflect.set(t,e,r):Reflect.set(n,e,r)}};Q||(pt.getPrototypeOf=t=>Reflect.getPrototypeOf(lt(t).target),pt.setPrototypeOf=(t,e)=>Reflect.setPrototypeOf(lt(t).target,e),pt.defineProperty=(t,e,r)=>{const n=lt(t).target;return!Reflect.has(n,e)||Object.isFrozen(t)?Reflect.defineProperty(t,e,r):Reflect.defineProperty(n,e,r)},pt.deleteProperty=(t,e)=>{const r=lt(t).target;return Reflect.has(t,e)?Reflect.deleteProperty(t,e):Reflect.deleteProperty(r,e)},pt.has=(t,e)=>Reflect.has(t,e)||Reflect.has(lt(t).target,e),pt.isExtensible=t=>Reflect.isExtensible(t),pt.preventExtensions=t=>Reflect.preventExtensions(t),pt.getOwnPropertyDescriptor=(t,e)=>Reflect.getOwnPropertyDescriptor(t,e),pt.ownKeys=t=>Reflect.ownKeys(t));class dt extends Uint16Array{constructor(t,e,r){if(ut(t))super(lt(t).target);else if(null===t||"object"!=typeof t||at(t))switch(arguments.length){case 0:super();break;case 1:super(t);break;case 2:super(t,e);break;case 3:super(t,e,r);break;default:super(...arguments)}else{const e=Reflect.has(t,"length")||void 0===t[Symbol.iterator]?t:[...t],r=e.length;super(r);for(let t=0;t<r;++t)this[t]=l(e[t])}let n;if(Q)n=new Proxy(this,pt);else{const t=Object.create(null);lt(t).target=this,n=new Proxy(t,pt)}return lt(n).target=this,lt(this).proxy=n,n}static from(t,...e){if(0===e.length)return new dt(Uint16Array.from(t,l).buffer);const r=e[0],n=e[1];return new dt(Uint16Array.from(t,(function(t,...e){return l(r.call(this,t,...e))}),n).buffer)}static of(...t){return new dt(t)}*[Symbol.iterator](){for(const t of super[Symbol.iterator]())yield h(t)}keys(){return super.keys()}*values(){for(const t of super.values())yield h(t)}*entries(){for(const[t,e]of super.entries())yield[t,h(e)]}map(t,...e){ft(this);const r=e[0],n=[];for(let e=0,i=this.length;e<i;++e){const i=h(this[e]);n.push(t.call(r,i,e,lt(this).proxy))}return new dt(n)}filter(t,...e){ft(this);const r=e[0],n=[];for(let e=0,i=this.length;e<i;++e){const i=h(this[e]);t.call(r,i,e,lt(this).proxy)&&n.push(i)}return new dt(n)}reduce(t,...e){let r,n;ft(this),0===e.length?(r=h(this[0]),n=1):(r=e[0],n=0);for(let e=n,i=this.length;e<i;++e)r=t(r,h(this[e]),e,lt(this).proxy);return r}reduceRight(t,...e){let r,n;ft(this);const i=this.length;0===e.length?(r=h(this[i-1]),n=i-1):(r=e[0],n=i);for(let e=n;e--;)r=t(r,h(this[e]),e,lt(this).proxy);return r}forEach(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e)t.call(r,h(this[e]),e,lt(this).proxy)}find(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e){const n=h(this[e]);if(t.call(r,n,e,lt(this).proxy))return n}}findIndex(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e){const n=h(this[e]);if(t.call(r,n,e,lt(this).proxy))return e}return-1}every(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e)if(!t.call(r,h(this[e]),e,lt(this).proxy))return!1;return!0}some(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e)if(t.call(r,h(this[e]),e,lt(this).proxy))return!0;return!1}set(t,...e){ft(this);const r=e[0];let n;if(ut(t))n=lt(t).target;else{const e=Reflect.has(t,"length")||void 0===t[Symbol.iterator]?t:[...t],r=e.length;n=new Uint16Array(r);for(let t=0,r=e.length;t<r;++t)n[t]=l(e[t])}super.set(n,r)}reverse(){return ft(this),super.reverse(),lt(this).proxy}fill(t,...e){return ft(this),super.fill(l(t),...e),lt(this).proxy}copyWithin(t,e,...r){return ft(this),super.copyWithin(t,e,...r),lt(this).proxy}sort(...t){ft(this);let e=t[0];void 0===e&&(e=et);const r=J(h);return super.sort(((t,n)=>e(r(t),r(n)))),lt(this).proxy}slice(...t){let e;ft(this);try{e=super.slice(...t)}catch(r){if(!(r instanceof TypeError))throw r;e=new Uint16Array(this.buffer,this.byteOffset,this.length).slice(...t)}return new dt(e.buffer)}subarray(...t){let e;ft(this);try{e=super.subarray(...t)}catch(r){if(!(r instanceof TypeError))throw r;e=new Uint16Array(this.buffer,this.byteOffset,this.length).subarray(...t)}return new dt(e.buffer,e.byteOffset,e.length)}indexOf(t,...e){ft(this);const r=this.length;let n=tt(e[0]);n<0&&(n+=r,n<0&&(n=0));for(let e=n,i=r;e<i;++e)if(h(this[e])===t)return e;return-1}lastIndexOf(t,...e){ft(this);const r=this.length;let n=tt(e[0]);n=0===n?r:n+1,n>=0?n=n<r?n:r:n+=r;for(let e=n;e--;)if(h(this[e])===t)return e;return-1}includes(t,...e){ft(this);const r=this.length;let n=tt(e[0]);n<0&&(n+=r,n<0&&(n=0));const i=Number.isNaN(t);for(let e=n,o=r;e<o;++e){const r=h(this[e]);if(i&&Number.isNaN(r))return!0;if(r===t)return!0}return!1}join(...t){return ft(this),ct(this).join(...t)}toLocaleString(...t){return ft(this),ct(this).toLocaleString(...t)}get[Symbol.toStringTag](){if(ut(this))return"Float16Array"}}const _t=dt.prototype,gt=new WeakSet;for(const t of Reflect.ownKeys(_t)){const e=_t[t];"function"==typeof e&&gt.add(e)}function yt(t,e,...r){if(!rt(t))throw new TypeError("First argument to getFloat16 function must be a DataView");return h(t.getUint16(e,...r))}function bt(t,e,r,...n){if(!rt(t))throw new TypeError("First argument to setFloat16 function must be a DataView");t.setUint16(e,l(r),...n)}},277:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g},730:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(277);t=r.hmd(t);var i="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=i&&t&&!t.nodeType&&t,a=o&&o.exports===i&&n.Z.process;const s=function(){try{return o&&o.require&&o.require("util").types||a&&a.binding&&a.binding("util")}catch(t){}}()},930:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DataLayer=void 0;var n=r(501),i=r(581),o=r(593),a=function(){function t(e,r,n,i,o,a){if(this.bufferIndex=0,this.buffers=[],this.name=e,this.gl=r,this.errorCallback=i,a<0||a%1!=0)throw new Error("Invalid numBuffers: "+a+' for DataLayer "'+this.name+'", must be positive integer.');if(this.numBuffers=a,isNaN(n.dimensions))this.width=n.dimensions[0],this.height=n.dimensions[1];else{if(n.dimensions<1)throw new Error("Invalid length "+n.dimensions+' for DataLayer "'+e+'".');this.length=n.dimensions;var s=this.calcWidthHeight(n.dimensions),l=s[0],u=s[1];this.width=l,this.height=u}this.numComponents=n.numComponents,this.writable=o,this.type=t.checkType(this.gl,n.type,this.writable,this.errorCallback);var f=n.filter?n.filter:this.length?"NEAREST":"LINEAR";this.filter=r[t.checkFilter(this.gl,f,this.type,this.errorCallback)],this.wrapS=r[t.checkWrap(this.gl,n.wrapS?n.wrapS:"CLAMP_TO_EDGE",this.type)],this.wrapT=r[t.checkWrap(this.gl,n.wrapT?n.wrapT:"CLAMP_TO_EDGE",this.type)];var c=t.getGLTextureParameters(this.gl,this.name,{numComponents:this.numComponents,writable:this.writable,type:this.type},this.errorCallback),h=c.glFormat,p=c.glInternalFormat,d=c.glType,_=c.glNumChannels;this.glInternalFormat=p,this.glFormat=h,this.glType=d,this.glNumChannels=_,this.initBuffers(n.data)}return t.prototype.calcWidthHeight=function(t){for(var e=1,r=t;r>2;)e++,r/=2;return[Math.pow(2,Math.floor(e/2)+e%2),Math.pow(2,Math.floor(e/2))]},t.checkWrap=function(t,e,r){return o.isWebGL2(t)||"CLAMP_TO_EDGE"===e?e:"float32"===r||"float16"===r?(console.warn("Falling back to CLAMP_TO_EDGE wrapping."),"CLAMP_TO_EDGE"):e},t.checkFilter=function(t,e,r,n){return"NEAREST"===e||("float16"===r&&(i.getExtension(t,i.OES_TEXTURE_HAlF_FLOAT_LINEAR,n,!0)||i.getExtension(t,i.OES_TEXTURE_FLOAT_LINEAR,n,!0)||(console.warn("Falling back to NEAREST filter."),e="NEAREST")),"float32"===r&&(i.getExtension(t,i.OES_TEXTURE_FLOAT_LINEAR,n,!0)||(console.warn("Falling back to NEAREST filter."),e="NEAREST"))),e},t.checkType=function(e,r,n,a){return o.isWebGL2(e)||(t.shouldCastIntTypeAsFloat(e,r)&&(console.warn("Falling back "+r+" type to FLOAT type for webgl1.0 support."),r="float32"),"float32"===r&&(i.getExtension(e,i.OES_TEXTURE_FLOAT,a,!0)||(console.warn("Falling back to HALF FLOAT type."),r="float16"),n&&(t.testFramebufferWrite(e,r)||(console.warn("Falling back to HALF FLOAT type."),r="float16"))),"float16"===r&&(i.getExtension(e,i.OES_TEXTURE_HALF_FLOAT,a),n&&(t.testFramebufferWrite(e,r)||a("This browser does not support rendering to half-float textures.")))),!o.isWebGL2(e)||"float16"!==r&&"float32"!==r||i.getExtension(e,i.EXT_COLOR_BUFFER_FLOAT,a),r},t.shouldCastIntTypeAsFloat=function(t,e){return!o.isWebGL2(t)&&("int8"===e||"int16"===e||"int32"===e||"uint16"===e||"uint32"===e)},t.prototype.checkDataArray=function(e,r){if(r){var i=this,o=i.width,a=i.height,s=i.length,l=i.numComponents,u=i.glNumChannels,f=i.type,c=i.name;if(s&&r.length!==s*l||!s&&r.length!==o*a*l)throw new Error("Invalid data length "+r.length+' for DataLayer "'+c+'" of size '+(s||o+"x"+a)+"x"+l+".");var h=t.shouldCastIntTypeAsFloat(e,f);console.log(h);var p=!1;switch(f){case"float16":p=p||r.constructor!==Float32Array&&r.constructor!==Uint16Array;break;case"float32":if(h&&(r.constructor===Int8Array||r.constructor===Int16Array||r.constructor===Int32Array||r.constructor===Uint16Array||r.constructor===Uint32Array))break;p=p||r.constructor!==Float32Array;break;case"uint8":p=p||r.constructor!==Uint8Array;break;case"int8":p=p||r.constructor!==Int8Array;break;case"uint16":p=p||r.constructor!==Uint16Array;break;case"int16":p=p||r.constructor!==Int16Array;break;case"uint32":p=p||r.constructor!==Uint32Array;break;case"int32":p=p||r.constructor!==Int32Array;break;default:throw new Error('Error initing DataLayer "'+c+'".  Unsupported type "'+f+'" for GLCompute.initDataLayer.')}if(p)throw new Error("Invalid TypedArray of type "+r.constructor.name+' supplied to DataLayer "'+c+'" of type "'+f+'".');var d=r,_=o*a*u,g=d.length<_,y="float16"===f&&r.constructor===Float32Array;if(h||g||y){switch(f){case"float32":d=new Float32Array(_);break;case"float16":d=new Uint16Array(_);break;case"uint8":d=new Uint8Array(_);break;case"int8":d=new Int8Array(_);break;case"uint16":d=new Uint16Array(_);break;case"int16":d=new Int16Array(_);break;case"uint32":d=new Uint32Array(_);break;case"int32":d=new Int32Array(_);break;default:throw new Error("Error initing "+c+".  Unsupported type "+f+" for GLCompute.initDataLayer.")}for(var b=y?new DataView(d.buffer):null,m=0,v=r.length/l;m<v;m++)for(var E=0;E<l;E++)y?n.setFloat16(b,2*(m*u+E),r[m*l+E],!0):d[m*u+E]=r[m*l+E]}return d}},t.getGLTextureParameters=function(t,e,r,n){var a,s,l,u,f=r.numComponents,c=r.type,h=r.writable;if(o.isWebGL2(t)){if(u=f,3===f&&h&&(u=4),"float32"===c||"float16"===c)switch(u){case 1:s=t.RED;break;case 2:s=t.RG;break;case 3:s=t.RGB;break;case 4:s=t.RGBA;break;default:throw new Error("Unsupported glNumChannels "+u+' for DataLayer "'+e+'".')}else switch(u){case 1:s=t.RED_INTEGER;break;case 2:s=t.RG_INTEGER;break;case 3:s=t.RGB_INTEGER;break;case 4:s=t.RGBA_INTEGER;break;default:throw new Error("Unsupported glNumChannels "+u+' for DataLayer "'+e+'".')}switch(c){case"float16":switch(a=t.HALF_FLOAT,u){case 1:l=t.R16F;break;case 2:l=t.RG16F;break;case 3:l=t.RGB16F;break;case 4:l=t.RGBA16F;break;default:throw new Error("Unsupported glNumChannels "+u+' for DataLayer "'+e+'".')}break;case"float32":switch(a=t.FLOAT,u){case 1:l=t.R32F;break;case 2:l=t.RG32F;break;case 3:l=t.RGB32F;break;case 4:l=t.RGBA32F;break;default:throw new Error("Unsupported glNumChannels "+u+' for DataLayer "'+e+'".')}break;case"uint8":switch(a=t.UNSIGNED_BYTE,u){case 1:l=t.R8UI;break;case 2:l=t.RG8UI;break;case 3:l=t.RGB8UI;break;case 4:l=t.RGBA8UI;break;default:throw new Error("Unsupported glNumChannels "+u+' for DataLayer "'+e+'".')}break;case"int8":switch(a=t.BYTE,u){case 1:l=t.R8I;break;case 2:l=t.RG8I;break;case 3:l=t.RGB8I;break;case 4:l=t.RGBA8I;break;default:throw new Error("Unsupported glNumChannels "+u+' for DataLayer "'+e+'".')}break;case"int16":switch(a=t.SHORT,u){case 1:l=t.R16I;break;case 2:l=t.RG16I;break;case 3:l=t.RGB16I;break;case 4:l=t.RGBA16I;break;default:throw new Error("Unsupported glNumChannels "+u+' for DataLayer "'+e+'".')}break;case"uint16":switch(a=t.UNSIGNED_SHORT,u){case 1:l=t.R16UI;break;case 2:l=t.RG16UI;break;case 3:l=t.RGB16UI;break;case 4:l=t.RGBA16UI;break;default:throw new Error("Unsupported glNumChannels "+u+' for DataLayer "'+e+'".')}break;case"int32":switch(a=t.INT,u){case 1:l=t.R32I;break;case 2:l=t.RG32I;break;case 3:l=t.RGB32I;break;case 4:l=t.RGBA32I;break;default:throw new Error("Unsupported glNumChannels "+u+' for DataLayer "'+e+'".')}break;case"uint32":switch(a=t.UNSIGNED_INT,u){case 1:l=t.R32UI;break;case 2:l=t.RG32UI;break;case 3:l=t.RGB32UI;break;case 4:l=t.RGBA32UI;break;default:throw new Error("Unsupported glNumChannels "+u+' for DataLayer "'+e+'".')}break;default:throw new Error("Unsupported type "+c+' for DataLayer "'+e+'".')}}else{switch(f){case 1:case 2:case 3:s=t.RGB,l=t.RGB,u=3;break;case 4:s=t.RGBA,l=t.RGBA,u=4;break;default:throw new Error("Unsupported numComponents "+f+' for DataLayer "'+e+'".')}switch(c){case"float32":a=t.FLOAT;break;case"float16":a=i.getExtension(t,i.OES_TEXTURE_HALF_FLOAT,n).HALF_FLOAT_OES;break;case"uint8":a=t.UNSIGNED_BYTE;break;default:throw new Error("Unsupported type "+c+' in WebGL 1.0 for DataLayer "'+e+'".')}}if(void 0===a||void 0===s||void 0===l)throw new Error("Invalid type: "+c+" for numComponents "+f+".");if(void 0===u||f<1||f>4||u<f)throw new Error("Invalid numChannels: "+f+".");return{glFormat:s,glInternalFormat:l,glType:a,glNumChannels:u}},t.testFramebufferWrite=function(e,r,n){void 0===n&&(n={});var i=e.createTexture();if(!i)return!1;e.bindTexture(e.TEXTURE_2D,i);var o=e[n.wrapS||"CLAMP_TO_EDGE"],a=e[n.wrapT||"CLAMP_TO_EDGE"],s=e[n.filter||"NEAREST"];e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,o),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,a),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,s),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,s);var l=t.getGLTextureParameters(e,"test",{numComponents:n.numComponents||1,writable:!0,type:r},(function(){})),u=l.glInternalFormat,f=l.glFormat,c=l.glType;e.texImage2D(e.TEXTURE_2D,0,u,n.width||100,n.height||100,0,f,c,null);var h=e.createFramebuffer();return!!h&&(e.bindFramebuffer(e.FRAMEBUFFER,h),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,i,0),e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE)},t.prototype.initBuffers=function(t){for(var e=this,r=e.numBuffers,n=e.gl,i=e.width,o=e.height,a=e.glInternalFormat,s=e.glFormat,l=e.glType,u=e.filter,f=e.wrapS,c=e.wrapT,h=e.writable,p=e.errorCallback,d=this.checkDataArray(n,t),_=0;_<r;_++){var g=n.createTexture();if(!g)return void p('Could not init texture for DataLayer "'+this.name+'": '+n.getError()+".");n.bindTexture(n.TEXTURE_2D,g),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,f),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,c),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,u),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,u),n.texImage2D(n.TEXTURE_2D,0,a,i,o,0,s,l,d||null);var y={texture:g};if(h){var b=n.createFramebuffer();if(!b)return void p('Could not init framebuffer for DataLayer "'+this.name+'": '+n.getError()+".");n.bindFramebuffer(n.FRAMEBUFFER,b),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,g,0);var m=n.checkFramebufferStatus(n.FRAMEBUFFER);m!=n.FRAMEBUFFER_COMPLETE&&p('Invalid status for framebuffer for DataLayer "'+this.name+'": '+m+"."),y.framebuffer=b}this.buffers.push(y)}n.bindFramebuffer(n.FRAMEBUFFER,null)},t.prototype.getCurrentStateTexture=function(){return this.buffers[this.bufferIndex].texture},t.prototype.getPreviousStateTexture=function(t){if(void 0===t&&(t=-1),1===this.numBuffers)throw new Error('Cannot call getPreviousStateTexture on DataLayer "'+this.name+'" with only one buffer.');var e=this.bufferIndex+t+this.numBuffers;if(e<0||e>=this.numBuffers)throw new Error("Invalid index "+t+" passed to getPreviousStateTexture on DataLayer "+this.name+" with "+this.numBuffers+" buffers.");return this.buffers[e].texture},t.prototype.bindOutputBuffer=function(t){var e=this.gl;t&&(this.bufferIndex=(this.bufferIndex+1)%this.numBuffers);var r=this.buffers[this.bufferIndex].framebuffer;if(!r)throw new Error('DataLayer "'+this.name+'" is not writable.');e.bindFramebuffer(e.FRAMEBUFFER,r)},t.prototype.resize=function(t,e){if(isNaN(t)){if(this.length)throw new Error("Invalid dimensions "+t+' for 1D DataLayer "'+this.name+'", please specify a length as a number.');this.width=t[0],this.height=t[1]}else{if(!this.length)throw new Error("Invalid dimensions "+t+' for 2D DataLayer "'+this.name+'", please specify a width and height as an array.');this.length=t;var r=this.calcWidthHeight(this.length),n=r[0],i=r[1];this.width=n,this.height=i}this.destroyBuffers(),this.initBuffers(e)},t.prototype.clear=function(){this.destroyBuffers(),this.initBuffers()},t.prototype.getDimensions=function(){return[this.width,this.height]},t.prototype.getTextures=function(){return this.buffers.map((function(t){return t.texture}))},t.prototype.getLength=function(){if(!this.length)throw new Error('Cannot call getLength() on 2D DataLayer "'+this.name+'".');return this.length},t.prototype.getNumComponents=function(){return this.numComponents},t.prototype.destroyBuffers=function(){var t=this.gl,e=this.buffers;e.forEach((function(e){var r=e.framebuffer,n=e.texture;t.deleteTexture(n),r&&t.deleteFramebuffer(r),delete e.texture,delete e.framebuffer})),e.length=0},t.prototype.destroy=function(){this.destroyBuffers(),delete this.gl,delete this.errorCallback},t}();e.DataLayer=a},321:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GLCompute=void 0;for(var n=r(930),i=r(664),o=r(406),a=r(593),s=r(501),l=r(952),u=r(346),f=r(814),c=r(423),h=r(483),p=r(562),d=new Float32Array([-1,-1,1,-1,-1,1,1,1]),_=new Float32Array([-1,-1,1,-1,1,1,-1,1,-1,-1]),g=[0,0],y=0;y<=18;y++)g.push(Math.cos(2*Math.PI*y/18),Math.sin(2*Math.PI*y/18));var b=new Float32Array(g),m=function(){function t(t,e,r,n,i){void 0===n&&(n=function(t){throw new Error(t)}),this.errorState=!1;var o=this;if(this.errorCallback=function(t){o.errorState||(o.errorState=!0,n&&n(t))},t||null!==(t=e.getContext("webgl2",r)||e.getContext("webgl",r)||e.getContext("experimental-webgl",r))){a.isWebGL2(t)?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=t,this.renderer=i,t.disable(t.DEPTH_TEST),t.pixelStorei(t.UNPACK_ALIGNMENT,1);var s=a.isWebGL2(t)?l:u,g=a.compileShader(t,this.errorCallback,s,t.VERTEX_SHADER);g?(this.defaultVertexShader=g,this.copyFloatProgram=this.initProgram("copyFloat",a.isWebGL2(t)?f:p,[{name:"u_state",value:0,dataType:"INT"}]),this.copyIntProgram=this.initProgram("copyInt",a.isWebGL2(t)?c:p,[{name:"u_state",value:0,dataType:"INT"}]),this.copyUintProgram=this.initProgram("copyUint",a.isWebGL2(t)?h:p,[{name:"u_state",value:0,dataType:"INT"}]),this.quadPositionsBuffer=this.initVertexBuffer(d),this.boundaryPositionsBuffer=this.initVertexBuffer(_),this.circlePositionsBuffer=this.initVertexBuffer(b),t.bindBuffer(t.ARRAY_BUFFER,null),this.onResize(e),this.maxNumTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),console.log(this.maxNumTextures+" textures max.")):this.errorCallback("Unable to initialize fullscreen quad vertex shader.")}else this.errorCallback("Unable to initialize WebGL context.")}return t.initWithThreeRenderer=function(e,r){return new t(e.getContext(),e.domElement,void 0,r,e)},t.prototype.initVertexBuffer=function(t){var e=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW),n;e("Unable to allocate gl buffer.")},t.prototype.initProgram=function(t,e,r,n,o){var a=this.gl,s=this.errorCallback;return new i.GPUProgram(t,a,s,o||this.defaultVertexShader,e,r,n)},t.prototype.initDataLayer=function(t,e,r,i){void 0===r&&(r=!1),void 0===i&&(i=1);var o=this.gl,a=this.errorCallback;return new n.DataLayer(t,o,e,a,r,i)},t.prototype.initTexture=function(t){var e=this.gl,r=this.errorCallback,n=e.createTexture();if(null===n)throw new Error("Unable to init texture.");e.bindTexture(e.TEXTURE_2D,n);var i=e.RGBA,o=e.RGBA,s=e.UNSIGNED_BYTE,l=new Uint8Array([0,0,255,255]);e.texImage2D(e.TEXTURE_2D,0,i,1,1,0,o,s,l);var u=new Image;return u.onload=function(){e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,i,o,s,u),a.isPowerOf2(u.width)&&a.isPowerOf2(u.height)||console.warn("Texture "+t+" dimensions ["+u.width+", "+u.height+"] are not power of 2."),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR)},u.onerror=function(e){r("Error loading image "+t+": "+e)},u.src=t,n},t.prototype.onResize=function(t){this.gl;var e=t.clientWidth,r=t.clientHeight;t.width=e,t.height=r,this.width=e,this.height=r},t.prototype.drawSetup=function(t,e,r,n){var i=this.gl;if(t.program){var o=r.map((function(t){return t.getCurrentStateTexture?t.getCurrentStateTexture():t}));this.setOutputLayer(e,r,n),i.useProgram(t.program);for(var a=0;a<o.length;a++)i.activeTexture(i.TEXTURE0+a),i.bindTexture(i.TEXTURE_2D,o[a])}},t.prototype.copyProgramForType=function(t){switch(t){case"float16":case"float32":return this.copyFloatProgram;case"uint8":case"uint16":case"uint32":return this.copyUintProgram;case"int8":case"int16":case"int32":return this.copyIntProgram;default:throw new Error("Invalid type: "+t+".")}},t.prototype.setOutputLayer=function(t,e,r){var n=this.gl;if(r){if(e.indexOf(r)>-1){if(1===r.numBuffers)throw new Error("\nCannot use same buffer for input and output of a program.\nTry increasing the number of buffers in your output layer to at least 2 so you\ncan render to nextState using currentState as an input.");if(t)r.bindOutputBuffer(!0);else{var i=this.copyProgramForType(r.type);this.step(i,[r],r),r.bindOutputBuffer(!1)}}else r.bindOutputBuffer(!1);var o=r.getDimensions(),a=o[0],s=o[1];n.viewport(0,0,a,s)}else{n.bindFramebuffer(n.FRAMEBUFFER,null);var l=this.width,u=this.height;n.viewport(0,0,l,u)}},t.prototype.setPositionAttribute=function(t){var e=this.gl,r=e.getAttribLocation(t.program,"a_internal_position");e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(r)},t.prototype.setIndexAttribute=function(t){var e=this.gl,r=e.getAttribLocation(t.program,"a_internal_index");e.vertexAttribPointer(r,1,e.FLOAT,!1,0,0),e.enableVertexAttribArray(r)},t.prototype.step=function(t,e,r,n){void 0===e&&(e=[]);var i=this,o=i.gl,a=i.errorState,s=i.quadPositionsBuffer;a||(this.drawSetup(t,!0,e,r),t.setUniform("u_internal_scale",[1,1],"FLOAT"),t.setUniform("u_internal_translation",[0,0],"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,s),this.setPositionAttribute(t),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND))},t.prototype.stepBoundary=function(t,e,r,n){void 0===e&&(e=[]);var i=this,o=i.gl,a=i.errorState,s=i.boundaryPositionsBuffer;if(!a){this.drawSetup(t,!1,e,r);var l=r?r.getDimensions():[this.width,this.height],u=[1/l[0],1/l[1]];if(t.setUniform("u_internal_scale",[1-u[0],1-u[1]],"FLOAT"),t.setUniform("u_internal_translation",u,"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,s),this.setPositionAttribute(t),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),null==n?void 0:n.singleEdge)switch(null==n?void 0:n.singleEdge){case"LEFT":o.drawArrays(o.LINES,3,2);break;case"RIGHT":o.drawArrays(o.LINES,1,2);break;case"TOP":o.drawArrays(o.LINES,2,2);break;case"BOTTOM":o.drawArrays(o.LINES,0,2);break;default:throw new Error("Unknown boundary edge type: "+(null==n?void 0:n.singleEdge)+".")}else o.drawArrays(o.LINE_LOOP,0,4);o.disable(o.BLEND)}},t.prototype.stepNonBoundary=function(t,e,r,n){void 0===e&&(e=[]);var i=this,o=i.gl,a=i.errorState,s=i.quadPositionsBuffer;if(!a){this.drawSetup(t,!1,e,r);var l=r?r.getDimensions():[this.width,this.height],u=[1/l[0],1/l[1]];t.setUniform("u_internal_scale",[1-2*u[0],1-2*u[1]],"FLOAT"),t.setUniform("u_internal_translation",u,"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,s),this.setPositionAttribute(t),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND)}},t.prototype.stepCircle=function(t,e,r,n,i,o){void 0===n&&(n=[]);var a=this,s=a.gl,l=a.errorState,u=a.circlePositionsBuffer,f=i?i.getDimensions():[this.width,this.height],c=f[0],h=f[1];l||(this.drawSetup(t,!1,n,i),t.setUniform("u_internal_radius",r,"FLOAT"),t.setUniform("u_internal_scale",[2/c,2/h],"FLOAT"),t.setUniform("u_internal_length",0,"FLOAT"),t.setUniform("u_internal_translation",[2*e[0]/c-1,2*e[1]/h-1],"FLOAT"),s.bindBuffer(s.ARRAY_BUFFER,u),this.setPositionAttribute(t),(null==o?void 0:o.shouldBlendAlpha)&&(s.enable(s.BLEND),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA)),s.drawArrays(s.TRIANGLE_FAN,0,20),s.disable(s.BLEND))},t.prototype.stepSegment=function(t,e,r,n,i,o,a){void 0===i&&(i=[]);var s=this,l=s.gl,u=s.errorState,f=s.circlePositionsBuffer,c=o?o.getDimensions():[this.width,this.height],h=c[0],p=c[1];if(!u){this.drawSetup(t,!1,i,o),t.setUniform("u_internal_radius",n,"FLOAT"),t.setUniform("u_internal_scale",[2/h,2/p],"FLOAT");var d=e[0]-r[0],_=e[1]-r[1],g=Math.atan2(_,d);t.setUniform("u_internal_rotation",g,"FLOAT");var y=Math.sqrt(d*d+_*_);t.setUniform("u_internal_length",y,"FLOAT");var b=(e[0]+r[0])/2,m=(e[1]+r[1])/2;t.setUniform("u_internal_translation",[2*b/h-1,2*m/p-1],"FLOAT"),l.bindBuffer(l.ARRAY_BUFFER,f),this.setPositionAttribute(t),(null==a?void 0:a.shouldBlendAlpha)&&(l.enable(l.BLEND),l.blendFunc(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA)),l.drawArrays(l.TRIANGLE_FAN,0,20),l.disable(l.BLEND)}},t.prototype.drawPoints=function(t,e,r,n){var i=this,o=i.gl,a=i.errorState,s=i.pointIndexArray,l=r?r.getDimensions():[this.width,this.height],u=l[0],f=l[1];if(!a){if(e.length<1)throw new Error('Invalid inputLayers for drawPoints on program "'+t.name+'": must pass a positionDataLayer as first element of inputLayers.');var c=e[0],h=c.getLength(),p=(null==n?void 0:n.numPoints)||h;if(p>h)throw new Error("Invalid numPoint "+p+" for positionDataLayer of length "+h+".");var d=(null==n?void 0:n.pointSize)||1;this.drawSetup(t,!1,e,r),t.setUniform("u_internal_scale",[1/u,1/f],"FLOAT"),t.setUniform("u_internal_pointSize",d,"FLOAT");var _=c.getDimensions();if(t.setUniform("u_internal_positionDimensions",_,"FLOAT"),void 0===this.pointIndexBuffer||s&&s.length<p){for(var g=new Float32Array(h),y=0;y<h;y++)g[y]=y;this.pointIndexArray=g,this.pointIndexBuffer=this.initVertexBuffer(g)}o.bindBuffer(o.ARRAY_BUFFER,this.pointIndexBuffer),this.setIndexAttribute(t),!1!==(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.POINTS,0,p),o.disable(o.BLEND)}},t.prototype.getContext=function(){return this.gl},t.prototype.getValues=function(t){var e,r=this.gl,n=t.getDimensions(),i=n[0],o=n[1],l=t.glNumChannels,u=t.glType,f=t.glFormat,c=t.type;switch(c){case"float16":l=4,f=r.RGBA,u=r.FLOAT,e=new Float32Array(i*o*l);break;case"float32":l=4,f=r.RGBA,e=new Float32Array(i*o*l);break;case"uint8":if(!a.isWebGL2(r)){e=new Uint8Array(i*o*l);break}l=4,f=r.RGBA_INTEGER,u=r.UNSIGNED_INT,e=new Uint32Array(i*o*l);break;case"uint16":l=4,f=r.RGBA_INTEGER,u=r.UNSIGNED_INT,e=new Uint32Array(i*o*l);break;case"uint32":l=4,f=r.RGBA_INTEGER,e=new Uint32Array(i*o*l);break;case"int8":case"int16":l=4,f=r.RGBA_INTEGER,u=r.INT,e=new Int32Array(i*o*l);break;case"int32":l=4,f=r.RGBA_INTEGER,e=new Int32Array(i*o*l);break;default:throw new Error("Unsupported type "+c+" for getValues().")}if(this.readyToRead()){r.readPixels(0,0,i,o,f,u,e);var h=t.getNumComponents();if("float16"===c&&e.constructor===Uint16Array){for(var p=new Float32Array(i*o*h),d=new DataView(e.buffer),_=0,g=i*o;_<g;_++)for(var y=_*l,b=_*h,m=0;m<h;m++)p[b+m]=s.getFloat16(d,2*(y+m),!0);return p}if(h===l)return e;_=0;for(var v=i*o;_<v;_++)for(y=_*l,b=_*h,m=0;m<h;m++)e[b+m]=e[y+m];return e.slice(0,i*o*h)}throw new Error("Unable to read values from Buffer with status: "+r.checkFramebufferStatus(r.FRAMEBUFFER)+".")},t.prototype.readyToRead=function(){var t=this.gl;return t.checkFramebufferStatus(t.FRAMEBUFFER)==t.FRAMEBUFFER_COMPLETE},t.prototype.reset=function(){},t.prototype.attachDataLayerToThreeTexture=function(t,e){if(!this.renderer)throw new Error("GLCompute was not inited with a renderer.");var r=t.getTextures();if(r.length>1)throw new Error("This dataLayer contains multiple WebGL textures (one for each buffer) that are flip-flopped during compute cycles, please choose a DataLayer with one buffer.");var n=this.renderer.properties.get(e);n.__webglTexture=r[0],n.__webglInit=!0},t.prototype.resetThreeState=function(){if(!this.renderer)throw new Error("GLCompute was not inited with a renderer.");var t=this.gl,e=this.renderer.getViewport(new o.Vector4);t.viewport(e.x,e.y,e.width,e.height),this.renderer.setRenderTarget(null),this.renderer.resetState()},t.prototype.destroy=function(){delete this.renderer},t}();e.GLCompute=m},664:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GPUProgram=void 0;var n=r(593),i=function(){function t(t,e,r,i,o,a,s){var l=this;this.uniforms={},this.shaders=[],this.attributes={},this.attributeNames=[],this.name=t,this.gl=e,this.errorCallback=r;var u=e.createProgram();if(u){if("string"==typeof o||"string"==typeof o[0]){var f="string"==typeof o?o:o.join("\n");s&&(f=Object.keys(s).map((function(t){return"#define "+t+" "+s[t]+"\n"})).join("\n")+f);var c=n.compileShader(e,r,f,e.FRAGMENT_SHADER,t);if(!c)return void r('Unable to compile fragment shader for program "'+t+'".');this.shaders.push(c),e.attachShader(u,c)}else{if(s)throw new Error('Unable to attach defines to program "'+t+'" because it is already compiled.');e.attachShader(u,o)}if("string"==typeof i){var h=n.compileShader(e,r,i,e.VERTEX_SHADER,t);if(!h)return void r('Unable to compile vertex shader for program "'+t+'".');this.shaders.push(h),e.attachShader(u,h)}else e.attachShader(u,i);e.linkProgram(u),e.getProgramParameter(u,e.LINK_STATUS)?(this.program=u,null==a||a.forEach((function(t){var e=t.name,r=t.value,n=t.dataType;l.setUniform(e,r,n)}))):r('Program "'+t+'" failed to link: '+e.getProgramInfoLog(u))}else r("Unable to init gl program: "+t+".")}return t.prototype.uniformTypeForValue=function(t,e){if("FLOAT"===e){if(!isNaN(t)||1===t.length)return"1f";if(2===t.length)return"2f";if(3===t.length)return"3f";if(4===t.length)return"3f";throw new Error("Invalid uniform value: "+t)}if("INT"===e){if(!isNaN(t)||1===t.length)return"1i";if(2===t.length)return"2i";if(3===t.length)return"3i";if(4===t.length)return"3i";throw new Error("Invalid uniform value: "+t)}throw new Error("Invalid uniform data type: "+e)},t.prototype.setUniform=function(t,e,r){var n=this,i=n.gl,o=n.errorCallback,a=n.program,s=n.uniforms;if(a){i.useProgram(a);var l=this.uniformTypeForValue(e,r);if(!s[t]){var u=i.getUniformLocation(a,t);if(!u)return void o('Could not init uniform "'+t+'" for program "'+this.name+'".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type '+l+".\nError code: "+i.getError()+".");s[t]={location:u,type:l}}var f=s[t];if(f.type!=l)throw new Error('Uniform "'+t+'" cannot change from type '+f.type+" to type "+l+".");var c=f.location;switch(l){case"1f":i.uniform1f(c,e);break;case"2f":i.uniform2fv(c,e);break;case"3f":i.uniform3fv(c,e);break;case"3f":i.uniform4fv(c,e);break;case"1i":i.uniform1i(c,e);break;case"2i":i.uniform2iv(c,e);break;case"3i":i.uniform3iv(c,e);break;case"3i":i.uniform4iv(c,e);break;default:throw new Error("Unknown uniform type: "+l+".")}}else o("Program not inited.")},t.prototype.setVertexAttribute=function(t,e){var r=this,i=r.gl,o=r.errorCallback,a=r.program,s=r.attributes,l=r.attributeNames;if(a){if(!n.isWebGL2(i))throw new Error("Must use a webgl2 context for transform feedback.");if(i.useProgram(a),!s[t]){var u=i.getAttribLocation(a,t);if(!u)return void o('Could not init vertexAttribute "'+t+'". Error code: '+i.getError()+".");s[t]={location:u,type:e},l.push(t)}var f=s[t];if(f.type!=e)throw new Error('Vertex attribute "'+t+'" cannot change from type '+f.type+" to type "+e+".")}else o("Program not inited.")},t.prototype.getAttributeLocation=function(t){var e=this,r=e.attributes,n=e.attributeNames,i=e.name,o=n[t];if(!o)throw new Error("Invalid attribute index "+t+' for program "'+i+'", current attributes: '+n.join(", ")+".");var a=r[o];if(!a)throw new Error('Invalid attribute "'+o+'" for program "'+i+'".');return a.location},t.prototype.destroy=function(){var t=this,e=t.gl,r=t.program,n=t.shaders;r&&e.deleteProgram(r);for(var i=0;i<n.length;i++)e.deleteShader(n[i]);n.length=0,delete this.gl,delete this.errorCallback,delete this.program},t}();e.GPUProgram=i},581:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getExtension=e.EXT_COLOR_BUFFER_FLOAT=e.WEBGL_DEPTH_TEXTURE=e.OES_TEXTURE_HAlF_FLOAT_LINEAR=e.OES_TEXTURE_FLOAT_LINEAR=e.OES_TEXTURE_HALF_FLOAT=e.OES_TEXTURE_FLOAT=void 0;var r={};e.OES_TEXTURE_FLOAT="OES_texture_float",e.OES_TEXTURE_HALF_FLOAT="OES_texture_half_float",e.OES_TEXTURE_FLOAT_LINEAR="OES_texture_float_linear",e.OES_TEXTURE_HAlF_FLOAT_LINEAR="OES_texture_half_float_linear",e.WEBGL_DEPTH_TEXTURE="WEBGL_depth_texture",e.EXT_COLOR_BUFFER_FLOAT="EXT_color_buffer_float",e.getExtension=function(t,e,n,i){if(void 0===i&&(i=!1),void 0!==r[e])return r[e];var o;try{o=t.getExtension(e)}catch(t){}return o?(r[e]=o,console.log("Loaded extension: "+e+".")):(r[e]=!1,console.warn("Unsupported "+(i?"optional ":"")+"extension: "+e+".")),o||i||n("Required extension unsupported by this device / browser: "+e+"."),o}},593:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isPowerOf2=e.isWebGL2=e.compileShader=void 0,e.compileShader=function(t,e,r,n,i){var o=t.createShader(n);return o?(t.shaderSource(o,r),t.compileShader(o),t.getShaderParameter(o,t.COMPILE_STATUS)?o:(e("Could not compile "+(n===t.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader"+(i?' for program "'+i+'"':"")+": "+t.getShaderInfoLog(o)+"."),null)):(e("Unable to init gl shader."),null)},e.isWebGL2=function(t){return!!t.HALF_FLOAT},e.isPowerOf2=function(t){return 0==(t&t-1)}},406:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Vector4=void 0;var r=function(){function t(t,e,r,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===r&&(r=0),void 0===n&&(n=1),this.x=t,this.y=e,this.z=r,this.w=n}return Object.defineProperty(t.prototype,"width",{get:function(){return this.z},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.w},enumerable:!1,configurable:!0}),t.prototype.copy=function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this},t}();e.Vector4=r},562:t=>{t.exports="precision highp float;\n\nvarying vec2 v_UV;\n\nuniform sampler2D u_state;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_state, v_UV);\n}"},346:t=>{t.exports="precision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},209:t=>{t.exports="/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Vertex shader for points.\nprecision highp float;\nprecision highp int;\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_positions; // Texture lookup with position data.\nuniform vec2 u_internal_positionDimensions;\nuniform vec2 u_internal_scale;\nuniform float u_internal_pointSize;\n\nvarying vec2 v_UV;\nvarying vec2 vParticleUV;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvParticleUV = vec2(modI(a_internal_index, u_internal_positionDimensions.x), floor(floor(a_internal_index + 0.5) / u_internal_positionDimensions.x)) / u_internal_positionDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\tv_UV = texture2D(u_internal_positions, vParticleUV).xy * u_internal_scale;\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_PointSize = u_internal_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}"},118:t=>{t.exports="/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\nprecision highp float;\nprecision highp int;\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_positions; // Texture lookup with position data.\nuniform vec2 u_internal_positionDimensions;\nuniform vec2 u_internal_scale;\nuniform float u_internal_pointSize;\n\nvarying vec2 v_UV;\nvarying vec2 vParticleUV;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvParticleUV = vec2(modI(a_internal_index, u_internal_positionDimensions.x), floor(floor(a_internal_index + 0.5) / u_internal_positionDimensions.x)) / u_internal_positionDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t// We have packed a 2D displacement with the position.\n\tvec4 positionData = texture2D(u_internal_positions, vParticleUV);\n\tvec2 positionAbsolute = positionData.rg + positionData.ba;\n\tv_UV = positionAbsolute * u_internal_scale;\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_PointSize = u_internal_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}"},660:t=>{t.exports="// Vertex shader for fullscreen quad.\nprecision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform float u_internal_radius;\nuniform vec2 u_internal_scale;\nuniform float u_internal_length;\nuniform float u_internal_rotation;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nmat2 rotate2d(float _angle){\n\treturn mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\tvec2 position = a_internal_position;\n\n\t// Apply radius.\n\tposition *= u_internal_radius;\n\n\t// Stretch center of shape to form a round-capped line segment.\n\tif (position.x < 0.0) {\n\t\tposition.x -= u_internal_length / 2.0;\n\t} else if (position.x > 0.0) {\n\t\tposition.x += u_internal_length / 2.0;\n\t}\n\n\t// Apply transformations.\n\tposition = u_internal_scale * (rotate2d(-u_internal_rotation) * position) + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},15:t=>{t.exports="// Fragment shader that draws a single color (for testing).\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},469:t=>{t.exports="precision highp int;\nprecision highp float;\n\nvoid main() {\n\tgl_FragColor = vec4(0);\n}"},814:t=>{t.exports="#version 300 es\nprecision highp float;\nprecision highp sampler2D;\n\nin vec2 v_UV;\n\nuniform sampler2D u_state;\n\nout vec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},423:t=>{t.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp isampler2D;\n\nin vec2 v_UV;\n\nuniform isampler2D u_state;\n\nout ivec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},483:t=>{t.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp usampler2D;\n\nin vec2 v_UV;\n\nuniform usampler2D u_state;\n\nout uvec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},952:t=>{t.exports="#version 300 es\nprecision highp float;\n\nin vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nout vec2 v_UV_local;\nout vec2 v_UV;\nout vec2 out_position;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tout_position = position;\n}"}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,loaded:!1,exports:{}};return t[n](o,o.exports,r),o.loaded=!0,o.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{"use strict";var t=n;Object.defineProperty(t,"__esModule",{value:!0}),t.ZeroFragmentShader=t.SegmentVertexShader=t.PointsVertexShaderWithDisplacement=t.PointsVertexShader=t.SingleColorFragShader=t.GLCompute=void 0;var e=r(321);Object.defineProperty(t,"GLCompute",{enumerable:!0,get:function(){return e.GLCompute}});var i=r(15);t.SingleColorFragShader=i;var o=r(209);t.PointsVertexShader=o;var a=r(118);t.PointsVertexShaderWithDisplacement=a;var s=r(660);t.SegmentVertexShader=s;var l=r(469);t.ZeroFragmentShader=l})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,