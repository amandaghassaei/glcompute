(()=>{var t={501:(t,e,r)=>{"use strict";r.r(e),r.d(e,{Float16Array:()=>dt,getFloat16:()=>yt,hfround:()=>p,setFloat16:()=>bt});const n=new ArrayBuffer(4),o=new Float32Array(n),i=new Uint32Array(n),a=new Uint32Array(512),s=new Uint32Array(512);for(let t=0;t<256;++t){const e=t-127;e<-27?(a[0|t]=0,a[256|t]=32768,s[0|t]=24,s[256|t]=24):e<-14?(a[0|t]=1024>>-e-14,a[256|t]=1024>>-e-14|32768,s[0|t]=-e-1,s[256|t]=-e-1):e<=15?(a[0|t]=e+15<<10,a[256|t]=e+15<<10|32768,s[0|t]=13,s[256|t]=13):e<128?(a[0|t]=31744,a[256|t]=64512,s[0|t]=24,s[256|t]=24):(a[0|t]=31744,a[256|t]=64512,s[0|t]=13,s[256|t]=13)}function u(t){o[0]=t;const e=i[0],r=e>>23&511;return a[r]+((8388607&e)>>s[r])}const l=new Uint32Array(2048),f=new Uint32Array(64),c=new Uint32Array(64);l[0]=0;for(let t=1;t<1024;++t){let e=t<<13,r=0;for(;0==(8388608&e);)r-=8388608,e<<=1;e&=-8388609,r+=947912704,l[t]=e|r}for(let t=1024;t<2048;++t)l[t]=939524096+(t-1024<<13);f[0]=0;for(let t=1;t<31;++t)f[t]=t<<23;f[31]=1199570944,f[32]=2147483648;for(let t=33;t<63;++t)f[t]=2147483648+(t-32<<23);f[63]=3347054592,c[0]=0;for(let t=1;t<64;++t)c[t]=32===t?0:1024;function h(t){const e=t>>10;return i[0]=l[c[e]+(1023&t)]+f[e],o[0]}function p(t){return t=Number(t),Number.isFinite(t)&&0!==t?h(u(t)):t}var d=r(277),g="object"==typeof self&&self&&self.Object===Object&&self;const _=d.Z||g||Function("return this")(),y=_.Symbol;var b=Object.prototype,m=b.hasOwnProperty,E=b.toString,v=y?y.toStringTag:void 0;var T=Object.prototype.toString;var w=y?y.toStringTag:void 0;const A=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":w&&w in Object(t)?function(t){var e=m.call(t,v),r=t[v];try{t[v]=void 0;var n=!0}catch(t){}var o=E.call(t);return n&&(e?t[v]=r:delete t[v]),o}(t):function(t){return T.call(t)}(t)},R=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)},x=_["__core-js_shared__"];var F,U=(F=/[^.]+$/.exec(x&&x.keys&&x.keys.IE_PROTO||""))?"Symbol(src)_1."+F:"";var L=Function.prototype.toString;var O=/^\[object .+?Constructor\]$/,P=Function.prototype,S=Object.prototype,D=P.toString,I=S.hasOwnProperty,C=RegExp("^"+D.call(I).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const B=function(t){return!(!R(t)||(e=t,U&&U in e))&&(function(t){if(!R(t))return!1;var e=A(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}(t)?C:O).test(function(t){if(null!=t){try{return L.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t));var e},k=function(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return B(r)?r:void 0},N=k(Object,"create");var G=Object.prototype.hasOwnProperty;var M=Object.prototype.hasOwnProperty;function X(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}X.prototype.clear=function(){this.__data__=N?N(null):{},this.size=0},X.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},X.prototype.get=function(t){var e=this.__data__;if(N){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return G.call(e,t)?e[t]:void 0},X.prototype.has=function(t){var e=this.__data__;return N?void 0!==e[t]:M.call(e,t)},X.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=N&&void 0===e?"__lodash_hash_undefined__":e,this};const j=X,V=function(t,e){for(var r=t.length;r--;)if((n=t[r][0])===(o=e)||n!=n&&o!=o)return r;var n,o;return-1};var W=Array.prototype.splice;function H(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}H.prototype.clear=function(){this.__data__=[],this.size=0},H.prototype.delete=function(t){var e=this.__data__,r=V(e,t);return!(r<0||(r==e.length-1?e.pop():W.call(e,r,1),--this.size,0))},H.prototype.get=function(t){var e=this.__data__,r=V(e,t);return r<0?void 0:e[r][1]},H.prototype.has=function(t){return V(this.__data__,t)>-1},H.prototype.set=function(t,e){var r=this.__data__,n=V(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this};const z=H,Y=k(_,"Map"),q=function(t,e){var r,n,o=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof e?"string":"hash"]:o.map};function Z(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}Z.prototype.clear=function(){this.size=0,this.__data__={hash:new j,map:new(Y||z),string:new j}},Z.prototype.delete=function(t){var e=q(this,t).delete(t);return this.size-=e?1:0,e},Z.prototype.get=function(t){return q(this,t).get(t)},Z.prototype.has=function(t){return q(this,t).has(t)},Z.prototype.set=function(t,e){var r=q(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this};const $=Z;function K(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var r=function(){var n=arguments,o=e?e.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var a=t.apply(this,n);return r.cache=i.set(o,a)||i,a};return r.cache=new(K.Cache||$),r}K.Cache=$;const J=K,Q=Object.getOwnPropertyDescriptor(new Uint8Array(1),0).writable;function tt(t){let e="number"!=typeof t?Number(t):t;return Number.isNaN(e)&&(e=0),Math.trunc(e)}function et(t,e){const[r,n]=[Number.isNaN(t),Number.isNaN(e)];if(r&&n)return 0;if(r)return 1;if(n)return-1;if(t<e)return-1;if(t>e)return 1;if(0===t&&0===e){const[r,n]=[Object.is(t,0),Object.is(e,0)];if(!r&&n)return-1;if(r&&!n)return 1}return 0}function rt(t){return t instanceof DataView}function nt(t){return"string"==typeof t&&t===tt(t)+""}var ot=r(730),it=ot.Z&&ot.Z.isArrayBuffer;const at=it?(st=it,function(t){return st(t)}):function(t){return function(t){return null!=t&&"object"==typeof t}(t)&&"[object ArrayBuffer]"==A(t)};var st;const ut=function(){const t=new WeakMap;return e=>{let r=t.get(e);return r||(r=Object.create(null),t.set(e,r),r)}}();function lt(t){return t instanceof dt}function ft(t){if(!lt(t))throw new TypeError("This is not a Float16Array")}function ct(t){const e=t.length,r=new Array(e);for(let n=0;n<e;++n)r[n]=h(t[n]);return r}const ht={apply(t,e,r){return lt(e)&&"function"==typeof(n=t)&&_t.has(n)?Reflect.apply(t,ut(e).target,r):Reflect.apply(t,e,r);var n}},pt={get(t,e){let r=null;if(Q||(r=t,t=ut(r).target),nt(e))return Reflect.has(t,e)?h(Reflect.get(t,e)):void 0;{const n=null!==r&&Reflect.has(r,e)?Reflect.get(r,e):Reflect.get(t,e);if("function"!=typeof n)return n;let o=ut(n).proxy;return void 0===o&&(o=ut(n).proxy=new Proxy(n,ht)),o}},set(t,e,r){let n=null;return Q||(n=t,t=ut(n).target),nt(e)?Reflect.set(t,e,u(r)):null===n||Reflect.has(t,e)&&!Object.isFrozen(n)?Reflect.set(t,e,r):Reflect.set(n,e,r)}};Q||(pt.getPrototypeOf=t=>Reflect.getPrototypeOf(ut(t).target),pt.setPrototypeOf=(t,e)=>Reflect.setPrototypeOf(ut(t).target,e),pt.defineProperty=(t,e,r)=>{const n=ut(t).target;return!Reflect.has(n,e)||Object.isFrozen(t)?Reflect.defineProperty(t,e,r):Reflect.defineProperty(n,e,r)},pt.deleteProperty=(t,e)=>{const r=ut(t).target;return Reflect.has(t,e)?Reflect.deleteProperty(t,e):Reflect.deleteProperty(r,e)},pt.has=(t,e)=>Reflect.has(t,e)||Reflect.has(ut(t).target,e),pt.isExtensible=t=>Reflect.isExtensible(t),pt.preventExtensions=t=>Reflect.preventExtensions(t),pt.getOwnPropertyDescriptor=(t,e)=>Reflect.getOwnPropertyDescriptor(t,e),pt.ownKeys=t=>Reflect.ownKeys(t));class dt extends Uint16Array{constructor(t,e,r){if(lt(t))super(ut(t).target);else if(null===t||"object"!=typeof t||at(t))switch(arguments.length){case 0:super();break;case 1:super(t);break;case 2:super(t,e);break;case 3:super(t,e,r);break;default:super(...arguments)}else{const e=Reflect.has(t,"length")||void 0===t[Symbol.iterator]?t:[...t],r=e.length;super(r);for(let t=0;t<r;++t)this[t]=u(e[t])}let n;if(Q)n=new Proxy(this,pt);else{const t=Object.create(null);ut(t).target=this,n=new Proxy(t,pt)}return ut(n).target=this,ut(this).proxy=n,n}static from(t,...e){if(0===e.length)return new dt(Uint16Array.from(t,u).buffer);const r=e[0],n=e[1];return new dt(Uint16Array.from(t,(function(t,...e){return u(r.call(this,t,...e))}),n).buffer)}static of(...t){return new dt(t)}*[Symbol.iterator](){for(const t of super[Symbol.iterator]())yield h(t)}keys(){return super.keys()}*values(){for(const t of super.values())yield h(t)}*entries(){for(const[t,e]of super.entries())yield[t,h(e)]}map(t,...e){ft(this);const r=e[0],n=[];for(let e=0,o=this.length;e<o;++e){const o=h(this[e]);n.push(t.call(r,o,e,ut(this).proxy))}return new dt(n)}filter(t,...e){ft(this);const r=e[0],n=[];for(let e=0,o=this.length;e<o;++e){const o=h(this[e]);t.call(r,o,e,ut(this).proxy)&&n.push(o)}return new dt(n)}reduce(t,...e){let r,n;ft(this),0===e.length?(r=h(this[0]),n=1):(r=e[0],n=0);for(let e=n,o=this.length;e<o;++e)r=t(r,h(this[e]),e,ut(this).proxy);return r}reduceRight(t,...e){let r,n;ft(this);const o=this.length;0===e.length?(r=h(this[o-1]),n=o-1):(r=e[0],n=o);for(let e=n;e--;)r=t(r,h(this[e]),e,ut(this).proxy);return r}forEach(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e)t.call(r,h(this[e]),e,ut(this).proxy)}find(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e){const n=h(this[e]);if(t.call(r,n,e,ut(this).proxy))return n}}findIndex(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e){const n=h(this[e]);if(t.call(r,n,e,ut(this).proxy))return e}return-1}every(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e)if(!t.call(r,h(this[e]),e,ut(this).proxy))return!1;return!0}some(t,...e){ft(this);const r=e[0];for(let e=0,n=this.length;e<n;++e)if(t.call(r,h(this[e]),e,ut(this).proxy))return!0;return!1}set(t,...e){ft(this);const r=e[0];let n;if(lt(t))n=ut(t).target;else{const e=Reflect.has(t,"length")||void 0===t[Symbol.iterator]?t:[...t],r=e.length;n=new Uint16Array(r);for(let t=0,r=e.length;t<r;++t)n[t]=u(e[t])}super.set(n,r)}reverse(){return ft(this),super.reverse(),ut(this).proxy}fill(t,...e){return ft(this),super.fill(u(t),...e),ut(this).proxy}copyWithin(t,e,...r){return ft(this),super.copyWithin(t,e,...r),ut(this).proxy}sort(...t){ft(this);let e=t[0];void 0===e&&(e=et);const r=J(h);return super.sort(((t,n)=>e(r(t),r(n)))),ut(this).proxy}slice(...t){let e;ft(this);try{e=super.slice(...t)}catch(r){if(!(r instanceof TypeError))throw r;e=new Uint16Array(this.buffer,this.byteOffset,this.length).slice(...t)}return new dt(e.buffer)}subarray(...t){let e;ft(this);try{e=super.subarray(...t)}catch(r){if(!(r instanceof TypeError))throw r;e=new Uint16Array(this.buffer,this.byteOffset,this.length).subarray(...t)}return new dt(e.buffer,e.byteOffset,e.length)}indexOf(t,...e){ft(this);const r=this.length;let n=tt(e[0]);n<0&&(n+=r,n<0&&(n=0));for(let e=n,o=r;e<o;++e)if(h(this[e])===t)return e;return-1}lastIndexOf(t,...e){ft(this);const r=this.length;let n=tt(e[0]);n=0===n?r:n+1,n>=0?n=n<r?n:r:n+=r;for(let e=n;e--;)if(h(this[e])===t)return e;return-1}includes(t,...e){ft(this);const r=this.length;let n=tt(e[0]);n<0&&(n+=r,n<0&&(n=0));const o=Number.isNaN(t);for(let e=n,i=r;e<i;++e){const r=h(this[e]);if(o&&Number.isNaN(r))return!0;if(r===t)return!0}return!1}join(...t){return ft(this),ct(this).join(...t)}toLocaleString(...t){return ft(this),ct(this).toLocaleString(...t)}get[Symbol.toStringTag](){if(lt(this))return"Float16Array"}}const gt=dt.prototype,_t=new WeakSet;for(const t of Reflect.ownKeys(gt)){const e=gt[t];"function"==typeof e&&_t.add(e)}function yt(t,e,...r){if(!rt(t))throw new TypeError("First argument to getFloat16 function must be a DataView");return h(t.getUint16(e,...r))}function bt(t,e,r,...n){if(!rt(t))throw new TypeError("First argument to setFloat16 function must be a DataView");t.setUint16(e,u(r),...n)}},277:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g},730:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(277);t=r.hmd(t);var o="object"==typeof exports&&exports&&!exports.nodeType&&exports,i=o&&t&&!t.nodeType&&t,a=i&&i.exports===o&&n.Z.process;const s=function(){try{return i&&i.require&&i.require("util").types||a&&a.binding&&a.binding("util")}catch(t){}}()},930:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DataLayer=void 0;var n=r(501),o=r(581),i=r(593),a=function(){function t(e,r,n,o,i,a){if(this.bufferIndex=0,this.buffers=[],this.name=e,this.gl=r,this.errorCallback=o,a<0||a%1!=0)throw new Error("Invalid numBuffers: "+a+" for DataLayer "+this.name+", must be positive integer.");if(this.numBuffers=a,isNaN(n.dimensions))this.width=n.dimensions[0],this.height=n.dimensions[1];else{if(n.dimensions<1)throw new Error("Invalid length "+n.dimensions+" for DataLayer "+e+".");this.length=n.dimensions;var s=this.calcWidthHeight(n.dimensions),u=s[0],l=s[1];this.width=u,this.height=l}this.numComponents=n.numComponents,this.writable=i,this.type=t.checkType(this.gl,n.type,this.writable,this.errorCallback);var f=n.filter?n.filter:this.length?"NEAREST":"LINEAR";this.filter=r[t.checkFilter(this.gl,f,this.type,this.errorCallback)],this.wrapS=r[t.checkWrap(this.gl,n.wrapS?n.wrapS:"CLAMP_TO_EDGE",this.type)],this.wrapT=r[t.checkWrap(this.gl,n.wrapT?n.wrapT:"CLAMP_TO_EDGE",this.type)];var c=t.getGLTextureParameters(this.gl,this.name,{numComponents:this.numComponents,writable:this.writable,type:this.type},this.errorCallback),h=c.glFormat,p=c.glInternalFormat,d=c.glType,g=c.glNumChannels;this.glInternalFormat=p,this.glFormat=h,this.glType=d,this.glNumChannels=g,this.initBuffers(n.data)}return t.prototype.calcWidthHeight=function(t){for(var e=1,r=t;r>2;)e++,r/=2;return[Math.pow(2,Math.floor(e/2)+e%2),Math.pow(2,Math.floor(e/2))]},t.checkWrap=function(t,e,r){return i.isWebGL2(t)||"CLAMP_TO_EDGE"===e?e:"float32"===r||"float16"===r?"CLAMP_TO_EDGE":e},t.checkFilter=function(t,e,r,n){return"NEAREST"===e||("float16"===r&&(o.getExtension(t,o.OES_TEXTURE_HAlF_FLOAT_LINEAR,n,!0)||o.getExtension(t,o.OES_TEXTURE_FLOAT_LINEAR,n,!0)||(e="NEAREST")),"float32"===r&&(o.getExtension(t,o.OES_TEXTURE_FLOAT_LINEAR,n,!0)||(e="NEAREST"))),e},t.checkType=function(e,r,n,a){return i.isWebGL2(e)||("float32"===r&&(o.getExtension(e,o.OES_TEXTURE_FLOAT,a,!0)||(r="float16"),n&&(t.testFramebufferWrite(e,r)||(r="float16"))),"float16"===r&&(o.getExtension(e,o.OES_TEXTURE_HALF_FLOAT,a),n&&(t.testFramebufferWrite(e,r)||a("This browser does not support rendering to half-float textures.")))),!i.isWebGL2(e)||"float16"!==r&&"float32"!==r||o.getExtension(e,o.EXT_COLOR_BUFFER_FLOAT,a),r},t.prototype.checkDataArray=function(t){if(t){var e=this,r=e.width,o=e.height,i=e.length,a=e.numComponents,s=e.glNumChannels,u=e.type,l=e.name;if(i&&t.length!==i*a||!i&&t.length!==r*o*a)throw new Error("Invalid data length "+t.length+" for DataLayer "+l+" of size "+(i||r+"x"+o)+"x"+a+".");var f=!1;switch(u){case"float32":f=f||t.constructor!==Float32Array;break;case"float16":f=f||t.constructor!==Float32Array&&t.constructor!==Uint16Array;break;case"uint8":f=f||t.constructor!==Uint8Array;break;case"int8":f=f||t.constructor!==Int8Array;break;case"uint16":f=f||t.constructor!==Uint16Array;break;case"int16":f=f||t.constructor!==Int16Array;break;case"uint32":f=f||t.constructor!==Uint32Array;break;case"int32":f=f||t.constructor!==Int32Array;break;default:throw new Error("Error initing "+l+".  Unsupported type "+u+" for GLCompute.initDataLayer.")}if(f)throw new Error("Invalid TypedArray of type "+t.constructor.name+" supplied to DataLayer "+l+" of type "+u+".");var c=t,h=r*o*s;if(c.length<h){switch(u){case"float32":c=new Float32Array(h);break;case"float16":c=new Uint16Array(h);break;case"uint8":c=new Uint8Array(h);break;case"int8":c=new Int8Array(h);break;case"uint16":c=new Uint16Array(h);break;case"int16":c=new Int16Array(h);break;case"uint32":c=new Uint32Array(h);break;case"int32":c=new Int32Array(h);break;default:throw new Error("Error initing "+l+".  Unsupported type "+u+" for GLCompute.initDataLayer.")}for(var p="float16"===u&&t.constructor===Float32Array,d=p?new DataView(c.buffer):null,g=0,_=t.length/a;g<_;g++)for(var y=0;y<a;y++)p?n.setFloat16(d,2*(g*s+y),t[g*a+y],!0):c[g*s+y]=t[g*a+y]}return c}},t.getGLTextureParameters=function(t,e,r,n){var a,s,u,l,f=r.numComponents,c=r.type,h=r.writable;if(i.isWebGL2(t)){if(l=f,3===f&&h&&(l=4),"float32"===c||"float16"===c||"uint8"===c)switch(l){case 1:s=t.RED;break;case 2:s=t.RG;break;case 3:s=t.RGB;break;case 4:s=t.RGBA;break;default:throw new Error("Unsupported glNumChannels "+l+" for DataLayer "+e+".")}else switch(l){case 1:s=t.RED_INTEGER;break;case 2:s=t.RG_INTEGER;break;case 3:s=t.RGB_INTEGER;break;case 4:s=t.RGBA_INTEGER;break;default:throw new Error("Unsupported glNumChannels "+l+" for DataLayer "+e+".")}switch(c){case"float32":switch(a=t.FLOAT,l){case 1:u=t.R32F;break;case 2:u=t.RG32F;break;case 3:u=t.RGB32F;break;case 4:u=t.RGBA32F;break;default:throw new Error("Unsupported glNumChannels "+l+" for DataLayer "+e+".")}break;case"float16":switch(a=t.HALF_FLOAT,l){case 1:u=t.R16F;break;case 2:u=t.RG16F;break;case 3:u=t.RGB16F;break;case 4:u=t.RGBA16F;break;default:throw new Error("Unsupported glNumChannels "+l+" for DataLayer "+e+".")}break;case"uint8":switch(a=t.UNSIGNED_BYTE,l){case 1:u=t.R8;break;case 2:u=t.RG8;break;case 3:u=t.RGB;break;case 4:u=t.RGBA;break;default:throw new Error("Unsupported glNumChannels "+l+" for DataLayer "+e+".")}break;default:throw new Error("Unsupported type "+c+" for DataLayer "+e+".")}}else{switch(f){case 1:case 2:case 3:s=t.RGB,u=t.RGB,l=3;break;case 4:s=t.RGBA,u=t.RGBA,l=4;break;default:throw new Error("Unsupported numComponents "+f+" for DataLayer "+e+".")}switch(c){case"float32":a=t.FLOAT;break;case"float16":a=o.getExtension(t,o.OES_TEXTURE_HALF_FLOAT,n).HALF_FLOAT_OES;break;case"uint8":a=t.UNSIGNED_BYTE;break;case"uint16":o.getExtension(t,o.WEBGL_DEPTH_TEXTURE,n),a=t.UNSIGNED_SHORT;break;case"uint32":o.getExtension(t,o.WEBGL_DEPTH_TEXTURE,n),a=t.UNSIGNED_INT;break;default:throw new Error("Unsupported type "+c+" for DataLayer "+e+".")}}if(void 0===a||void 0===s||void 0===u)throw new Error("Invalid type: "+c+" or numComponents "+f+".");if(void 0===l||f<1||f>4)throw new Error("Invalid numChannels: "+f+".");return{glFormat:s,glInternalFormat:u,glType:a,glNumChannels:l}},t.testFramebufferWrite=function(e,r,n){void 0===n&&(n={});var o=e.createTexture();if(!o)return!1;e.bindTexture(e.TEXTURE_2D,o);var i=e[n.wrapS||"CLAMP_TO_EDGE"],a=e[n.wrapT||"CLAMP_TO_EDGE"],s=e[n.filter||"NEAREST"];e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,a),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,s),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,s);var u=t.getGLTextureParameters(e,"test",{numComponents:n.numComponents||1,writable:!0,type:r},(function(){})),l=u.glInternalFormat,f=u.glFormat,c=u.glType;e.texImage2D(e.TEXTURE_2D,0,l,n.width||100,n.height||100,0,f,c,null);var h=e.createFramebuffer();return!!h&&(e.bindFramebuffer(e.FRAMEBUFFER,h),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,o,0),e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE)},t.prototype.initBuffers=function(t){for(var e=this,r=e.numBuffers,n=e.gl,o=e.width,i=e.height,a=e.glInternalFormat,s=e.glFormat,u=e.glType,l=e.filter,f=e.wrapS,c=e.wrapT,h=e.writable,p=e.errorCallback,d=this.checkDataArray(t),g=0;g<r;g++){var _=n.createTexture();if(!_)return void p("Could not init texture for DataLayer "+this.name+": "+n.getError()+".");n.bindTexture(n.TEXTURE_2D,_),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,f),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,c),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,l),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,l),n.texImage2D(n.TEXTURE_2D,0,a,o,i,0,s,u,d||null);var y={texture:_};if(h){var b=n.createFramebuffer();if(!b)return void p("Could not init framebuffer for DataLayer "+this.name+": "+n.getError()+".");n.bindFramebuffer(n.FRAMEBUFFER,b),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,_,0);var m=n.checkFramebufferStatus(n.FRAMEBUFFER);m!=n.FRAMEBUFFER_COMPLETE&&p("Invalid status for framebuffer for DataLayer "+this.name+": "+m+"."),y.framebuffer=b}this.buffers.push(y)}n.bindFramebuffer(n.FRAMEBUFFER,null)},t.prototype.getCurrentStateTexture=function(){return this.buffers[this.bufferIndex].texture},t.prototype.getPreviousStateTexture=function(t){if(void 0===t&&(t=-1),1===this.numBuffers)throw new Error("Cannot call getPreviousStateTexture on DataLayer "+this.name+" with only one buffer.");var e=this.bufferIndex+t+this.numBuffers;if(e<0||e>=this.numBuffers)throw new Error("Invalid index "+t+" passed to getPreviousStateTexture on DataLayer "+this.name+" with "+this.numBuffers+" buffers.");return this.buffers[e].texture},t.prototype.bindOutputBuffer=function(t){var e=this.gl;t&&(this.bufferIndex=(this.bufferIndex+1)%this.numBuffers);var r=this.buffers[this.bufferIndex].framebuffer;if(!r)throw new Error("DataLayer "+this.name+" is not writable.");e.bindFramebuffer(e.FRAMEBUFFER,r)},t.prototype.resize=function(t,e){if(isNaN(t)){if(this.length)throw new Error("Invalid dimensions "+t+" for 1D DataLayer "+this.name+", please specify a length as a number.");this.width=t[0],this.height=t[1]}else{if(!this.length)throw new Error("Invalid dimensions "+t+" for 2D DataLayer "+this.name+", please specify a width and height as an array.");this.length=t;var r=this.calcWidthHeight(this.length),n=r[0],o=r[1];this.width=n,this.height=o}this.destroyBuffers(),this.initBuffers(e)},t.prototype.clear=function(){this.destroyBuffers(),this.initBuffers()},t.prototype.getDimensions=function(){return[this.width,this.height]},t.prototype.getLength=function(){if(!this.length)throw new Error("Cannot call getLength() on 2D DataLayer "+this.name+".");return this.length},t.prototype.getNumComponent=function(){return this.numComponents},t.prototype.getType=function(){return this.type},t.prototype.destroyBuffers=function(){var t=this.gl,e=this.buffers;e.forEach((function(e){var r=e.framebuffer,n=e.texture;t.deleteTexture(n),r&&t.deleteFramebuffer(r),delete e.texture,delete e.framebuffer})),e.length=0},t.prototype.destroy=function(){this.destroyBuffers(),delete this.gl,delete this.errorCallback},t}();e.DataLayer=a},321:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GLCompute=void 0;for(var n=r(930),o=r(664),i=r(593),a=r(273),s=r(17),u=r(87),l=new Float32Array([-1,-1,1,-1,-1,1,1,1]),f=new Float32Array([-1,-1,1,-1,1,1,-1,1,-1,-1]),c=[0,0],h=0;h<=20;h++)c.push(Math.cos(2*Math.PI*h/20),Math.sin(2*Math.PI*h/20));var p=new Float32Array(c),d=function(){function t(t,e,r,n){void 0===n&&(n=function(t){throw new Error(t)}),this.errorState=!1;var o=this;if(this.errorCallback=function(t){o.errorState||(o.errorState=!0,n&&n(t))},t||null!==(t=e.getContext("webgl2",r)||e.getContext("webgl",r)||e.getContext("experimental-webgl",r))){i.isWebGL2(t)?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=t,t.disable(t.DEPTH_TEST),t.pixelStorei(t.UNPACK_ALIGNMENT,1);var u=i.compileShader(t,this.errorCallback,a,t.VERTEX_SHADER);if(u){this.defaultVertexShader=u,this.passThroughProgram=this.initProgram("passThrough",s,[{name:"u_state",value:0,dataType:"INT"}]),this.quadPositionsBuffer=this.initVertexBuffer(l),this.boundaryPositionsBuffer=this.initVertexBuffer(f),this.circlePositionsBuffer=this.initVertexBuffer(p),t.bindBuffer(t.ARRAY_BUFFER,null),this.onResize(e);var c=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);console.log(c+" textures max.")}else this.errorCallback("Unable to initialize fullscreen quad vertex shader.")}else this.errorCallback("Unable to initialize WebGL context.")}return t.prototype.initVertexBuffer=function(t){var e=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW),n;e("Unable to allocate gl buffer.")},t.prototype.initProgram=function(t,e,r,n,i){var a=this.gl,s=this.errorCallback;return new o.GPUProgram(t,a,s,i||this.defaultVertexShader,e,r,n)},t.prototype.initDataLayer=function(t,e,r,o){void 0===r&&(r=!1),void 0===o&&(o=1);var i=this.gl,a=this.errorCallback;return new n.DataLayer(t,i,e,a,r,o)},t.prototype.initTexture=function(t){var e=this.gl,r=this.errorCallback,n=e.createTexture();if(null===n)throw new Error("Unable to init texture.");e.bindTexture(e.TEXTURE_2D,n);var o=e.RGBA,a=e.RGBA,s=e.UNSIGNED_BYTE,u=new Uint8Array([0,0,255,255]);e.texImage2D(e.TEXTURE_2D,0,o,1,1,0,a,s,u);var l=new Image;return l.onload=function(){e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,o,a,s,l),i.isPowerOf2(l.width)&&i.isPowerOf2(l.height)?e.generateMipmap(e.TEXTURE_2D):(console.warn("Texture "+t+" dimensions ["+l.width+", "+l.height+"] are not power of 2."),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR))},l.onerror=function(e){r("Error loading image "+t+": "+e)},l.src=t,n},t.prototype.onResize=function(t){this.gl;var e=t.clientWidth,r=t.clientHeight;t.width=e,t.height=r,this.width=e,this.height=r},t.prototype.drawSetup=function(t,e,r,n){var o=this.gl;if(t.program){var i=r.map((function(t){return t.getCurrentStateTexture?t.getCurrentStateTexture():t}));this.setOutputLayer(e,r,n),o.useProgram(t.program);for(var a=0;a<i.length;a++)o.activeTexture(o.TEXTURE0+a),o.bindTexture(o.TEXTURE_2D,i[a])}},t.prototype.setOutputLayer=function(t,e,r){var n=this.gl,o=this.passThroughProgram;if(r){if(e.indexOf(r)>-1){if(1===r.numBuffers)throw new Error("\nCannot use same buffer for input and output of a program.\nTry increasing the number of buffers in your output layer to at least 2 so you\ncan render to nextState using currentState as an input.");t?r.bindOutputBuffer(!0):(this.step(o,[r],r),r.bindOutputBuffer(!1))}else r.bindOutputBuffer(!1);var i=r.getDimensions(),a=i[0],s=i[1];n.viewport(0,0,a,s)}else{n.bindFramebuffer(n.FRAMEBUFFER,null);var u=this.width,l=this.height;n.viewport(0,0,u,l)}},t.prototype.setPositionAttribute=function(t){var e=this.gl,r=e.getAttribLocation(t.program,"aPosition");e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(r)},t.prototype.setIndexAttribute=function(t){var e=this.gl,r=e.getAttribLocation(t.program,"aIndex");e.vertexAttribPointer(r,1,e.FLOAT,!1,0,0),e.enableVertexAttribArray(r)},t.prototype.step=function(t,e,r,n){void 0===e&&(e=[]);var o=this,i=o.gl,a=o.errorState,s=o.quadPositionsBuffer;a||(this.drawSetup(t,!0,e,r),t.setUniform("u_scale",[1,1],"FLOAT"),t.setUniform("u_translation",[0,0],"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,s),this.setPositionAttribute(t),(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),i.drawArrays(i.TRIANGLE_STRIP,0,4),i.disable(i.BLEND))},t.prototype.stepBoundary=function(t,e,r,n){void 0===e&&(e=[]);var o=this,i=o.gl,a=o.errorState,s=o.boundaryPositionsBuffer;if(!a){this.drawSetup(t,!1,e,r);var u=r?r.getDimensions():this,l=[1/u[0],1/u[1]];if(t.setUniform("u_scale",[1-l[0],1-l[1]],"FLOAT"),t.setUniform("u_translation",l,"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,s),this.setPositionAttribute(t),(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),null==n?void 0:n.singleEdge)switch(null==n?void 0:n.singleEdge){case"LEFT":i.drawArrays(i.LINES,3,2);break;case"RIGHT":i.drawArrays(i.LINES,1,2);break;case"TOP":i.drawArrays(i.LINES,2,2);break;case"BOTTOM":i.drawArrays(i.LINES,0,2);break;default:throw new Error("Unknown boundary edge type: "+(null==n?void 0:n.singleEdge)+".")}else i.drawArrays(i.LINE_LOOP,0,4);i.disable(i.BLEND)}},t.prototype.stepNonBoundary=function(t,e,r,n){void 0===e&&(e=[]);var o=this,i=o.gl,a=o.errorState,s=o.quadPositionsBuffer;if(!a){this.drawSetup(t,!1,e,r);var u=r?r.getDimensions():this,l=[1/u[0],1/u[1]];t.setUniform("u_scale",[1-2*l[0],1-2*l[1]],"FLOAT"),t.setUniform("u_translation",l,"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,s),this.setPositionAttribute(t),(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),i.drawArrays(i.TRIANGLE_STRIP,0,4),i.disable(i.BLEND)}},t.prototype.stepCircle=function(t,e,r,n,o,i){void 0===n&&(n=[]);var a=this,s=a.gl,u=a.errorState,l=a.circlePositionsBuffer,f=a.width,c=a.height;u||(this.drawSetup(t,!1,n,o),t.setUniform("u_scale",[r/f,r/c],"FLOAT"),t.setUniform("u_translation",[2*e[0]/f-1,2*e[1]/c-1],"FLOAT"),s.bindBuffer(s.ARRAY_BUFFER,l),this.setPositionAttribute(t),(null==i?void 0:i.shouldBlendAlpha)&&(s.enable(s.BLEND),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA)),s.drawArrays(s.TRIANGLE_FAN,0,22),s.disable(s.BLEND))},t.prototype.drawPoints=function(t,e,r,n){var o=this,i=o.gl,a=o.errorState,s=o.width,u=o.height,l=o.pointIndexArray;if(!a){if(e.length<1)throw new Error("Invalid inputLayers for drawPoints on "+t.name+": must pass a positionDataLayer as first element of inputLayers.");var f=e[0],c=f.getLength(),h=(null==n?void 0:n.numPoints)||c;if(h>c)throw new Error("Invalid numPoint "+h+" for positionDataLayer of length "+c+".");var p=(null==n?void 0:n.pointSize)||1;this.drawSetup(t,!1,e,r),t.setUniform("u_scale",[1/s,1/u],"FLOAT"),t.setUniform("u_pointSize",p,"FLOAT");var d=f.getDimensions();if(t.setUniform("u_positionDimensions",d,"FLOAT"),void 0===this.pointIndexBuffer||l&&l.length<h){for(var g=new Float32Array(c),_=0;_<c;_++)g[_]=_;this.pointIndexArray=g,this.pointIndexBuffer=this.initVertexBuffer(g)}i.bindBuffer(i.ARRAY_BUFFER,this.pointIndexBuffer),this.setIndexAttribute(t),!1!==(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),i.drawArrays(i.POINTS,0,h),i.disable(i.BLEND)}},t.prototype.getContext=function(){return this.gl},t.prototype.getValues=function(t){var e=this,r=e.gl,i=e.errorCallback,a=e.defaultVertexShader,s=this.packFloat32ToRGBA8Program,l=this.packToRGBA8OutputBuffer;s||(s=new o.GPUProgram("packFloat32ToRGBA8",r,i,a,u,[{name:"u_floatTexture",value:0,dataType:"INT"}]),this.packFloat32ToRGBA8Program=s);var f=t.getType();if("float16"!==f&&"float32"!==f)throw new Error("Unsupported type "+f+" for getValues().");var c=t.getDimensions(),h=c[0],p=c[1],d=t.getNumComponent(),g=h*d,_=p;if(l){var y=l.getDimensions();y[0]===g&&y[1]===_||l.resize([g,_])}else l=new n.DataLayer("packToRGBA8Output",r,{dimensions:[g,_],type:"uint8",numComponents:4},i,!0,1);if(s.setUniform("u_floatTextureDim",[h,p],"FLOAT"),s.setUniform("u_numFloatComponents",d,"FLOAT"),this.step(s,[t],l),this.readyToRead()){var b=new Uint8Array(g*_*4);return r.readPixels(0,0,g,_,r.RGBA,r.UNSIGNED_BYTE,b),new Float32Array(b.buffer)}throw new Error("Unable to read values from Buffer with status: "+r.checkFramebufferStatus(r.FRAMEBUFFER)+".")},t.prototype.readyToRead=function(){var t=this.gl;return t.checkFramebufferStatus(t.FRAMEBUFFER)==t.FRAMEBUFFER_COMPLETE},t.prototype.reset=function(){},t.prototype.destroy=function(){},t}();e.GLCompute=d},664:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GPUProgram=void 0;var n=r(593),o=function(){function t(t,e,r,o,i,a,s){var u=this;this.uniforms={},this.shaders=[],this.attributes={},this.attributeNames=[],this.name=t,this.gl=e,this.errorCallback=r;var l=e.createProgram();if(l){if("string"==typeof i||"string"==typeof i[0]){var f="string"==typeof i?i:i.join("\n");s&&(f=Object.keys(s).map((function(t){return"#define "+t+" "+s[t]+"\n"})).join("\n")+f);var c=n.compileShader(e,r,f,e.FRAGMENT_SHADER,t);if(!c)return void r("Unable to compile fragment shader for program "+t+".");this.shaders.push(c),e.attachShader(l,c)}else{if(s)throw new Error("Unable to attach defines to program "+t+" because it is already compiled.");e.attachShader(l,i)}if("string"==typeof o){var h=n.compileShader(e,r,o,e.VERTEX_SHADER,t);if(!h)return void r("Unable to compile vertex shader for program "+t+".");this.shaders.push(h),e.attachShader(l,h)}else e.attachShader(l,o);e.linkProgram(l),e.getProgramParameter(l,e.LINK_STATUS)?(this.program=l,null==a||a.forEach((function(t){var e=t.name,r=t.value,n=t.dataType;u.setUniform(e,r,n)}))):r("Program "+t+" failed to link: "+e.getProgramInfoLog(l))}else r("Unable to init gl program: "+t+".")}return t.prototype.uniformTypeForValue=function(t,e){if("FLOAT"===e){if(!isNaN(t)||1===t.length)return"1f";if(2===t.length)return"2f";if(3===t.length)return"3f";if(4===t.length)return"3f";throw new Error("Invalid uniform value: "+t)}if("INT"===e){if(!isNaN(t)||1===t.length)return"1i";if(2===t.length)return"2i";if(3===t.length)return"3i";if(4===t.length)return"3i";throw new Error("Invalid uniform value: "+t)}throw new Error("Invalid uniform data type: "+e)},t.prototype.setUniform=function(t,e,r){var n=this,o=n.gl,i=n.errorCallback,a=n.program,s=n.uniforms;if(a){o.useProgram(a);var u=this.uniformTypeForValue(e,r);if(!s[t]){var l=o.getUniformLocation(a,t);if(!l)return void i("Could not init uniform "+t+" for program "+this.name+".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type "+u+".\nError code: "+o.getError()+".");s[t]={location:l,type:u}}var f=s[t];if(f.type!=u)throw new Error("Uniform "+t+" cannot change from type "+f.type+" to type "+u+".");var c=f.location;switch(u){case"1f":o.uniform1f(c,e);break;case"2f":o.uniform2fv(c,e);break;case"3f":o.uniform3fv(c,e);break;case"3f":o.uniform4fv(c,e);break;case"1i":o.uniform1i(c,e);break;case"2i":o.uniform2iv(c,e);break;case"3i":o.uniform3iv(c,e);break;case"3i":o.uniform4iv(c,e);break;default:throw new Error("Unknown uniform type: "+u+".")}}else i("Program not inited.")},t.prototype.setVertexAttribute=function(t,e){var r=this,o=r.gl,i=r.errorCallback,a=r.program,s=r.attributes,u=r.attributeNames;if(a){if(!n.isWebGL2(o))throw new Error("Must use a webgl2 context for transform feedback.");if(o.useProgram(a),!s[t]){var l=o.getAttribLocation(a,t);if(!l)return void i("Could not init vertexAttribute "+t+".\nError code: "+o.getError()+".");s[t]={location:l,type:e},u.push(t)}var f=s[t];if(f.type!=e)throw new Error("Vertex attribute "+t+" cannot change from type "+f.type+" to type "+e+".")}else i("Program not inited.")},t.prototype.getAttributeLocation=function(t){var e=this,r=e.attributes,n=e.attributeNames,o=e.name,i=n[t];if(!i)throw new Error("Invalid attribute index "+t+" for program "+o+", current attributes: "+n.join(", ")+".");var a=r[i];if(!a)throw new Error("Invalid attribute "+i+" for program "+o+".");return a.location},t.prototype.destroy=function(){var t=this,e=t.gl,r=t.program,n=t.shaders;r&&e.deleteProgram(r);for(var o=0;o<n.length;o++)e.deleteShader(n[o]);n.length=0,delete this.gl,delete this.errorCallback,delete this.program},t}();e.GPUProgram=o},581:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getExtension=e.EXT_COLOR_BUFFER_FLOAT=e.WEBGL_DEPTH_TEXTURE=e.OES_TEXTURE_HAlF_FLOAT_LINEAR=e.OES_TEXTURE_FLOAT_LINEAR=e.OES_TEXTURE_HALF_FLOAT=e.OES_TEXTURE_FLOAT=void 0;var r={};e.OES_TEXTURE_FLOAT="OES_texture_float",e.OES_TEXTURE_HALF_FLOAT="OES_texture_half_float",e.OES_TEXTURE_FLOAT_LINEAR="OES_texture_float_linear",e.OES_TEXTURE_HAlF_FLOAT_LINEAR="OES_texture_half_float_linear",e.WEBGL_DEPTH_TEXTURE="WEBGL_depth_texture",e.EXT_COLOR_BUFFER_FLOAT="EXT_color_buffer_float",e.getExtension=function(t,e,n,o){if(void 0===o&&(o=!1),void 0!==r[e])return r[e];var i;try{i=t.getExtension(e)}catch(t){}return i?(r[e]=i,console.log("Loaded extension: "+e+".")):(r[e]=!1,console.warn("Unsupported "+(o?"optional ":"")+"extension: "+e+".")),i||o||n("Required extension unsupported by this device / browser: "+e+"."),i}},593:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isPowerOf2=e.isWebGL2=e.compileShader=void 0,e.compileShader=function(t,e,r,n,o){var i=t.createShader(n);return i?(t.shaderSource(i,r),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS)?i:(e("Could not compile "+(n===t.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader"+(o?" for program "+o:"")+": "+t.getShaderInfoLog(i)+"."),null)):(e("Unable to init gl shader."),null)},e.isWebGL2=function(t){return!!t.HALF_FLOAT},e.isPowerOf2=function(t){return 0==(t&t-1)}},273:t=>{t.exports="// Vertex shader for fullscreen quad.\nprecision highp float;\n\nattribute vec2 aPosition;\n\nuniform vec2 u_scale;\nuniform vec2 u_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (aPosition + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_scale * aPosition + u_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},17:t=>{t.exports="precision highp float;\n\nvarying vec2 v_UV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_state, v_UV);\n}"},389:t=>{t.exports="/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Vertex shader for points.\nprecision highp float;\nprecision highp int;\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float aIndex; // Index of point.\n\nuniform sampler2D u_positions; // Texture lookup with position data.\nuniform vec2 u_positionDimensions;\nuniform vec2 u_scale;\nuniform float u_pointSize;\n\nvarying vec2 v_UV;\nvarying vec2 vParticleUV;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvParticleUV = vec2(modI(aIndex, u_positionDimensions.x), floor(floor(aIndex + 0.5) / u_positionDimensions.x)) / u_positionDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\tv_UV = texture2D(u_positions, vParticleUV).xy * u_scale;\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_PointSize = u_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}"},61:t=>{t.exports="/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\nprecision highp float;\nprecision highp int;\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float aIndex; // Index of point.\n\nuniform sampler2D u_positions; // Texture lookup with position data.\nuniform vec2 u_positionDimensions;\nuniform vec2 u_scale;\nuniform float u_pointSize;\n\nvarying vec2 v_UV;\nvarying vec2 vParticleUV;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvParticleUV = vec2(modI(aIndex, u_positionDimensions.x), floor(floor(aIndex + 0.5) / u_positionDimensions.x)) / u_positionDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t// We have packed a 2D displacement with the position.\n\tvec4 positionData = texture2D(u_positions, vParticleUV);\n\tvec2 positionAbsolute = positionData.rg + positionData.ba;\n\tv_UV = positionAbsolute * u_scale;\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_PointSize = u_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}"},498:t=>{t.exports="// Fragment shader that draws a single color (for testing).\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},87:t=>{t.exports="// TODO: this is still off by a factor of 2 sometimes.\n\nprecision highp float;\n\nuniform vec2 u_floatTextureDim;\nuniform sampler2D u_floatTexture;\nuniform float u_numFloatComponents;\n\nfloat shift_right (float v, float amt) {\n\tv = floor(v) + 0.5;\n\treturn floor(v / exp2(amt));\n}\nfloat shift_left (float v, float amt) {\n\treturn floor(v * exp2(amt) + 0.5);\n}\nfloat mask_last (float v, float bits) {\n\treturn mod(v, shift_left(1.0, bits));\n}\nfloat extract_bits (float num, float from, float to) {\n\tfrom = floor(from + 0.5); to = floor(to + 0.5);\n\treturn mask_last(shift_right(num, from), to - from);\n}\nvec4 encode_float (float val) {\n\tif (val == 0.0) return vec4(0, 0, 0, 0);\n\tfloat sign = val > 0.0 ? 0.0 : 1.0;\n\tval = abs(val);\n\tfloat exponent = floor(log2(val));\n\tfloat biased_exponent = exponent + 127.0;\n\tfloat fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;\n\tfloat t = biased_exponent / 2.0;\n\tfloat last_bit_of_biased_exponent = fract(t) * 2.0;\n\tfloat remaining_bits_of_biased_exponent = floor(t);\n\tfloat byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;\n\tfloat byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;\n\tfloat byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;\n\tfloat byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0;\n\treturn vec4(byte4, byte3, byte2, byte1);\n}\nvoid main(){\n\tvec2 fragCoord = gl_FragCoord.xy;\n\tfloat textureXcoord = floor((fragCoord.x - 0.5)/u_numFloatComponents+0.0001) + 0.5;\n\tvec4 data = texture2D(u_floatTexture, vec2(textureXcoord, fragCoord.y)/u_floatTextureDim);\n\tint textureIndex = int(floor(mod(fragCoord.x-0.5+0.0001, u_numFloatComponents)));\n\tif (textureIndex == 0) gl_FragColor = encode_float(data[0]);\n\telse if (textureIndex == 1) gl_FragColor = encode_float(data[1]);\n\telse if (textureIndex == 2) gl_FragColor = encode_float(data[2]);\n\telse if (textureIndex == 3) gl_FragColor = encode_float(data[3]);\n}"}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,loaded:!1,exports:{}};return t[n](i,i.exports,r),i.loaded=!0,i.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";r(321);r(498),r(389),r(61),r(17)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvQHBldGFtb3Jpa2VuL2Zsb2F0MTYvc3JjL2xpYi5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvQHBldGFtb3Jpa2VuL2Zsb2F0MTYvc3JjL2hmcm91bmQuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzTWFza2VkLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3RvU291cmNlLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFZhbHVlLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoR2V0LmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fSGFzaC5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoU2V0LmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2VxLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlR2V0LmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTWFwLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNLZXlhYmxlLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcENhY2hlLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9tZW1vaXplLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9AcGV0YW1vcmlrZW4vZmxvYXQxNi9zcmMvYnVnLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9AcGV0YW1vcmlrZW4vZmxvYXQxNi9zcmMvc3BlYy5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvQHBldGFtb3Jpa2VuL2Zsb2F0MTYvc3JjL2lzLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzQXJyYXlCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL0BwZXRhbW9yaWtlbi9mbG9hdDE2L3NyYy9GbG9hdDE2QXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL0BwZXRhbW9yaWtlbi9mbG9hdDE2L3NyYy9wcml2YXRlLmpzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL25vZGVfbW9kdWxlcy9AcGV0YW1vcmlrZW4vZmxvYXQxNi9zcmMvZGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9zcmMvRGF0YUxheWVyLnRzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL3NyYy9HTENvbXB1dGUudHMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vc3JjL0dQVVByb2dyYW0udHMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vc3JjL2V4dGVuc2lvbnMudHMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovL2dsY29tcHV0ZS8uL3NyYy9rZXJuZWxzL0RlZmF1bHRWZXJ0ZXhTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9nbGNvbXB1dGUvLi9zcmMva2VybmVscy9QYXNzVGhyb3VnaEZyYWdtZW50U2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vc3JjL2tlcm5lbHMvUG9pbnRzVmVydGV4U2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vc3JjL2tlcm5lbHMvUG9pbnRzVmVydGV4U2hhZGVyV2l0aERpc3BsYWNlbWVudC5nbHNsIiwid2VicGFjazovL2dsY29tcHV0ZS8uL3NyYy9rZXJuZWxzL1NpbmdsZUNvbG9yRnJhZ1NoYWRlci5nbHNsIiwid2VicGFjazovL2dsY29tcHV0ZS8uL3NyYy9rZXJuZWxzL3BhY2tGbG9hdDMyVG9SR0JBOEZyYWdtZW50U2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2dsY29tcHV0ZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlL3dlYnBhY2svcnVudGltZS9oYXJtb255IG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vZ2xjb21wdXRlLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiZmxvYXRWaWV3IiwiRmxvYXQzMkFycmF5IiwidWludDMyVmlldyIsIlVpbnQzMkFycmF5IiwiYmFzZVRhYmxlIiwic2hpZnRUYWJsZSIsImkiLCJlIiwicm91bmRUb0Zsb2F0MTZCaXRzIiwibnVtIiwiZiIsIm1hbnRpc3NhVGFibGUiLCJleHBvbmVudFRhYmxlIiwib2Zmc2V0VGFibGUiLCJtIiwiY29udmVydFRvTnVtYmVyIiwiZmxvYXQxNmJpdHMiLCJoZnJvdW5kIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJmcmVlU2VsZiIsInNlbGYiLCJPYmplY3QiLCJGdW5jdGlvbiIsIm9iamVjdFByb3RvIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsInRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJ1bmRlZmluZWQiLCJ2YWx1ZSIsImlzT3duIiwiY2FsbCIsInRhZyIsInVubWFza2VkIiwicmVzdWx0IiwidHlwZSIsInVpZCIsIm1hc2tTcmNLZXkiLCJleGVjIiwiZnVuY1RvU3RyaW5nIiwicmVJc0hvc3RDdG9yIiwicmVJc05hdGl2ZSIsIlJlZ0V4cCIsInJlcGxhY2UiLCJmdW5jIiwidGVzdCIsIm9iamVjdCIsImtleSIsIkhhc2giLCJlbnRyaWVzIiwiaW5kZXgiLCJsZW5ndGgiLCJ0aGlzIiwiY2xlYXIiLCJlbnRyeSIsInNldCIsIl9fZGF0YV9fIiwic2l6ZSIsImhhcyIsImdldCIsImRhdGEiLCJhcnJheSIsIm90aGVyIiwic3BsaWNlIiwiQXJyYXkiLCJMaXN0Q2FjaGUiLCJwb3AiLCJwdXNoIiwibWFwIiwiTWFwQ2FjaGUiLCJtZW1vaXplIiwicmVzb2x2ZXIiLCJUeXBlRXJyb3IiLCJtZW1vaXplZCIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImNhY2hlIiwiQ2FjaGUiLCJpc1R5cGVkQXJyYXlJbmRleGVkUHJvcGVydHlXcml0YWJsZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlVpbnQ4QXJyYXkiLCJ3cml0YWJsZSIsIlRvSW50ZWdlciIsInRhcmdldCIsIm51bWJlciIsImlzTmFOIiwiTWF0aCIsInRydW5jIiwiZGVmYXVsdENvbXBhcmVGdW5jdGlvbiIsIngiLCJ5IiwiaXNOYU5feCIsImlzTmFOX3kiLCJpc1BsdXNaZXJvX3giLCJpc1BsdXNaZXJvX3kiLCJpcyIsImlzRGF0YVZpZXciLCJ2aWV3IiwiRGF0YVZpZXciLCJpc1N0cmluZ051bWJlcktleSIsIm5vZGVJc0FycmF5QnVmZmVyIiwiXyIsIndtIiwiV2Vha01hcCIsIm9iaiIsImNyZWF0ZSIsImNyZWF0ZVByaXZhdGVTdG9yYWdlIiwiaXNGbG9hdDE2QXJyYXkiLCJGbG9hdDE2QXJyYXkiLCJhc3NlcnRGbG9hdDE2QXJyYXkiLCJjb3B5VG9BcnJheSIsImFwcGx5SGFuZGxlciIsInRoaXNBcmciLCJkZWZhdWx0RmxvYXQxNkFycmF5TWV0aG9kcyIsIlJlZmxlY3QiLCJoYW5kbGVyIiwid3JhcHBlciIsInJldCIsInByb3h5IiwiUHJveHkiLCJpc0Zyb3plbiIsImdldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJkZWZpbmVQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJkZWxldGVQcm9wZXJ0eSIsImlzRXh0ZW5zaWJsZSIsInByZXZlbnRFeHRlbnNpb25zIiwib3duS2V5cyIsIlVpbnQxNkFycmF5IiwiaW5wdXQiLCJieXRlT2Zmc2V0Iiwic3VwZXIiLCJhcnJheUxpa2UiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNyYyIsIm9wdHMiLCJmcm9tIiwibWFwRnVuYyIsInZhbCIsImtleXMiLCJ2YWx1ZXMiLCJjYWxsYmFjayIsImwiLCJzdGFydCIsIm9mZnNldCIsInJldmVyc2UiLCJmaWxsIiwiY29weVdpdGhpbiIsImNvbXBhcmVGdW5jdGlvbiIsIl9jb252ZXJ0VG9OdW1iZXIiLCJzb3J0Iiwic2xpY2UiLCJzdWJhcnJheSIsImVsZW1lbnQiLCJqb2luIiwidG9Mb2NhbGVTdHJpbmciLCJ0b1N0cmluZ1RhZyIsIkZsb2F0MTZBcnJheSRwcm90b3R5cGUiLCJXZWFrU2V0IiwiYWRkIiwiZ2V0RmxvYXQxNiIsImRhdGFWaWV3IiwiZ2V0VWludDE2Iiwic2V0RmxvYXQxNiIsInNldFVpbnQxNiIsImciLCJmcmVlRXhwb3J0cyIsImV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJtb2R1bGUiLCJmcmVlUHJvY2VzcyIsInJlcXVpcmUiLCJ0eXBlcyIsImJpbmRpbmciLCJuYW1lIiwiZ2wiLCJvcHRpb25zIiwiZXJyb3JDYWxsYmFjayIsIm51bUJ1ZmZlcnMiLCJidWZmZXJJbmRleCIsImJ1ZmZlcnMiLCJFcnJvciIsImRpbWVuc2lvbnMiLCJ3aWR0aCIsImhlaWdodCIsImNhbGNXaWR0aEhlaWdodCIsIm51bUNvbXBvbmVudHMiLCJEYXRhTGF5ZXIiLCJjaGVja1R5cGUiLCJmaWx0ZXIiLCJjaGVja0ZpbHRlciIsIndyYXBTIiwiY2hlY2tXcmFwIiwid3JhcFQiLCJnZXRHTFRleHR1cmVQYXJhbWV0ZXJzIiwiZ2xGb3JtYXQiLCJnbEludGVybmFsRm9ybWF0IiwiZ2xUeXBlIiwiZ2xOdW1DaGFubmVscyIsImluaXRCdWZmZXJzIiwiZXhwIiwicmVtYWluZGVyIiwicG93IiwiZmxvb3IiLCJ3cmFwIiwiaXNXZWJHTDIiLCJnZXRFeHRlbnNpb24iLCJPRVNfVEVYVFVSRV9IQWxGX0ZMT0FUX0xJTkVBUiIsIk9FU19URVhUVVJFX0ZMT0FUX0xJTkVBUiIsIk9FU19URVhUVVJFX0ZMT0FUIiwidGVzdEZyYW1lYnVmZmVyV3JpdGUiLCJPRVNfVEVYVFVSRV9IQUxGX0ZMT0FUIiwiRVhUX0NPTE9SX0JVRkZFUl9GTE9BVCIsImNoZWNrRGF0YUFycmF5IiwiX2RhdGEiLCJpbnZhbGlkVHlwZUZvdW5kIiwiY29uc3RydWN0b3IiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsImltYWdlU2l6ZSIsImhhbmRsZUZsb2F0MTYiLCJfbGVuIiwiaiIsInBhcmFtcyIsIlJFRCIsIlJHIiwiUkdCIiwiUkdCQSIsIlJFRF9JTlRFR0VSIiwiUkdfSU5URUdFUiIsIlJHQl9JTlRFR0VSIiwiUkdCQV9JTlRFR0VSIiwiRkxPQVQiLCJSMzJGIiwiUkczMkYiLCJSR0IzMkYiLCJSR0JBMzJGIiwiSEFMRl9GTE9BVCIsIlIxNkYiLCJSRzE2RiIsIlJHQjE2RiIsIlJHQkExNkYiLCJVTlNJR05FRF9CWVRFIiwiUjgiLCJSRzgiLCJIQUxGX0ZMT0FUX09FUyIsIldFQkdMX0RFUFRIX1RFWFRVUkUiLCJVTlNJR05FRF9TSE9SVCIsIlVOU0lHTkVEX0lOVCIsInRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01JTl9GSUxURVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJ0ZXhJbWFnZTJEIiwiZnJhbWVidWZmZXIiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsImNoZWNrRnJhbWVidWZmZXJTdGF0dXMiLCJGUkFNRUJVRkZFUl9DT01QTEVURSIsImdldEVycm9yIiwiZ2V0Q3VycmVudFN0YXRlVGV4dHVyZSIsImdldFByZXZpb3VzU3RhdGVUZXh0dXJlIiwicHJldmlvdXNJbmRleCIsImJpbmRPdXRwdXRCdWZmZXIiLCJpbmNyZW1lbnRCdWZmZXJJbmRleCIsInJlc2l6ZSIsImRlc3Ryb3lCdWZmZXJzIiwiZ2V0RGltZW5zaW9ucyIsImdldExlbmd0aCIsImdldE51bUNvbXBvbmVudCIsImdldFR5cGUiLCJmb3JFYWNoIiwiZGVsZXRlVGV4dHVyZSIsImRlbGV0ZUZyYW1lYnVmZmVyIiwiZGVzdHJveSIsImRlZmF1bHRWZXJ0ZXhTaGFkZXJTb3VyY2UiLCJwYXNzVGhyb3VnaEZyYWdtZW50U2hhZGVyU291cmNlIiwicGFja0Zsb2F0MzJUb1JHQkE4U2hhZGVyU291cmNlIiwiZnNRdWFkUG9zaXRpb25zIiwiYm91bmRhcnlQb3NpdGlvbnMiLCJ1bml0Q2lyY2xlUG9pbnRzIiwiY29zIiwiUEkiLCJzaW4iLCJjaXJjbGVQb3NpdGlvbnMiLCJjYW52YXNFbCIsIm1lc3NhZ2UiLCJlcnJvclN0YXRlIiwiZ2V0Q29udGV4dCIsImNvbnNvbGUiLCJsb2ciLCJkaXNhYmxlIiwiREVQVEhfVEVTVCIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX0FMSUdOTUVOVCIsImRlZmF1bHRWZXJ0ZXhTaGFkZXIiLCJjb21waWxlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsInBhc3NUaHJvdWdoUHJvZ3JhbSIsImluaXRQcm9ncmFtIiwiZGF0YVR5cGUiLCJxdWFkUG9zaXRpb25zQnVmZmVyIiwiaW5pdFZlcnRleEJ1ZmZlciIsImJvdW5kYXJ5UG9zaXRpb25zQnVmZmVyIiwiY2lyY2xlUG9zaXRpb25zQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsIm9uUmVzaXplIiwibWF4VGV4dHVyZXNJbkZyYWdtZW50U2hhZGVyIiwiZ2V0UGFyYW1ldGVyIiwiTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJjcmVhdGVCdWZmZXIiLCJidWZmZXJEYXRhIiwiU1RBVElDX0RSQVciLCJmcmFnbWVudFNoYWRlck9yU291cmNlIiwidW5pZm9ybXMiLCJkZWZpbmVzIiwidmVydGV4U2hhZGVyT3JTb3VyY2UiLCJHUFVQcm9ncmFtIiwiaW5pdERhdGFMYXllciIsImluaXRUZXh0dXJlIiwidXJsIiwiaW50ZXJuYWxGb3JtYXQiLCJzcmNGb3JtYXQiLCJzcmNUeXBlIiwicGl4ZWwiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwiaXNQb3dlck9mMiIsImdlbmVyYXRlTWlwbWFwIiwid2FybiIsIkNMQU1QX1RPX0VER0UiLCJMSU5FQVIiLCJvbmVycm9yIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJkcmF3U2V0dXAiLCJwcm9ncmFtIiwiZnVsbHNjcmVlblJlbmRlciIsImlucHV0TGF5ZXJzIiwib3V0cHV0TGF5ZXIiLCJpbnB1dFRleHR1cmVzIiwibGF5ZXIiLCJzZXRPdXRwdXRMYXllciIsInVzZVByb2dyYW0iLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJpbmRleE9mIiwic3RlcCIsInZpZXdwb3J0Iiwic2V0UG9zaXRpb25BdHRyaWJ1dGUiLCJsb2NhdGlvbiIsImdldEF0dHJpYkxvY2F0aW9uIiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5Iiwic2V0SW5kZXhBdHRyaWJ1dGUiLCJzZXRVbmlmb3JtIiwic2hvdWxkQmxlbmRBbHBoYSIsImVuYWJsZSIsIkJMRU5EIiwiYmxlbmRGdW5jIiwiU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsImRyYXdBcnJheXMiLCJUUklBTkdMRV9TVFJJUCIsInN0ZXBCb3VuZGFyeSIsIm9uZVB4Iiwic2luZ2xlRWRnZSIsIkxJTkVTIiwiTElORV9MT09QIiwic3RlcE5vbkJvdW5kYXJ5Iiwic3RlcENpcmNsZSIsInBvc2l0aW9uIiwicmFkaXVzIiwiVFJJQU5HTEVfRkFOIiwiTlVNX1NFR01FTlRTX0NJUkNMRSIsImRyYXdQb2ludHMiLCJwb2ludEluZGV4QXJyYXkiLCJwb3NpdGlvbkxheWVyIiwibnVtUG9pbnRzIiwicG9pbnRTaXplIiwicG9zaXRpb25MYXllckRpbWVuc2lvbnMiLCJwb2ludEluZGV4QnVmZmVyIiwiaW5kaWNlcyIsIlBPSU5UUyIsImdldFZhbHVlcyIsImRhdGFMYXllciIsInBhY2tGbG9hdDMyVG9SR0JBOFByb2dyYW0iLCJwYWNrVG9SR0JBOE91dHB1dEJ1ZmZlciIsIm91dHB1dFdpZHRoIiwib3V0cHV0SGVpZ2h0Iiwib3V0cHV0RGltZW5zaW9ucyIsInJlYWR5VG9SZWFkIiwicGl4ZWxzIiwicmVhZFBpeGVscyIsInJlc2V0IiwiR0xDb21wdXRlIiwic2hhZGVycyIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVOYW1lcyIsImNyZWF0ZVByb2dyYW0iLCJzb3VyY2VTdHJpbmciLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImF0dGFjaFNoYWRlciIsInZlcnRleFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwidW5pZm9ybSIsImdldFByb2dyYW1JbmZvTG9nIiwidW5pZm9ybVR5cGVGb3JWYWx1ZSIsInVuaWZvcm1OYW1lIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwidW5pZm9ybTFmIiwidW5pZm9ybTJmdiIsInVuaWZvcm0zZnYiLCJ1bmlmb3JtNGZ2IiwidW5pZm9ybTFpIiwidW5pZm9ybTJpdiIsInVuaWZvcm0zaXYiLCJ1bmlmb3JtNGl2Iiwic2V0VmVydGV4QXR0cmlidXRlIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZUxvY2F0aW9uIiwiZGVsZXRlUHJvZ3JhbSIsImRlbGV0ZVNoYWRlciIsImV4dGVuc2lvbnMiLCJleHRlbnNpb25OYW1lIiwib3B0aW9uYWwiLCJleHRlbnNpb24iLCJzaGFkZXJTb3VyY2UiLCJzaGFkZXJUeXBlIiwicHJvZ3JhbU5hbWUiLCJzaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImdldFNoYWRlckluZm9Mb2ciLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJpZCIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJlbnVtZXJhYmxlIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsImhtZCIsImNoaWxkcmVuIiwicHJvcCIsInIiXSwibWFwcGluZ3MiOiI4SEFFQSxNQUFNQSxFQUFTLElBQUlDLFlBQVksR0FDekJDLEVBQVksSUFBSUMsYUFBYUgsR0FDN0JJLEVBQWEsSUFBSUMsWUFBWUwsR0FHN0JNLEVBQVksSUFBSUQsWUFBWSxLQUM1QkUsRUFBYSxJQUFJRixZQUFZLEtBRW5DLElBQUksSUFBSUcsRUFBSSxFQUFHQSxFQUFJLE1BQU9BLEVBQUcsQ0FDekIsTUFBTUMsRUFBSUQsRUFBSSxJQUdWQyxHQUFLLElBQ0xILEVBQWMsRUFBSkUsR0FBYSxFQUN2QkYsRUFBYyxJQUFKRSxHQUFhLE1BQ3ZCRCxFQUFlLEVBQUpDLEdBQWEsR0FDeEJELEVBQWUsSUFBSkMsR0FBYSxJQUdqQkMsR0FB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LEVBQVMsYUFBYyxDQUFFN0ksT0FBTyxLLG1CQ0x2RCxPQUM4QixFQUFRLEtBQ1gsRUFBUSxLQUNRLEVBQVEsSUFDakIsRUFBUSxLIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYWxnb3JpdGhtOiBmdHA6Ly9mdHAuZm94LXRvb2xraXQub3JnL3B1Yi9mYXN0aGFsZmZsb2F0Y29udmVyc2lvbi5wZGZcblxuY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDQpO1xuY29uc3QgZmxvYXRWaWV3ID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xuY29uc3QgdWludDMyVmlldyA9IG5ldyBVaW50MzJBcnJheShidWZmZXIpO1xuXG5cbmNvbnN0IGJhc2VUYWJsZSA9IG5ldyBVaW50MzJBcnJheSg1MTIpO1xuY29uc3Qgc2hpZnRUYWJsZSA9IG5ldyBVaW50MzJBcnJheSg1MTIpO1xuXG5mb3IobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICBjb25zdCBlID0gaSAtIDEyNztcblxuICAgIC8vIHZlcnkgc21hbGwgbnVtYmVyICgwLCAtMClcbiAgICBpZiAoZSA8IC0yNykge1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MDAwXSA9IDB4MDAwMDtcbiAgICAgICAgYmFzZVRhYmxlW2kgfCAweDEwMF0gPSAweDgwMDA7XG4gICAgICAgIHNoaWZ0VGFibGVbaSB8IDB4MDAwXSA9IDI0O1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDEwMF0gPSAyNDtcblxuICAgIC8vIHNtYWxsIG51bWJlciAoZGVub3JtKVxuICAgIH0gZWxzZSBpZiAoZSA8IC0xNCkge1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MDAwXSA9ICAweDA0MDAgPj4gKC1lIC0gMTQpO1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MTAwXSA9ICgweDA0MDAgPj4gKC1lIC0gMTQpKSB8IDB4ODAwMDtcbiAgICAgICAgc2hpZnRUYWJsZVtpIHwgMHgwMDBdID0gLWUgLSAxO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDEwMF0gPSAtZSAtIDE7XG5cbiAgICAvLyBub3JtYWwgbnVtYmVyXG4gICAgfSBlbHNlIGlmIChlIDw9IDE1KSB7XG4gICAgICAgIGJhc2VUYWJsZVtpIHwgMHgwMDBdID0gIChlICsgMTUpIDw8IDEwO1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MTAwXSA9ICgoZSArIDE1KSA8PCAxMCkgfCAweDgwMDA7XG4gICAgICAgIHNoaWZ0VGFibGVbaSB8IDB4MDAwXSA9IDEzO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDEwMF0gPSAxMztcblxuICAgIC8vIGxhcmdlIG51bWJlciAoSW5maW5pdHksIC1JbmZpbml0eSlcbiAgICB9IGVsc2UgaWYgKGUgPCAxMjgpIHtcbiAgICAgICAgYmFzZVRhYmxlW2kgfCAweDAwMF0gPSAweDdjMDA7XG4gICAgICAgIGJhc2VUYWJsZVtpIHwgMHgxMDBdID0gMHhmYzAwO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDAwMF0gPSAyNDtcbiAgICAgICAgc2hpZnRUYWJsZVtpIHwgMHgxMDBdID0gMjQ7XG5cbiAgICAvLyBzdGF5IChOYU4sIEluZmluaXR5LCAtSW5maW5pdHkpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZVRhYmxlW2kgfCAweDAwMF0gPSAweDdjMDA7XG4gICAgICAgIGJhc2VUYWJsZVtpIHwgMHgxMDBdID0gMHhmYzAwO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDAwMF0gPSAxMztcbiAgICAgICAgc2hpZnRUYWJsZVtpIHwgMHgxMDBdID0gMTM7XG4gICAgfVxufVxuXG4vKipcbiAqIHJvdW5kIGEgbnVtYmVyIHRvIGEgaGFsZiBmbG9hdCBudW1iZXIgYml0cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gLSBkb3VibGUgZmxvYXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGhhbGYgZmxvYXQgbnVtYmVyIGJpdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kVG9GbG9hdDE2Qml0cyhudW0pIHtcbiAgICBmbG9hdFZpZXdbMF0gPSBudW07XG5cbiAgICBjb25zdCBmID0gdWludDMyVmlld1swXTtcbiAgICBjb25zdCBlID0gKGYgPj4gMjMpICYgMHgxZmY7XG4gICAgcmV0dXJuIGJhc2VUYWJsZVtlXSArICgoZiAmIDB4MDA3ZmZmZmYpID4+IHNoaWZ0VGFibGVbZV0pO1xufVxuXG5cbmNvbnN0IG1hbnRpc3NhVGFibGUgPSBuZXcgVWludDMyQXJyYXkoMjA0OCk7XG5jb25zdCBleHBvbmVudFRhYmxlID0gbmV3IFVpbnQzMkFycmF5KDY0KTtcbmNvbnN0IG9mZnNldFRhYmxlID0gbmV3IFVpbnQzMkFycmF5KDY0KTtcblxubWFudGlzc2FUYWJsZVswXSA9IDA7XG5mb3IobGV0IGkgPSAxOyBpIDwgMTAyNDsgKytpKSB7XG4gICAgbGV0IG0gPSBpIDw8IDEzOyAgICAvLyB6ZXJvIHBhZCBtYW50aXNzYSBiaXRzXG4gICAgbGV0IGUgPSAwOyAgICAgICAgICAvLyB6ZXJvIGV4cG9uZW50XG5cbiAgICAvLyBub3JtYWxpemVkXG4gICAgd2hpbGUoKG0gJiAweDAwODAwMDAwKSA9PT0gMCkge1xuICAgICAgICBlIC09IDB4MDA4MDAwMDA7ICAgIC8vIGRlY3JlbWVudCBleHBvbmVudFxuICAgICAgICBtIDw8PSAxO1xuICAgIH1cblxuICAgIG0gJj0gfjB4MDA4MDAwMDA7ICAgLy8gY2xlYXIgbGVhZGluZyAxIGJpdFxuICAgIGUgKz0gMHgzODgwMDAwMDsgICAgLy8gYWRqdXN0IGJpYXNcblxuICAgIG1hbnRpc3NhVGFibGVbaV0gPSBtIHwgZTtcbn1cbmZvcihsZXQgaSA9IDEwMjQ7IGkgPCAyMDQ4OyArK2kpIHtcbiAgICBtYW50aXNzYVRhYmxlW2ldID0gMHgzODAwMDAwMCArICgoaSAtIDEwMjQpIDw8IDEzKTtcbn1cblxuZXhwb25lbnRUYWJsZVswXSA9IDA7XG5mb3IobGV0IGkgPSAxOyBpIDwgMzE7ICsraSkge1xuICAgIGV4cG9uZW50VGFibGVbaV0gPSBpIDw8IDIzO1xufVxuZXhwb25lbnRUYWJsZVszMV0gPSAweDQ3ODAwMDAwO1xuZXhwb25lbnRUYWJsZVszMl0gPSAweDgwMDAwMDAwO1xuZm9yKGxldCBpID0gMzM7IGkgPCA2MzsgKytpKSB7XG4gICAgZXhwb25lbnRUYWJsZVtpXSA9IDB4ODAwMDAwMDAgKyAoKGkgLSAzMikgPDwgMjMpO1xufVxuZXhwb25lbnRUYWJsZVs2M10gPSAweGM3ODAwMDAwO1xuXG5vZmZzZXRUYWJsZVswXSA9IDA7XG5mb3IobGV0IGkgPSAxOyBpIDwgNjQ7ICsraSkge1xuICAgIGlmIChpID09PSAzMikge1xuICAgICAgICBvZmZzZXRUYWJsZVtpXSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0VGFibGVbaV0gPSAxMDI0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBjb252ZXJ0IGEgaGFsZiBmbG9hdCBudW1iZXIgYml0cyB0byBhIG51bWJlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmbG9hdDE2Yml0cyAtIGhhbGYgZmxvYXQgbnVtYmVyIGJpdHNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRvdWJsZSBmbG9hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvTnVtYmVyKGZsb2F0MTZiaXRzKSB7XG4gICAgY29uc3QgbSA9IGZsb2F0MTZiaXRzID4+IDEwO1xuICAgIHVpbnQzMlZpZXdbMF0gPSBtYW50aXNzYVRhYmxlW29mZnNldFRhYmxlW21dICsgKGZsb2F0MTZiaXRzICYgMHgzZmYpXSArIGV4cG9uZW50VGFibGVbbV07XG4gICAgcmV0dXJuIGZsb2F0Vmlld1swXTtcbn1cbiIsImltcG9ydCB7IGNvbnZlcnRUb051bWJlciwgcm91bmRUb0Zsb2F0MTZCaXRzIH0gZnJvbSBcIi4vbGliXCI7XG5cbi8qKlxuICogcmV0dXJucyB0aGUgbmVhcmVzdCBoYWxmIHByZWNpc2lvbiBmbG9hdCByZXByZXNlbnRhdGlvbiBvZiBhIG51bWJlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhmcm91bmQobnVtKSB7XG4gICAgbnVtID0gTnVtYmVyKG51bSk7XG5cbiAgICAvLyBmb3Igb3B0aW1pemF0aW9uXG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUobnVtKSB8fCBudW0gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG5cbiAgICBjb25zdCB4MTYgPSByb3VuZFRvRmxvYXQxNkJpdHMobnVtKTtcbiAgICByZXR1cm4gY29udmVydFRvTnVtYmVyKHgxNik7XG59XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuZXhwb3J0IGRlZmF1bHQgY29yZUpzRGF0YTtcbiIsImltcG9ydCBjb3JlSnNEYXRhIGZyb20gJy4vX2NvcmVKc0RhdGEuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Tb3VyY2U7XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IGlzTWFza2VkIGZyb20gJy4vX2lzTWFza2VkLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCB0b1NvdXJjZSBmcm9tICcuL190b1NvdXJjZS5qcyc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc05hdGl2ZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwiaW1wb3J0IGJhc2VJc05hdGl2ZSBmcm9tICcuL19iYXNlSXNOYXRpdmUuanMnO1xuaW1wb3J0IGdldFZhbHVlIGZyb20gJy4vX2dldFZhbHVlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TmF0aXZlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVDcmVhdGU7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEdldDtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoSGFzO1xuIiwiaW1wb3J0IGhhc2hDbGVhciBmcm9tICcuL19oYXNoQ2xlYXIuanMnO1xuaW1wb3J0IGhhc2hEZWxldGUgZnJvbSAnLi9faGFzaERlbGV0ZS5qcyc7XG5pbXBvcnQgaGFzaEdldCBmcm9tICcuL19oYXNoR2V0LmpzJztcbmltcG9ydCBoYXNoSGFzIGZyb20gJy4vX2hhc2hIYXMuanMnO1xuaW1wb3J0IGhhc2hTZXQgZnJvbSAnLi9faGFzaFNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBIYXNoO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaERlbGV0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hTZXQ7XG4iLCJpbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc29jSW5kZXhPZjtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcTtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVEZWxldGU7XG4iLCJpbXBvcnQgbGlzdENhY2hlQ2xlYXIgZnJvbSAnLi9fbGlzdENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IGxpc3RDYWNoZURlbGV0ZSBmcm9tICcuL19saXN0Q2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUdldCBmcm9tICcuL19saXN0Q2FjaGVHZXQuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUhhcyBmcm9tICcuL19saXN0Q2FjaGVIYXMuanMnO1xuaW1wb3J0IGxpc3RDYWNoZVNldCBmcm9tICcuL19saXN0Q2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RDYWNoZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlQ2xlYXI7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUdldDtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUhhcztcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVTZXQ7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcDtcbiIsImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0tleWFibGU7XG4iLCJpbXBvcnQgbWFwQ2FjaGVDbGVhciBmcm9tICcuL19tYXBDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBtYXBDYWNoZURlbGV0ZSBmcm9tICcuL19tYXBDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVHZXQgZnJvbSAnLi9fbWFwQ2FjaGVHZXQuanMnO1xuaW1wb3J0IG1hcENhY2hlSGFzIGZyb20gJy4vX21hcENhY2hlSGFzLmpzJztcbmltcG9ydCBtYXBDYWNoZVNldCBmcm9tICcuL19tYXBDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDYWNoZTtcbiIsImltcG9ydCBIYXNoIGZyb20gJy4vX0hhc2guanMnO1xuaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlQ2xlYXI7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlRGVsZXRlO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVHZXQ7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVIYXM7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZVNldDtcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsIi8qKlxuICogSmF2YVNjcmlwdENvcmUgPD0gMTIgYnVnXG4gKiBAc2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNzE2MDZcbiAqL1xuZXhwb3J0IGNvbnN0IGlzVHlwZWRBcnJheUluZGV4ZWRQcm9wZXJ0eVdyaXRhYmxlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXcgVWludDhBcnJheSgxKSwgMCkud3JpdGFibGU7XG4iLCIvKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGFyZ2V0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gVG9JbnRlZ2VyKHRhcmdldCkge1xuICAgIGxldCBudW1iZXIgPSB0eXBlb2YgdGFyZ2V0ICE9PSBcIm51bWJlclwiID8gTnVtYmVyKHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgaWYgKE51bWJlci5pc05hTihudW1iZXIpKSB7XG4gICAgICAgIG51bWJlciA9IDA7XG4gICAgfVxuICAgIHJldHVybiBNYXRoLnRydW5jKG51bWJlcik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gKiBAcmV0dXJucyB7LTEgfCAwIHwgMX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlRnVuY3Rpb24oeCwgeSkge1xuICAgIGNvbnN0IFtpc05hTl94LCBpc05hTl95XSA9IFtOdW1iZXIuaXNOYU4oeCksIE51bWJlci5pc05hTih5KV07XG5cbiAgICBpZiAoaXNOYU5feCAmJiBpc05hTl95KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGlmIChpc05hTl94KSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmIChpc05hTl95KSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAoeCA8IHkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmICh4ID4geSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICBpZiAoeCA9PT0gMCAmJiB5ID09PSAwKSB7XG4gICAgICAgIGNvbnN0IFtpc1BsdXNaZXJvX3gsIGlzUGx1c1plcm9feV0gPSBbT2JqZWN0LmlzKHgsIDApLCBPYmplY3QuaXMoeSwgMCldO1xuXG4gICAgICAgIGlmICghaXNQbHVzWmVyb194ICYmIGlzUGx1c1plcm9feSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzUGx1c1plcm9feCAmJiAhaXNQbHVzWmVyb195KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAwO1xufVxuIiwiaW1wb3J0IHsgVG9JbnRlZ2VyIH0gZnJvbSBcIi4vc3BlY1wiO1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzQXJyYXlCdWZmZXIgfSBmcm9tIFwibG9kYXNoLWVzL2lzQXJyYXlCdWZmZXJcIjtcblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IHZpZXdcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRhVmlldyh2aWV3KSB7XG4gICAgcmV0dXJuIHZpZXcgaW5zdGFuY2VvZiBEYXRhVmlldztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IGtleVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZ051bWJlcktleShrZXkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiAmJiBrZXkgPT09IFRvSW50ZWdlcihrZXkpICsgXCJcIjtcbn1cbiIsImltcG9ydCBiYXNlSXNBcnJheUJ1ZmZlciBmcm9tICcuL19iYXNlSXNBcnJheUJ1ZmZlci5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcjtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXlCdWZmZXI7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VVbmFyeTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNBcnJheUJ1ZmZlcjtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tIFwibG9kYXNoLWVzL21lbW9pemVcIjtcbmltcG9ydCB7IGlzVHlwZWRBcnJheUluZGV4ZWRQcm9wZXJ0eVdyaXRhYmxlIH0gZnJvbSBcIi4vYnVnXCI7XG5pbXBvcnQgeyBpc0FycmF5QnVmZmVyLCBpc1N0cmluZ051bWJlcktleSB9IGZyb20gXCIuL2lzXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9OdW1iZXIsIHJvdW5kVG9GbG9hdDE2Qml0cyB9IGZyb20gXCIuL2xpYlwiO1xuaW1wb3J0IHsgY3JlYXRlUHJpdmF0ZVN0b3JhZ2UgfSBmcm9tIFwiLi9wcml2YXRlXCI7XG5pbXBvcnQgeyBUb0ludGVnZXIsIGRlZmF1bHRDb21wYXJlRnVuY3Rpb24gfSBmcm9tIFwiLi9zcGVjXCI7XG5cbmNvbnN0IF8gPSBjcmVhdGVQcml2YXRlU3RvcmFnZSgpO1xuXG4vKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGFyZ2V0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbG9hdDE2QXJyYXkodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIEZsb2F0MTZBcnJheTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IHRhcmdldFxuICogQHRocm93cyB7VHlwZUVycm9yfVxuICovXG5mdW5jdGlvbiBhc3NlcnRGbG9hdDE2QXJyYXkodGFyZ2V0KSB7XG4gICAgaWYgKCFpc0Zsb2F0MTZBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGlzIGlzIG5vdCBhIEZsb2F0MTZBcnJheVwiKTtcbiAgICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSB0YXJnZXRcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0RlZmF1bHRGbG9hdDE2QXJyYXlNZXRob2RzKHRhcmdldCkge1xuICAgIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmYXVsdEZsb2F0MTZBcnJheU1ldGhvZHMuaGFzKHRhcmdldCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtGbG9hdDE2QXJyYXl9IGZsb2F0MTZiaXRzXG4gKiBAcmV0dXJuIHtudW1iZXJbXX1cbiAqL1xuZnVuY3Rpb24gY29weVRvQXJyYXkoZmxvYXQxNmJpdHMpIHtcbiAgICBjb25zdCBsZW5ndGggPSBmbG9hdDE2Yml0cy5sZW5ndGg7XG5cbiAgICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBhcnJheVtpXSA9IGNvbnZlcnRUb051bWJlcihmbG9hdDE2Yml0c1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG4vKiogQHR5cGUge1Byb3h5SGFuZGxlcjxGdW5jdGlvbj59ICovXG5jb25zdCBhcHBseUhhbmRsZXIgPSB7XG4gICAgYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgICAgICAvLyBwZWVsIG9mZiBwcm94eVxuICAgICAgICBpZiAoaXNGbG9hdDE2QXJyYXkodGhpc0FyZykgJiYgaXNEZWZhdWx0RmxvYXQxNkFycmF5TWV0aG9kcyhmdW5jKSkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkoZnVuYywgXyh0aGlzQXJnKS50YXJnZXQgLGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncyk7XG4gICAgfSxcbn07XG5cbi8qKiBAdHlwZSB7UHJveHlIYW5kbGVyPEZsb2F0MTZBcnJheT59ICovXG5jb25zdCBoYW5kbGVyID0ge1xuICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICBsZXQgd3JhcHBlciA9IG51bGw7XG4gICAgICAgIGlmICghaXNUeXBlZEFycmF5SW5kZXhlZFByb3BlcnR5V3JpdGFibGUpIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0YXJnZXQgPSBfKHdyYXBwZXIpLnRhcmdldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1N0cmluZ051bWJlcktleShrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpID8gY29udmVydFRvTnVtYmVyKFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5KSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXQgPSB3cmFwcGVyICE9PSBudWxsICYmIFJlZmxlY3QuaGFzKHdyYXBwZXIsIGtleSkgPyBSZWZsZWN0LmdldCh3cmFwcGVyLCBrZXkpIDogUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXkpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVHlwZWRBcnJheSBtZXRob2RzIGNhbid0IGJlIGNhbGxlZCBieSBQcm94eSBPYmplY3RcbiAgICAgICAgICAgIGxldCBwcm94eSA9IF8ocmV0KS5wcm94eTtcblxuICAgICAgICAgICAgaWYgKHByb3h5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwcm94eSA9IF8ocmV0KS5wcm94eSA9IG5ldyBQcm94eShyZXQsIGFwcGx5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwcm94eTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXQodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGxldCB3cmFwcGVyID0gbnVsbDtcbiAgICAgICAgaWYgKCFpc1R5cGVkQXJyYXlJbmRleGVkUHJvcGVydHlXcml0YWJsZSkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHRhcmdldDtcbiAgICAgICAgICAgIHRhcmdldCA9IF8od3JhcHBlcikudGFyZ2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nTnVtYmVyS2V5KGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgcm91bmRUb0Zsb2F0MTZCaXRzKHZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmcm96ZW4gb2JqZWN0IGNhbid0IGNoYW5nZSBwcm90b3R5cGUgcHJvcGVydHlcbiAgICAgICAgICAgIGlmICh3cmFwcGVyICE9PSBudWxsICYmICghUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpIHx8IE9iamVjdC5pc0Zyb3plbih3cmFwcGVyKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5zZXQod3JhcHBlciwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbn07XG5cbmlmICghaXNUeXBlZEFycmF5SW5kZXhlZFByb3BlcnR5V3JpdGFibGUpIHtcbiAgICBoYW5kbGVyLmdldFByb3RvdHlwZU9mID0gKHdyYXBwZXIpID0+IHsgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YoXyh3cmFwcGVyKS50YXJnZXQpOyB9O1xuICAgIGhhbmRsZXIuc2V0UHJvdG90eXBlT2YgPSAod3JhcHBlciwgcHJvdG90eXBlKSA9PiB7IHJldHVybiBSZWZsZWN0LnNldFByb3RvdHlwZU9mKF8od3JhcHBlcikudGFyZ2V0LCBwcm90b3R5cGUpOyB9O1xuXG4gICAgaGFuZGxlci5kZWZpbmVQcm9wZXJ0eSA9ICh3cmFwcGVyLCBrZXksIGRlc2NyaXB0b3IpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gXyh3cmFwcGVyKS50YXJnZXQ7XG4gICAgICAgIHJldHVybiAhUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpIHx8IE9iamVjdC5pc0Zyb3plbih3cmFwcGVyKSA/IFJlZmxlY3QuZGVmaW5lUHJvcGVydHkod3JhcHBlciwga2V5LCBkZXNjcmlwdG9yKSA6IFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH07XG4gICAgaGFuZGxlci5kZWxldGVQcm9wZXJ0eSA9ICh3cmFwcGVyLCBrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gXyh3cmFwcGVyKS50YXJnZXQ7XG4gICAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyh3cmFwcGVyLCBrZXkpID8gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh3cmFwcGVyLCBrZXkpIDogUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSk7XG4gICAgfTtcblxuICAgIGhhbmRsZXIuaGFzID0gKHdyYXBwZXIsIGtleSkgPT4geyByZXR1cm4gUmVmbGVjdC5oYXMod3JhcHBlciwga2V5KSB8fCBSZWZsZWN0LmhhcyhfKHdyYXBwZXIpLnRhcmdldCwga2V5KTsgfTtcblxuICAgIGhhbmRsZXIuaXNFeHRlbnNpYmxlID0gKHdyYXBwZXIpID0+IHsgcmV0dXJuIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHdyYXBwZXIpOyB9O1xuICAgIGhhbmRsZXIucHJldmVudEV4dGVuc2lvbnMgPSAod3JhcHBlcikgPT4geyByZXR1cm4gUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh3cmFwcGVyKTsgfTtcblxuICAgIGhhbmRsZXIuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gKHdyYXBwZXIsIGtleSkgPT4geyByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod3JhcHBlciwga2V5KTsgfTtcbiAgICBoYW5kbGVyLm93bktleXMgPSAod3JhcHBlcikgPT4geyByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHdyYXBwZXIpOyB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbG9hdDE2QXJyYXkgZXh0ZW5kcyBVaW50MTZBcnJheSB7XG5cbiAgICBjb25zdHJ1Y3RvcihpbnB1dCwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgIC8vIGlucHV0IEZsb2F0MTZBcnJheVxuICAgICAgICBpZiAoaXNGbG9hdDE2QXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBzdXBlcihfKGlucHV0KS50YXJnZXQpO1xuXG4gICAgICAgIC8vIDIyLjIuMS4zLCAyMi4yLjEuNCBUeXBlZEFycmF5LCBBcnJheSwgQXJyYXlMaWtlLCBJdGVyYWJsZVxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiAhaXNBcnJheUJ1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIGlmIGlucHV0IGlzIG5vdCBBcnJheUxpa2UgYW5kIEl0ZXJhYmxlLCBnZXQgQXJyYXlcbiAgICAgICAgICAgIGNvbnN0IGFycmF5TGlrZSA9ICFSZWZsZWN0LmhhcyhpbnB1dCwgXCJsZW5ndGhcIikgJiYgaW5wdXRbU3ltYm9sLml0ZXJhdG9yXSAhPT0gdW5kZWZpbmVkID8gWy4uLmlucHV0XSA6IGlucHV0O1xuXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoO1xuICAgICAgICAgICAgc3VwZXIobGVuZ3RoKTtcblxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgLy8gc3VwZXIgKFVpbnQxNkFycmF5KVxuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSByb3VuZFRvRmxvYXQxNkJpdHMoYXJyYXlMaWtlW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAvLyAyMi4yLjEuMiwgMjIuMi4xLjUgcHJpbWl0aXZlLCBBcnJheUJ1ZmZlclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBzdXBlcihpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBzdXBlcihpbnB1dCwgYnl0ZU9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBzdXBlcihpbnB1dCwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcHJveHk7XG5cbiAgICAgICAgaWYgKGlzVHlwZWRBcnJheUluZGV4ZWRQcm9wZXJ0eVdyaXRhYmxlKSB7XG4gICAgICAgICAgICBwcm94eSA9IG5ldyBQcm94eSh0aGlzLCBoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgXyh3cmFwcGVyKS50YXJnZXQgPSB0aGlzO1xuICAgICAgICAgICAgcHJveHkgPSBuZXcgUHJveHkod3JhcHBlciwgaGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwcm94eSBwcml2YXRlIHN0b3JhZ2VcbiAgICAgICAgXyhwcm94eSkudGFyZ2V0ID0gdGhpcztcblxuICAgICAgICAvLyB0aGlzIHByaXZhdGUgc3RvcmFnZVxuICAgICAgICBfKHRoaXMpLnByb3h5ID0gcHJveHk7XG5cbiAgICAgICAgcmV0dXJuIHByb3h5O1xuICAgIH1cblxuICAgIC8vIHN0YXRpYyBtZXRob2RzXG4gICAgc3RhdGljIGZyb20oc3JjLCAuLi5vcHRzKSB7XG4gICAgICAgIGlmIChvcHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoVWludDE2QXJyYXkuZnJvbShzcmMsIHJvdW5kVG9GbG9hdDE2Qml0cykuYnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hcEZ1bmMgPSBvcHRzWzBdO1xuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1sxXTtcblxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MTZBcnJheShVaW50MTZBcnJheS5mcm9tKHNyYywgZnVuY3Rpb24gKHZhbCwgLi4uYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kVG9GbG9hdDE2Qml0cyhtYXBGdW5jLmNhbGwodGhpcywgdmFsLCAuLi5hcmdzKSk7XG4gICAgICAgIH0sIHRoaXNBcmcpLmJ1ZmZlcik7XG4gICAgfVxuXG4gICAgc3RhdGljIG9mKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoYXJncyk7XG4gICAgfVxuXG4gICAgLy8gaXRlcmF0ZSBtZXRob2RzXG4gICAgKiBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgZm9yKGNvbnN0IHZhbCBvZiBzdXBlcltTeW1ib2wuaXRlcmF0b3JdKCkpIHtcbiAgICAgICAgICAgIHlpZWxkIGNvbnZlcnRUb051bWJlcih2YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAga2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmtleXMoKTtcbiAgICB9XG5cbiAgICAqIHZhbHVlcygpIHtcbiAgICAgICAgZm9yKGNvbnN0IHZhbCBvZiBzdXBlci52YWx1ZXMoKSkge1xuICAgICAgICAgICAgeWllbGQgY29udmVydFRvTnVtYmVyKHZhbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQHR5cGUgeygpID0+IEl0ZXJhYmxlSXRlcmF0b3I8W251bWJlciwgbnVtYmVyXT59ICovXG4gICAgKiBlbnRyaWVzKCkge1xuICAgICAgICBmb3IoY29uc3QgW2ksIHZhbF0gb2Ygc3VwZXIuZW50cmllcygpKSB7XG4gICAgICAgICAgICB5aWVsZCBbaSwgY29udmVydFRvTnVtYmVyKHZhbCldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZnVuY3Rpb25hbCBtZXRob2RzXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG1hcChjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgdGhpc0FyZyA9IG9wdHNbMF07XG5cbiAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSk7XG4gICAgICAgICAgICBhcnJheS5wdXNoKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsLCBpLCBfKHRoaXMpLnByb3h5KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MTZBcnJheShhcnJheSk7XG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZpbHRlcihjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgdGhpc0FyZyA9IG9wdHNbMF07XG5cbiAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWwsIGksIF8odGhpcykucHJveHkpKSB7XG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoYXJyYXkpO1xuICAgIH1cblxuICAgIHJlZHVjZShjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgbGV0IHZhbCwgc3RhcnQ7XG5cbiAgICAgICAgaWYgKG9wdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB2YWwgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1swXSk7XG4gICAgICAgICAgICBzdGFydCA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWwgPSBvcHRzWzBdO1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgdmFsID0gY2FsbGJhY2sodmFsLCBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSksIGksIF8odGhpcykucHJveHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICByZWR1Y2VSaWdodChjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgbGV0IHZhbCwgc3RhcnQ7XG5cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGlmIChvcHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdmFsID0gY29udmVydFRvTnVtYmVyKHRoaXNbbGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgc3RhcnQgPSBsZW5ndGggLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsID0gb3B0c1swXTtcbiAgICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGktLTspIHtcbiAgICAgICAgICAgIHZhbCA9IGNhbGxiYWNrKHZhbCwgY29udmVydFRvTnVtYmVyKHRoaXNbaV0pLCBpLCBfKHRoaXMpLnByb3h5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgZm9yRWFjaChjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgdGhpc0FyZyA9IG9wdHNbMF07XG5cbiAgICAgICAgZm9yKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGNvbnZlcnRUb051bWJlcih0aGlzW2ldKSwgaSwgXyh0aGlzKS5wcm94eSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5kKGNhbGxiYWNrLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1swXTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29udmVydFRvTnVtYmVyKHRoaXNbaV0pO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIF8odGhpcykucHJveHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluZEluZGV4KGNhbGxiYWNrLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1swXTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29udmVydFRvTnVtYmVyKHRoaXNbaV0pO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIF8odGhpcykucHJveHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgZXZlcnkoY2FsbGJhY2ssIC4uLm9wdHMpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIGNvbnN0IHRoaXNBcmcgPSBvcHRzWzBdO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGNvbnZlcnRUb051bWJlcih0aGlzW2ldKSwgaSwgXyh0aGlzKS5wcm94eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzb21lKGNhbGxiYWNrLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1swXTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGNvbnZlcnRUb051bWJlcih0aGlzW2ldKSwgaSwgXyh0aGlzKS5wcm94eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBjaGFuZ2UgZWxlbWVudCBtZXRob2RzXG4gICAgc2V0KGlucHV0LCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBvZmZzZXQgPSBvcHRzWzBdO1xuXG4gICAgICAgIGxldCBmbG9hdDE2Yml0cztcblxuICAgICAgICAvLyBpbnB1dCBGbG9hdDE2QXJyYXlcbiAgICAgICAgaWYgKGlzRmxvYXQxNkFycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgZmxvYXQxNmJpdHMgPSBfKGlucHV0KS50YXJnZXQ7XG5cbiAgICAgICAgLy8gaW5wdXQgb3RoZXJzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBhcnJheUxpa2UgPSAhUmVmbGVjdC5oYXMoaW5wdXQsIFwibGVuZ3RoXCIpICYmIGlucHV0W1N5bWJvbC5pdGVyYXRvcl0gIT09IHVuZGVmaW5lZCA/IFsuLi5pbnB1dF0gOiBpbnB1dDtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZsb2F0MTZiaXRzID0gbmV3IFVpbnQxNkFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gYXJyYXlMaWtlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgICAgIGZsb2F0MTZiaXRzW2ldID0gcm91bmRUb0Zsb2F0MTZCaXRzKGFycmF5TGlrZVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5zZXQoZmxvYXQxNmJpdHMsIG9mZnNldCk7XG4gICAgfVxuXG4gICAgcmV2ZXJzZSgpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIHN1cGVyLnJldmVyc2UoKTtcblxuICAgICAgICByZXR1cm4gXyh0aGlzKS5wcm94eTtcbiAgICB9XG5cbiAgICBmaWxsKHZhbHVlLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBzdXBlci5maWxsKHJvdW5kVG9GbG9hdDE2Qml0cyh2YWx1ZSksIC4uLm9wdHMpO1xuXG4gICAgICAgIHJldHVybiBfKHRoaXMpLnByb3h5O1xuICAgIH1cblxuICAgIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgc3VwZXIuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCAuLi5vcHRzKTtcblxuICAgICAgICByZXR1cm4gXyh0aGlzKS5wcm94eTtcbiAgICB9XG5cbiAgICBzb3J0KC4uLm9wdHMpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIGxldCBjb21wYXJlRnVuY3Rpb24gPSBvcHRzWzBdO1xuXG4gICAgICAgIGlmIChjb21wYXJlRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tcGFyZUZ1bmN0aW9uID0gZGVmYXVsdENvbXBhcmVGdW5jdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IF9jb252ZXJ0VG9OdW1iZXIgPSBtZW1vaXplKGNvbnZlcnRUb051bWJlcik7XG5cbiAgICAgICAgc3VwZXIuc29ydCgoeCwgeSkgPT4geyByZXR1cm4gY29tcGFyZUZ1bmN0aW9uKF9jb252ZXJ0VG9OdW1iZXIoeCksIF9jb252ZXJ0VG9OdW1iZXIoeSkpOyB9KTtcblxuICAgICAgICByZXR1cm4gXyh0aGlzKS5wcm94eTtcbiAgICB9XG5cbiAgICAvLyBjb3B5IGVsZW1lbnQgbWV0aG9kc1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBzbGljZSguLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBsZXQgZmxvYXQxNmJpdHM7XG5cbiAgICAgICAgLy8gVjgsIFNwaWRlck1vbmtleSwgSmF2YVNjcmlwdENvcmUsIENoYWtyYSB0aHJvdyBUeXBlRXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZsb2F0MTZiaXRzID0gc3VwZXIuc2xpY2UoLi4ub3B0cyk7XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1aW50MTYgPSBuZXcgVWludDE2QXJyYXkodGhpcy5idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdGhpcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGZsb2F0MTZiaXRzID0gdWludDE2LnNsaWNlKC4uLm9wdHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoZmxvYXQxNmJpdHMuYnVmZmVyKTtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc3ViYXJyYXkoLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgbGV0IGZsb2F0MTZiaXRzO1xuXG4gICAgICAgIC8vIFY4LCBTcGlkZXJNb25rZXksIEphdmFTY3JpcHRDb3JlLCBDaGFrcmEgdGhyb3cgVHlwZUVycm9yXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbG9hdDE2Yml0cyA9IHN1cGVyLnN1YmFycmF5KC4uLm9wdHMpO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVHlwZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdWludDE2ID0gbmV3IFVpbnQxNkFycmF5KHRoaXMuYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHRoaXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBmbG9hdDE2Yml0cyA9IHVpbnQxNi5zdWJhcnJheSguLi5vcHRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQxNkFycmF5KGZsb2F0MTZiaXRzLmJ1ZmZlciwgZmxvYXQxNmJpdHMuYnl0ZU9mZnNldCwgZmxvYXQxNmJpdHMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvLyBjb250YWlucyBtZXRob2RzXG4gICAgaW5kZXhPZihlbGVtZW50LCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICAgICAgICBsZXQgZnJvbSA9IFRvSW50ZWdlcihvcHRzWzBdKTtcblxuICAgICAgICBpZiAoZnJvbSA8IDApIHtcbiAgICAgICAgICAgIGZyb20gKz0gbGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGZyb20gPCAwKSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IobGV0IGkgPSBmcm9tLCBsID0gbGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoY29udmVydFRvTnVtYmVyKHRoaXNbaV0pID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgbGFzdEluZGV4T2YoZWxlbWVudCwgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG5cbiAgICAgICAgbGV0IGZyb20gPSBUb0ludGVnZXIob3B0c1swXSk7XG5cbiAgICAgICAgZnJvbSA9IGZyb20gPT09IDAgPyBsZW5ndGggOiBmcm9tICsgMTtcblxuICAgICAgICBpZiAoZnJvbSA+PSAwKSB7XG4gICAgICAgICAgICBmcm9tID0gZnJvbSA8IGxlbmd0aCA/IGZyb20gOiBsZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcm9tICs9IGxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IGZyb207IGktLTspIHtcbiAgICAgICAgICAgIGlmIChjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSkgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpbmNsdWRlcyhlbGVtZW50LCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICAgICAgICBsZXQgZnJvbSA9IFRvSW50ZWdlcihvcHRzWzBdKTtcblxuICAgICAgICBpZiAoZnJvbSA8IDApIHtcbiAgICAgICAgICAgIGZyb20gKz0gbGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGZyb20gPCAwKSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc05hTiA9IE51bWJlci5pc05hTihlbGVtZW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gZnJvbSwgbCA9IGxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSk7XG5cbiAgICAgICAgICAgIGlmIChpc05hTiAmJiBOdW1iZXIuaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHN0cmluZyBtZXRob2RzXG4gICAgam9pbiguLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBhcnJheSA9IGNvcHlUb0FycmF5KHRoaXMpO1xuXG4gICAgICAgIHJldHVybiBhcnJheS5qb2luKC4uLm9wdHMpO1xuICAgIH1cblxuICAgIHRvTG9jYWxlU3RyaW5nKC4uLm9wdHMpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIGNvbnN0IGFycmF5ID0gY29weVRvQXJyYXkodGhpcyk7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gYXJyYXkudG9Mb2NhbGVTdHJpbmcoLi4ub3B0cyk7XG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgaWYgKGlzRmxvYXQxNkFycmF5KHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJGbG9hdDE2QXJyYXlcIjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgRmxvYXQxNkFycmF5JHByb3RvdHlwZSA9IEZsb2F0MTZBcnJheS5wcm90b3R5cGU7XG5cbmNvbnN0IGRlZmF1bHRGbG9hdDE2QXJyYXlNZXRob2RzID0gbmV3IFdlYWtTZXQoKTtcbmZvcihjb25zdCBrZXkgb2YgUmVmbGVjdC5vd25LZXlzKEZsb2F0MTZBcnJheSRwcm90b3R5cGUpKSB7XG4gICAgY29uc3QgdmFsID0gRmxvYXQxNkFycmF5JHByb3RvdHlwZVtrZXldO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZGVmYXVsdEZsb2F0MTZBcnJheU1ldGhvZHMuYWRkKHZhbCk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBAcmV0dXJucyB7KHNlbGY6b2JqZWN0KSA9PiBvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcml2YXRlU3RvcmFnZSgpIHtcblx0Y29uc3Qgd20gPSBuZXcgV2Vha01hcCgpO1xuXHRyZXR1cm4gKHNlbGYpID0+IHtcblx0XHRsZXQgb2JqID0gd20uZ2V0KHNlbGYpO1xuXHRcdGlmIChvYmopIHtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdFx0XHR3bS5zZXQoc2VsZiwgb2JqKTtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXHR9O1xufVxuIiwiaW1wb3J0IHsgaXNEYXRhVmlldyB9IGZyb20gXCIuL2lzXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9OdW1iZXIsIHJvdW5kVG9GbG9hdDE2Qml0cyB9IGZyb20gXCIuL2xpYlwiO1xuXG4vKipcbiAqIHJldHVybnMgYW4gdW5zaWduZWQgMTYtYml0IGZsb2F0IGF0IHRoZSBzcGVjaWZpZWQgYnl0ZSBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIERhdGFWaWV3LlxuICogQHBhcmFtIHtEYXRhVmlld30gZGF0YVZpZXdcbiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0XG4gKiBAcGFyYW0ge1tib29sZWFuXX0gb3B0c1xuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZsb2F0MTYoZGF0YVZpZXcsIGJ5dGVPZmZzZXQsIC4uLm9wdHMpIHtcbiAgICBpZiAoIWlzRGF0YVZpZXcoZGF0YVZpZXcpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGaXJzdCBhcmd1bWVudCB0byBnZXRGbG9hdDE2IGZ1bmN0aW9uIG11c3QgYmUgYSBEYXRhVmlld1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVydFRvTnVtYmVyKCBkYXRhVmlldy5nZXRVaW50MTYoYnl0ZU9mZnNldCwgLi4ub3B0cykgKTtcbn1cblxuLyoqXG4gKiBzdG9yZXMgYW4gdW5zaWduZWQgMTYtYml0IGZsb2F0IHZhbHVlIGF0IHRoZSBzcGVjaWZpZWQgYnl0ZSBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIERhdGFWaWV3LlxuICogQHBhcmFtIHtEYXRhVmlld30gZGF0YVZpZXdcbiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0XG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7W2Jvb2xlYW5dfSBvcHRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRGbG9hdDE2KGRhdGFWaWV3LCBieXRlT2Zmc2V0LCB2YWx1ZSwgLi4ub3B0cykge1xuICAgIGlmICghaXNEYXRhVmlldyhkYXRhVmlldykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpcnN0IGFyZ3VtZW50IHRvIHNldEZsb2F0MTYgZnVuY3Rpb24gbXVzdCBiZSBhIERhdGFWaWV3XCIpO1xuICAgIH1cblxuICAgIGRhdGFWaWV3LnNldFVpbnQxNihieXRlT2Zmc2V0LCByb3VuZFRvRmxvYXQxNkJpdHModmFsdWUpLCAuLi5vcHRzKTtcbn1cbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgbm9kZVV0aWw7XG4iLCJpbXBvcnQgeyBzZXRGbG9hdDE2IH0gZnJvbSAnQHBldGFtb3Jpa2VuL2Zsb2F0MTYnO1xuaW1wb3J0IHtcblx0Z2V0RXh0ZW5zaW9uLFxuXHRFWFRfQ09MT1JfQlVGRkVSX0ZMT0FULFxuXHRPRVNfVEVYVFVSRV9GTE9BVCxcblx0T0VTX1RFWFRVUkVfRkxPQVRfTElORUFSLFxuXHRPRVNfVEVYVFVSRV9IQUxGX0ZMT0FULFxuXHRPRVNfVEVYVFVSRV9IQWxGX0ZMT0FUX0xJTkVBUixcblx0V0VCR0xfREVQVEhfVEVYVFVSRSxcbn0gZnJvbSAnLi9leHRlbnNpb25zJztcbmltcG9ydCB7IGlzV2ViR0wyIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCB0eXBlIERhdGFMYXllckFycmF5VHlwZSA9ICBGbG9hdDMyQXJyYXkgfCBVaW50OEFycmF5IHwgSW50OEFycmF5IHwgVWludDE2QXJyYXkgfCBJbnQxNkFycmF5IHwgVWludDMyQXJyYXkgfCBJbnQzMkFycmF5O1xuZXhwb3J0IHR5cGUgRGF0YUxheWVyVHlwZSA9ICdmbG9hdDMyJyB8ICdmbG9hdDE2JyB8ICd1aW50OCcgfCAnaW50OCcgfCAndWludDE2JyB8ICdpbnQxNicgfCAndWludDMyJyB8ICdpbnQzMic7XG5leHBvcnQgdHlwZSBEYXRhTGF5ZXJOdW1Db21wb25lbnRzID0gMSB8IDIgfCAzIHwgNDtcbmV4cG9ydCB0eXBlIERhdGFMYXllckZpbHRlclR5cGUgPSAnTElORUFSJyB8ICdORUFSRVNUJztcbmV4cG9ydCB0eXBlIERhdGFMYXllcldyYXBUeXBlID0gJ1JFUEVBVCcgfCAnQ0xBTVBfVE9fRURHRScgfCAnTUlSUk9SRURfUkVQRUFUJztcblxuZXhwb3J0IHR5cGUgRGF0YUxheWVyQnVmZmVyID0ge1xuXHR0ZXh0dXJlOiBXZWJHTFRleHR1cmUsXG5cdGZyYW1lYnVmZmVyPzogV2ViR0xGcmFtZWJ1ZmZlcixcbn1cblxudHlwZSBFcnJvckNhbGxiYWNrID0gKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIERhdGFMYXllciB7XG5cdHByaXZhdGUgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXHRwcml2YXRlIHJlYWRvbmx5IGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0O1xuXHRwcml2YXRlIHJlYWRvbmx5IGVycm9yQ2FsbGJhY2s6IEVycm9yQ2FsbGJhY2s7XG5cdHByaXZhdGUgYnVmZmVySW5kZXggPSAwO1xuXHRyZWFkb25seSBudW1CdWZmZXJzO1xuXHRwcml2YXRlIHJlYWRvbmx5IGJ1ZmZlcnM6IERhdGFMYXllckJ1ZmZlcltdID0gW107XG5cdHByaXZhdGUgbGVuZ3RoPzogbnVtYmVyOyAvLyBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgMUQgZGF0YSBsYXllcnMuXG5cdHByaXZhdGUgd2lkdGg6IG51bWJlcjtcblx0cHJpdmF0ZSBoZWlnaHQ6IG51bWJlcjtcblx0cHJpdmF0ZSByZWFkb25seSB0eXBlOiBEYXRhTGF5ZXJUeXBlO1xuXHRwcml2YXRlIHJlYWRvbmx5IG51bUNvbXBvbmVudHM6IERhdGFMYXllck51bUNvbXBvbmVudHM7XG5cdHByaXZhdGUgcmVhZG9ubHkgZ2xJbnRlcm5hbEZvcm1hdDogbnVtYmVyO1xuXHRwcml2YXRlIHJlYWRvbmx5IGdsRm9ybWF0OiBudW1iZXI7XG5cdHByaXZhdGUgcmVhZG9ubHkgZ2xUeXBlOiBudW1iZXI7XG5cdHByaXZhdGUgcmVhZG9ubHkgZ2xOdW1DaGFubmVsczogbnVtYmVyO1xuXHRwcml2YXRlIHJlYWRvbmx5IGZpbHRlcjogbnVtYmVyO1xuXHRwcml2YXRlIHJlYWRvbmx5IHdyYXBTOiBudW1iZXI7XG5cdHByaXZhdGUgcmVhZG9ubHkgd3JhcFQ6IG51bWJlcjtcblx0cHJpdmF0ZSByZWFkb25seSB3cml0YWJsZTogYm9vbGVhbjtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRuYW1lOiBzdHJpbmcsXG5cdFx0Z2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsXG5cdFx0b3B0aW9uczoge1xuXHRcdFx0ZGltZW5zaW9uczogbnVtYmVyIHwgW251bWJlciwgbnVtYmVyXSxcblx0XHRcdHR5cGU6IERhdGFMYXllclR5cGUsXG5cdFx0XHRudW1Db21wb25lbnRzOiBEYXRhTGF5ZXJOdW1Db21wb25lbnRzLFxuXHRcdFx0ZGF0YT86IERhdGFMYXllckFycmF5VHlwZSxcblx0XHRcdGZpbHRlcj86IERhdGFMYXllckZpbHRlclR5cGUsXG5cdFx0XHR3cmFwUz86IERhdGFMYXllcldyYXBUeXBlLFxuXHRcdFx0d3JhcFQ/OiBEYXRhTGF5ZXJXcmFwVHlwZSxcblx0XHR9LFxuXHRcdGVycm9yQ2FsbGJhY2s6IEVycm9yQ2FsbGJhY2ssXG5cdFx0d3JpdGFibGU6IGJvb2xlYW4sXG5cdFx0bnVtQnVmZmVyczogbnVtYmVyLFxuXHQpIHtcblx0XHQvLyBTYXZlIHBhcmFtcy5cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdHRoaXMuZ2wgPSBnbDtcblx0XHR0aGlzLmVycm9yQ2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrO1xuXHRcdGlmIChudW1CdWZmZXJzIDwgMCB8fCBudW1CdWZmZXJzICUgMSAhPT0gMCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG51bUJ1ZmZlcnM6ICR7bnVtQnVmZmVyc30gZm9yIERhdGFMYXllciAke3RoaXMubmFtZX0sIG11c3QgYmUgcG9zaXRpdmUgaW50ZWdlci5gKTtcblx0XHR9XG5cdFx0dGhpcy5udW1CdWZmZXJzID0gbnVtQnVmZmVycztcblx0XHQvLyBTYXZlIG9wdGlvbnMuXG5cdFx0aWYgKCFpc05hTihvcHRpb25zLmRpbWVuc2lvbnMgYXMgbnVtYmVyKSkge1xuXHRcdFx0aWYgKG9wdGlvbnMuZGltZW5zaW9ucyA8IDEpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGxlbmd0aCAke29wdGlvbnMuZGltZW5zaW9uc30gZm9yIERhdGFMYXllciAke25hbWV9LmApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5sZW5ndGggPSBvcHRpb25zLmRpbWVuc2lvbnMgYXMgbnVtYmVyO1xuXHRcdFx0Y29uc3QgW3dpZHRoLCBoZWlnaHRdID0gdGhpcy5jYWxjV2lkdGhIZWlnaHQob3B0aW9ucy5kaW1lbnNpb25zIGFzIG51bWJlcik7XG5cdFx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy53aWR0aCA9IChvcHRpb25zLmRpbWVuc2lvbnMgYXMgW251bWJlciwgbnVtYmVyXSlbMF07XG5cdFx0XHR0aGlzLmhlaWdodCA9IChvcHRpb25zLmRpbWVuc2lvbnMgYXMgW251bWJlciwgbnVtYmVyXSlbMV07XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMubnVtQ29tcG9uZW50cyA9IG9wdGlvbnMubnVtQ29tcG9uZW50cztcblx0XHR0aGlzLndyaXRhYmxlID0gd3JpdGFibGU7XG5cdFx0Ly8gQ2hlY2sgdGhhdCBnbCB3aWxsIHN1cHBvcnQgdGhlIGRhdGF0eXBlLlxuXHRcdHRoaXMudHlwZSA9IERhdGFMYXllci5jaGVja1R5cGUodGhpcy5nbCwgb3B0aW9ucy50eXBlLCB0aGlzLndyaXRhYmxlLCB0aGlzLmVycm9yQ2FsbGJhY2spO1xuXHRcdC8vIEdldCBjdXJyZW50IGZpbHRlciBzZXR0aW5nLlxuXHRcdC8vIElmIHdlIGFyZSBwcm9jZXNzaW5nIGEgMUQgYXJyYXksIGRlZmF1bHQgdG8gbmVhcmVzdCBmaWx0ZXJpbmcuXG5cdFx0Ly8gRWxzZSBkZWZhdWx0IHRvIGxpbmVhciBmaWx0ZXJpbmcuXG5cdFx0Y29uc3QgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXIgPyBvcHRpb25zLmZpbHRlciA6ICh0aGlzLmxlbmd0aCA/ICdORUFSRVNUJyA6ICdMSU5FQVInKTtcblx0XHR0aGlzLmZpbHRlciA9IGdsW0RhdGFMYXllci5jaGVja0ZpbHRlcih0aGlzLmdsLCBmaWx0ZXIsIHRoaXMudHlwZSwgdGhpcy5lcnJvckNhbGxiYWNrKV07XG5cdFx0dGhpcy53cmFwUyA9IGdsW0RhdGFMYXllci5jaGVja1dyYXAodGhpcy5nbCwgb3B0aW9ucy53cmFwUyA/IG9wdGlvbnMud3JhcFMgOiAnQ0xBTVBfVE9fRURHRScsIHRoaXMudHlwZSldO1xuXHRcdHRoaXMud3JhcFQgPSBnbFtEYXRhTGF5ZXIuY2hlY2tXcmFwKHRoaXMuZ2wsIG9wdGlvbnMud3JhcFQgPyBvcHRpb25zLndyYXBUIDogJ0NMQU1QX1RPX0VER0UnLCB0aGlzLnR5cGUpXTtcblxuXHRcdGNvbnN0IHtcblx0XHRcdGdsRm9ybWF0LFxuXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCxcblx0XHRcdGdsVHlwZSxcblx0XHRcdGdsTnVtQ2hhbm5lbHMsXG5cdFx0fSA9IERhdGFMYXllci5nZXRHTFRleHR1cmVQYXJhbWV0ZXJzKHRoaXMuZ2wsIHRoaXMubmFtZSwge1xuXHRcdFx0bnVtQ29tcG9uZW50czogdGhpcy5udW1Db21wb25lbnRzLFxuXHRcdFx0d3JpdGFibGU6IHRoaXMud3JpdGFibGUsXG5cdFx0XHR0eXBlOiB0aGlzLnR5cGUsXG5cdFx0fSwgdGhpcy5lcnJvckNhbGxiYWNrKTtcblx0XHR0aGlzLmdsSW50ZXJuYWxGb3JtYXQgPSBnbEludGVybmFsRm9ybWF0O1xuXHRcdHRoaXMuZ2xGb3JtYXQgPSBnbEZvcm1hdDtcblx0XHR0aGlzLmdsVHlwZSA9IGdsVHlwZTtcblx0XHR0aGlzLmdsTnVtQ2hhbm5lbHMgPSBnbE51bUNoYW5uZWxzO1xuXG5cdFx0dGhpcy5pbml0QnVmZmVycyhvcHRpb25zLmRhdGEpO1xuXHR9XG5cblx0cHJpdmF0ZSBjYWxjV2lkdGhIZWlnaHQobGVuZ3RoOiBudW1iZXIpIHtcblx0XHQvLyBDYWxjIHBvd2VyIG9mIHR3byB3aWR0aCBhbmQgaGVpZ2h0IGZvciBsZW5ndGguXG5cdFx0bGV0IGV4cCA9IDE7XG5cdFx0bGV0IHJlbWFpbmRlciA9IGxlbmd0aDtcblx0XHR3aGlsZSAocmVtYWluZGVyID4gMikge1xuXHRcdFx0ZXhwKys7XG5cdFx0XHRyZW1haW5kZXIgLz0gMjtcblx0XHR9XG5cdFx0cmV0dXJuIFtcblx0XHRcdE1hdGgucG93KDIsIE1hdGguZmxvb3IoZXhwIC8gMikgKyBleHAgJSAyKSxcblx0XHRcdE1hdGgucG93KDIsIE1hdGguZmxvb3IoZXhwLzIpKSxcblx0XHRdO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgY2hlY2tXcmFwKFxuXHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRcdHdyYXA6IERhdGFMYXllcldyYXBUeXBlLFxuXHRcdHR5cGU6IERhdGFMYXllclR5cGUsXG5cdCkge1xuXHRcdGlmIChpc1dlYkdMMihnbCkpIHtcblx0XHRcdHJldHVybiB3cmFwO1xuXHRcdH1cblx0XHRpZiAod3JhcCA9PT0gJ0NMQU1QX1RPX0VER0UnKSB7XG5cdFx0XHRyZXR1cm4gd3JhcDtcblx0XHR9XG5cdFx0aWYgKHR5cGUgPT09ICdmbG9hdDMyJyB8fCB0eXBlID09PSAnZmxvYXQxNicpIHtcblx0XHRcdC8vIFRPRE86IHdlIG1heSB3YW50IHRvIGhhbmRsZSB0aGlzIGluIHRoZSBmcmFnIHNoYWRlci5cblx0XHRcdC8vIFJFUEVBVCBhbmQgTUlSUk9SX1JFUEVBVCB3cmFwIG5vdCBzdXBwb3J0ZWQgZm9yIG5vbi1wb3dlciBvZiAyIGZsb2F0IHRleHR1cmVzIGluIHNhZmFyaS5cblx0XHRcdC8vIEkndmUgdGVzdGVkIHRoaXMgYW5kIGl0IHNlZW1zIHRoYXQgc29tZSBwb3dlciBvZiAyIHRleHR1cmVzIHdpbGwgd29yayAoNTEyIHggNTEyKSxcblx0XHRcdC8vIGJ1dCBub3Qgb3RoZXJzICgxMDI0eDEwMjQpLCBzbyBsZXQncyBqdXN0IGNoYW5nZSBhbGwgV2ViR0wgMS4wIHRvIENMQU1QLlxuXHRcdFx0Ly8gVE9ETzogdGVzdCBmb3IgdGhpcyBtb3JlIHRob3JvdWdobHkuXG5cdFx0XHQvLyBXaXRob3V0IHRoaXMsIHdlIGN1cnJlbnRseSBnZXQgYW4gZXJyb3IgYXQgZHJhd0FycmF5cygpOlxuICAgICAgICAgICAgLy8gV2ViR0w6IGRyYXdBcnJheXM6IHRleHR1cmUgYm91bmQgdG8gdGV4dHVyZSB1bml0IDAgaXMgbm90IHJlbmRlcmFibGUuXG4gICAgICAgICAgICAvLyBJdCBtYXliZSBub24tcG93ZXItb2YtMiBhbmQgaGF2ZSBpbmNvbXBhdGlibGUgdGV4dHVyZSBmaWx0ZXJpbmcgb3IgaXMgbm90XG4gICAgICAgICAgICAvLyAndGV4dHVyZSBjb21wbGV0ZScsIG9yIGl0IGlzIGEgZmxvYXQvaGFsZi1mbG9hdCB0eXBlIHdpdGggbGluZWFyIGZpbHRlcmluZyBhbmRcbiAgICAgICAgICAgIC8vIHdpdGhvdXQgdGhlIHJlbGV2YW50IGZsb2F0L2hhbGYtZmxvYXQgbGluZWFyIGV4dGVuc2lvbiBlbmFibGVkLlxuXHRcdFx0cmV0dXJuICdDTEFNUF9UT19FREdFJztcblx0XHR9XG5cdFx0cmV0dXJuIHdyYXA7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBjaGVja0ZpbHRlcihcblx0XHRnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcblx0XHRmaWx0ZXI6IERhdGFMYXllckZpbHRlclR5cGUsXG5cdFx0dHlwZTogRGF0YUxheWVyVHlwZSxcblx0XHRlcnJvckNhbGxiYWNrOiBFcnJvckNhbGxiYWNrLFxuXHQpIHtcblx0XHRpZiAoZmlsdGVyID09PSAnTkVBUkVTVCcpIHtcblx0XHRcdHJldHVybiBmaWx0ZXI7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGUgPT09ICdmbG9hdDE2Jykge1xuXHRcdFx0Ly8gVE9ETzogdGVzdCBpZiBmbG9hdCBsaW5lYXIgZXh0ZW5zaW9uIGlzIGFjdHVhbGx5IHdvcmtpbmcuXG5cdFx0XHRjb25zdCBleHRlbnNpb24gPSBnZXRFeHRlbnNpb24oZ2wsIE9FU19URVhUVVJFX0hBbEZfRkxPQVRfTElORUFSLCBlcnJvckNhbGxiYWNrLCB0cnVlKVxuXHRcdFx0XHR8fCBnZXRFeHRlbnNpb24oZ2wsIE9FU19URVhUVVJFX0ZMT0FUX0xJTkVBUiwgZXJyb3JDYWxsYmFjaywgdHJ1ZSk7XG5cdFx0XHRpZiAoIWV4dGVuc2lvbikge1xuXHRcdFx0XHQvL1RPRE86IGFkZCBhIGZhbGxiYWNrIHRoYXQgZG9lcyB0aGlzIGZpbHRlcmluZyBpbiB0aGUgZnJhZyBzaGFkZXI/LlxuXHRcdFx0XHRmaWx0ZXIgPSAnTkVBUkVTVCc7XG5cdFx0XHR9XG5cdFx0fSBpZiAodHlwZSA9PT0gJ2Zsb2F0MzInKSB7XG5cdFx0XHRjb25zdCBleHRlbnNpb24gPSBnZXRFeHRlbnNpb24oZ2wsIE9FU19URVhUVVJFX0ZMT0FUX0xJTkVBUiwgZXJyb3JDYWxsYmFjaywgdHJ1ZSk7XG5cdFx0XHRpZiAoIWV4dGVuc2lvbikge1xuXHRcdFx0XHQvL1RPRE86IGFkZCBhIGZhbGxiYWNrIHRoYXQgZG9lcyB0aGlzIGZpbHRlcmluZyBpbiB0aGUgZnJhZyBzaGFkZXI/LlxuXHRcdFx0XHRmaWx0ZXIgPSAnTkVBUkVTVCc7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpbHRlcjtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGNoZWNrVHlwZShcblx0XHRnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcblx0XHR0eXBlOiBEYXRhTGF5ZXJUeXBlLFxuXHRcdHdyaXRhYmxlOiBib29sZWFuLFxuXHRcdGVycm9yQ2FsbGJhY2s6IEVycm9yQ2FsbGJhY2ssXG5cdCkge1xuXHRcdC8vIENoZWNrIGlmIGZsb2F0MzIgc3VwcG9ydGVkLlxuXHRcdGlmICghaXNXZWJHTDIoZ2wpKSB7XG5cdFx0XHRpZiAodHlwZSA9PT0gJ2Zsb2F0MzInKSB7XG5cdFx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IGdldEV4dGVuc2lvbihnbCwgT0VTX1RFWFRVUkVfRkxPQVQsIGVycm9yQ2FsbGJhY2ssIHRydWUpO1xuXHRcdFx0XHRpZiAoIWV4dGVuc2lvbikge1xuXHRcdFx0XHRcdHR5cGUgPSAnZmxvYXQxNic7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTc0NzY2MzIvd2ViZ2wtZXh0ZW5zaW9uLXN1cHBvcnQtYWNyb3NzLWJyb3dzZXJzXG5cdFx0XHRcdC8vIFJlbmRlcmluZyB0byBhIGZsb2F0aW5nLXBvaW50IHRleHR1cmUgbWF5IG5vdCBiZSBzdXBwb3J0ZWQsXG5cdFx0XHRcdC8vIGV2ZW4gaWYgdGhlIE9FU190ZXh0dXJlX2Zsb2F0IGV4dGVuc2lvbiBpcyBzdXBwb3J0ZWQuXG5cdFx0XHRcdC8vIFR5cGljYWxseSwgdGhpcyBmYWlscyBvbiBjdXJyZW50IG1vYmlsZSBoYXJkd2FyZS5cblx0XHRcdFx0Ly8gVG8gY2hlY2sgaWYgdGhpcyBpcyBzdXBwb3J0ZWQsIHlvdSBoYXZlIHRvIGNhbGwgdGhlIFdlYkdMXG5cdFx0XHRcdC8vIGNoZWNrRnJhbWVidWZmZXJTdGF0dXMoKSBmdW5jdGlvbi5cblx0XHRcdFx0aWYgKHdyaXRhYmxlKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsaWQgPSBEYXRhTGF5ZXIudGVzdEZyYW1lYnVmZmVyV3JpdGUoZ2wsIHR5cGUpO1xuXHRcdFx0XHRcdGlmICghdmFsaWQpIHtcblx0XHRcdFx0XHRcdHR5cGUgPSAnZmxvYXQxNic7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBNdXN0IHN1cHBvcnQgYXQgbGVhc3QgaGFsZiBmbG9hdCBpZiB1c2luZyBhIGZsb2F0IHR5cGUuXG5cdFx0XHRpZiAodHlwZSA9PT0gJ2Zsb2F0MTYnKSB7XG5cdFx0XHRcdGdldEV4dGVuc2lvbihnbCwgT0VTX1RFWFRVUkVfSEFMRl9GTE9BVCwgZXJyb3JDYWxsYmFjayk7XG5cdFx0XHRcdC8vIFRPRE86IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0MjQ4NjMzL2Nhbm5vdC1jcmVhdGUtaGFsZi1mbG9hdC1vZXMtdGV4dHVyZS1mcm9tLXVpbnQxNmFycmF5LW9uLWlwYWRcblx0XHRcdFx0aWYgKHdyaXRhYmxlKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsaWQgPSBEYXRhTGF5ZXIudGVzdEZyYW1lYnVmZmVyV3JpdGUoZ2wsIHR5cGUpO1xuXHRcdFx0XHRcdGlmICghdmFsaWQpIHtcblx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soYFRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHJlbmRlcmluZyB0byBoYWxmLWZsb2F0IHRleHR1cmVzLmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHQvLyBMb2FkIGFkZGl0aW9uYWwgZXh0ZW5zaW9ucyBpZiBuZWVkZWQuXG5cdFx0aWYgKGlzV2ViR0wyKGdsKSAmJiAodHlwZSA9PT0gJ2Zsb2F0MTYnIHx8IHR5cGUgPT09ICdmbG9hdDMyJykpIHtcblx0XHRcdGdldEV4dGVuc2lvbihnbCwgRVhUX0NPTE9SX0JVRkZFUl9GTE9BVCwgZXJyb3JDYWxsYmFjayk7XG5cdFx0fVxuXHRcdHJldHVybiB0eXBlO1xuXHR9XG5cblx0cHJpdmF0ZSBjaGVja0RhdGFBcnJheShfZGF0YT86IERhdGFMYXllckFycmF5VHlwZSkge1xuXHRcdGlmICghX2RhdGEpe1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGxlbmd0aCwgbnVtQ29tcG9uZW50cywgZ2xOdW1DaGFubmVscywgdHlwZSwgbmFtZSB9ID0gdGhpcztcblxuXHRcdC8vIENoZWNrIHRoYXQgZGF0YSBpcyBjb3JyZWN0IGxlbmd0aC5cblx0XHQvLyBGaXJzdCBjaGVjayBmb3IgYSB1c2VyIGVycm9yLlxuXHRcdGlmICgobGVuZ3RoICYmIF9kYXRhLmxlbmd0aCAhPT0gbGVuZ3RoICogbnVtQ29tcG9uZW50cykgfHwgKCFsZW5ndGggJiYgX2RhdGEubGVuZ3RoICE9PSB3aWR0aCAqIGhlaWdodCAqIG51bUNvbXBvbmVudHMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGF0YSBsZW5ndGggJHtfZGF0YS5sZW5ndGh9IGZvciBEYXRhTGF5ZXIgJHtuYW1lfSBvZiBzaXplICR7bGVuZ3RoID8gbGVuZ3RoIDogYCR7d2lkdGh9eCR7aGVpZ2h0fWB9eCR7bnVtQ29tcG9uZW50c30uYCk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgdGhhdCBkYXRhIGlzIGNvcnJlY3QgdHlwZS5cblx0XHRsZXQgaW52YWxpZFR5cGVGb3VuZCA9IGZhbHNlO1xuXHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0Y2FzZSAnZmxvYXQzMic6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBGbG9hdDMyQXJyYXk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnZmxvYXQxNic6XG5cdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGlzIG5vIEZsb2F0MTZBcnJheSwgd2UgbXVzdCB1cyBVaW50MTZBcnJheSB0byBpbml0IHRleHR1cmUuXG5cdFx0XHRcdC8vIFdlIHdpbGwgYWxsb3cgRmxvYXQzMkFycmF5cyB0byBiZSBwYXNzZWQgaW4gYXMgd2VsbCBhbmQgZG8gdGhlIGNvbnZlcnNpb24gYXV0b21hdGljYWxseS5cblx0XHRcdFx0aW52YWxpZFR5cGVGb3VuZCA9IGludmFsaWRUeXBlRm91bmQgfHwgKF9kYXRhLmNvbnN0cnVjdG9yICE9PSBGbG9hdDMyQXJyYXkgJiYgX2RhdGEuY29uc3RydWN0b3IgIT09IFVpbnQxNkFycmF5KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICd1aW50OCc6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBVaW50OEFycmF5O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2ludDgnOlxuXHRcdFx0XHRpbnZhbGlkVHlwZUZvdW5kID0gaW52YWxpZFR5cGVGb3VuZCB8fCBfZGF0YS5jb25zdHJ1Y3RvciAhPT0gSW50OEFycmF5O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3VpbnQxNic6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBVaW50MTZBcnJheTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdpbnQxNic6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBJbnQxNkFycmF5O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3VpbnQzMic6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBVaW50MzJBcnJheTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdpbnQzMic6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBJbnQzMkFycmF5O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgRXJyb3IgaW5pdGluZyAke25hbWV9LiAgVW5zdXBwb3J0ZWQgdHlwZSAke3R5cGV9IGZvciBHTENvbXB1dGUuaW5pdERhdGFMYXllci5gKTtcblx0XHR9XG5cdFx0aWYgKGludmFsaWRUeXBlRm91bmQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBUeXBlZEFycmF5IG9mIHR5cGUgJHsoX2RhdGEuY29uc3RydWN0b3IgYXMgYW55KS5uYW1lfSBzdXBwbGllZCB0byBEYXRhTGF5ZXIgJHtuYW1lfSBvZiB0eXBlICR7dHlwZX0uYCk7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlbiBjaGVjayBpZiBhcnJheSBuZWVkcyB0byBiZSBsZW5ndGhlbmVkLlxuXHRcdC8vIFRoaXMgY291bGQgYmUgYmVjYXVzZSBnbE51bUNoYW5uZWxzICE9PSBudW1Db21wb25lbnRzLlxuXHRcdC8vIE9yIGJlY2F1c2UgbGVuZ3RoICE9PSB3aWR0aCAqIGhlaWdodC5cblx0XHRsZXQgZGF0YSA9IF9kYXRhO1xuXHRcdGNvbnN0IGltYWdlU2l6ZSA9IHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscztcblx0XHRpZiAoZGF0YS5sZW5ndGggPCBpbWFnZVNpemUpIHtcblx0XHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0XHRjYXNlICdmbG9hdDMyJzpcblx0XHRcdFx0XHRkYXRhID0gbmV3IEZsb2F0MzJBcnJheShpbWFnZVNpemUpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdmbG9hdDE2Jzpcblx0XHRcdFx0XHRkYXRhID0gbmV3IFVpbnQxNkFycmF5KGltYWdlU2l6ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3VpbnQ4Jzpcblx0XHRcdFx0XHRkYXRhID0gbmV3IFVpbnQ4QXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnaW50OCc6XG5cdFx0XHRcdFx0ZGF0YSA9IG5ldyBJbnQ4QXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAndWludDE2Jzpcblx0XHRcdFx0XHRkYXRhID0gbmV3IFVpbnQxNkFycmF5KGltYWdlU2l6ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2ludDE2Jzpcblx0XHRcdFx0XHRkYXRhID0gbmV3IEludDE2QXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAndWludDMyJzpcblx0XHRcdFx0XHRkYXRhID0gbmV3IFVpbnQzMkFycmF5KGltYWdlU2l6ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2ludDMyJzpcblx0XHRcdFx0XHRkYXRhID0gbmV3IEludDMyQXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBFcnJvciBpbml0aW5nICR7bmFtZX0uICBVbnN1cHBvcnRlZCB0eXBlICR7dHlwZX0gZm9yIEdMQ29tcHV0ZS5pbml0RGF0YUxheWVyLmApO1xuXHRcdFx0fVxuXHRcdFx0Ly8gRmlsbCBuZXcgZGF0YSBhcnJheSB3aXRoIG9sZCBkYXRhLlxuXHRcdFx0Ly8gV2UgaGF2ZSB0byBoYW5kbGUgdGhlIGNhc2Ugb2YgRmxvYXQxNiBzcGVjaWFsbHkuXG5cdFx0XHRjb25zdCBoYW5kbGVGbG9hdDE2ID0gdHlwZSA9PT0gJ2Zsb2F0MTYnICYmIF9kYXRhLmNvbnN0cnVjdG9yID09PSBGbG9hdDMyQXJyYXk7XG5cdFx0XHRjb25zdCB2aWV3ID0gaGFuZGxlRmxvYXQxNiA/IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlcikgOiBudWxsO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDAsIF9sZW4gPSBfZGF0YS5sZW5ndGggLyBudW1Db21wb25lbnRzOyBpIDwgX2xlbjsgaSsrKSB7XG5cdFx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgbnVtQ29tcG9uZW50czsgaisrKSB7XG5cdFx0XHRcdFx0aWYgKGhhbmRsZUZsb2F0MTYpIHtcblx0XHRcdFx0XHRcdHNldEZsb2F0MTYodmlldyEsIDIgKiAoaSAqIGdsTnVtQ2hhbm5lbHMgKyBqKSwgX2RhdGFbaSAqIG51bUNvbXBvbmVudHMgKyBqXSwgdHJ1ZSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGRhdGFbaSAqIGdsTnVtQ2hhbm5lbHMgKyBqXSA9IF9kYXRhW2kgKiBudW1Db21wb25lbnRzICsgal07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBnZXRHTFRleHR1cmVQYXJhbWV0ZXJzKFxuXHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRcdG5hbWU6IHN0cmluZyxcblx0XHRwYXJhbXM6IHtcblx0XHRcdG51bUNvbXBvbmVudHM6IERhdGFMYXllck51bUNvbXBvbmVudHMsXG5cdFx0XHR0eXBlOiBEYXRhTGF5ZXJUeXBlLFxuXHRcdFx0d3JpdGFibGU6IGJvb2xlYW4sXG5cdFx0fSxcblx0XHRlcnJvckNhbGxiYWNrOiBFcnJvckNhbGxiYWNrLFxuXHQpIHtcblx0XHQvLyBUT0RPOiB3ZSBtYXkgbm90IHdhbnQgdG8gc3VwcG9ydCBpbnQgYW5kIHVuc2lnbmVkIGludCB0ZXh0dXJlc1xuXHRcdC8vIGJlY2F1c2UgdGhleSByZXF1aXJlIG1vZGlmaWNhdGlvbnMgdG8gdGhlIHNoYWRlciBjb2RlOlxuXHRcdC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU1ODAzMDE3L2hvdy10by1zZWxlY3Qtd2ViZ2wtZ2xzbC1zYW1wbGVyLXR5cGUtZnJvbS10ZXh0dXJlLWZvcm1hdC1wcm9wZXJ0aWVzXG5cdFx0Y29uc3QgeyBudW1Db21wb25lbnRzLCB0eXBlLCB3cml0YWJsZSB9ID0gcGFyYW1zO1xuXHRcdC8vIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL3NwZWNzL2xhdGVzdC8yLjAvI1RFWFRVUkVfVFlQRVNfRk9STUFUU19GUk9NX0RPTV9FTEVNRU5UU19UQUJMRVxuXHRcdGxldCBnbFR5cGU6IG51bWJlciB8IHVuZGVmaW5lZCxcblx0XHRcdGdsRm9ybWF0OiBudW1iZXIgfCB1bmRlZmluZWQsXG5cdFx0XHRnbEludGVybmFsRm9ybWF0OiBudW1iZXIgfCB1bmRlZmluZWQsXG5cdFx0XHRnbE51bUNoYW5uZWxzOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cblx0XHRpZiAoaXNXZWJHTDIoZ2wpKSB7XG5cdFx0XHRnbE51bUNoYW5uZWxzID0gbnVtQ29tcG9uZW50cztcblx0XHRcdC8vIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdC9cblx0XHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvdGV4SW1hZ2UyRFxuXHRcdFx0Ly8gVGhlIHNpemVkIGludGVybmFsIGZvcm1hdCBSR0J4eHggYXJlIG5vdCBjb2xvci1yZW5kZXJhYmxlIGZvciBzb21lIHJlYXNvbi5cblx0XHRcdC8vIElmIG51bUNvbXBvbmVudHMgPT0gMyBmb3IgYSB3cml0YWJsZSB0ZXh0dXJlLCB1c2UgUkdCQSBpbnN0ZWFkLlxuXHRcdFx0aWYgKG51bUNvbXBvbmVudHMgPT09IDMgJiYgd3JpdGFibGUpIHtcblx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAodHlwZSA9PT0gJ2Zsb2F0MzInIHx8IHR5cGUgPT09ICdmbG9hdDE2JyB8fCB0eXBlID09PSAndWludDgnKSB7XG5cdFx0XHRcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJFRDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0Z2xGb3JtYXQgPSBnbC5SR0I7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IGdsLlJHQkE7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciAke25hbWV9LmApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SRURfSU5URUdFUjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHX0lOVEVHRVI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JfSU5URUdFUjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkFfSU5URUdFUjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyICR7bmFtZX0uYCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0XHRjYXNlICdmbG9hdDMyJzpcblx0XHRcdFx0XHRnbFR5cGUgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuRkxPQVQ7XG5cdFx0XHRcdFx0c3dpdGNoIChnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUjMyRjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkczMkY7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQjMyRjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQTMyRjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyICR7bmFtZX0uYCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdmbG9hdDE2Jzpcblx0XHRcdFx0XHRnbFR5cGUgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuSEFMRl9GTE9BVDtcblx0XHRcdFx0XHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SMTZGO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SRzE2Rjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCMTZGO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBMTZGO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZ2xOdW1DaGFubmVscyAke2dsTnVtQ2hhbm5lbHN9IGZvciBEYXRhTGF5ZXIgJHtuYW1lfS5gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3VpbnQ4Jzpcblx0XHRcdFx0XHRnbFR5cGUgPSBnbC5VTlNJR05FRF9CWVRFO1xuXHRcdFx0XHRcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlI4O1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SRzg7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2wuUkdCO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkE7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciAke25hbWV9LmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Ly8gVE9ETzogaG93IHRvIHN1cHBvcnQgaW50cz9cblx0XHRcdFx0Ly8gY2FzZSAnaW50OCc6XG5cdFx0XHRcdC8vIFx0Z2xUeXBlID0gZ2wuQllURTtcblx0XHRcdFx0Ly8gXHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0Ly8gXHRcdGNhc2UgMTpcblx0XHRcdFx0Ly8gXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SOEk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0Y2FzZSAyOlxuXHRcdFx0XHQvLyBcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHOEk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0Y2FzZSAzOlxuXHRcdFx0XHQvLyBcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQjhJO1xuXHRcdFx0XHQvLyBcdFx0XHRicmVhaztcblx0XHRcdFx0Ly8gXHRcdGNhc2UgNDpcblx0XHRcdFx0Ly8gXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBOEk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Ly8gXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciAke25hbWV9LmApO1xuXHRcdFx0XHQvLyBcdH1cblx0XHRcdFx0Ly8gXHRicmVhaztcblx0XHRcdFx0Ly8gY2FzZSAnaW50MTYnOlxuXHRcdFx0XHQvLyBcdGdsVHlwZSA9IGdsLlNIT1JUO1xuXHRcdFx0XHQvLyBcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHQvLyBcdFx0Y2FzZSAxOlxuXHRcdFx0XHQvLyBcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlIxNkk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0Y2FzZSAyOlxuXHRcdFx0XHQvLyBcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHMTZJO1xuXHRcdFx0XHQvLyBcdFx0XHRicmVhaztcblx0XHRcdFx0Ly8gXHRcdGNhc2UgMzpcblx0XHRcdFx0Ly8gXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0IxNkk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0Y2FzZSA0OlxuXHRcdFx0XHQvLyBcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkExNkk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Ly8gXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciAke25hbWV9LmApO1xuXHRcdFx0XHQvLyBcdH1cblx0XHRcdFx0Ly8gY2FzZSAndWludDE2Jzpcblx0XHRcdFx0Ly8gXHRnbFR5cGUgPSBnbC5VTlNJR05FRF9TSE9SVDtcblx0XHRcdFx0Ly8gXHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0Ly8gXHRcdGNhc2UgMTpcblx0XHRcdFx0Ly8gXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SMTZVSTtcblx0XHRcdFx0Ly8gXHRcdFx0YnJlYWs7XG5cdFx0XHRcdC8vIFx0XHRjYXNlIDI6XG5cdFx0XHRcdC8vIFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkcxNlVJO1xuXHRcdFx0XHQvLyBcdFx0XHRicmVhaztcblx0XHRcdFx0Ly8gXHRcdGNhc2UgMzpcblx0XHRcdFx0Ly8gXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0IxNlVJO1xuXHRcdFx0XHQvLyBcdFx0XHRicmVhaztcblx0XHRcdFx0Ly8gXHRcdGNhc2UgNDpcblx0XHRcdFx0Ly8gXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBMTZVSTtcblx0XHRcdFx0Ly8gXHRcdFx0YnJlYWs7XG5cdFx0XHRcdC8vIFx0XHRkZWZhdWx0OlxuXHRcdFx0XHQvLyBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyICR7bmFtZX0uYCk7XG5cdFx0XHRcdC8vIFx0fVxuXHRcdFx0XHQvLyBcdGJyZWFrO1xuXHRcdFx0XHQvLyBjYXNlICdpbnQzMic6XG5cdFx0XHRcdC8vIFx0Z2xUeXBlID0gZ2wuSU5UO1xuXHRcdFx0XHQvLyBcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHQvLyBcdFx0Y2FzZSAxOlxuXHRcdFx0XHQvLyBcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlIzMkk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0Y2FzZSAyOlxuXHRcdFx0XHQvLyBcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHMzJJO1xuXHRcdFx0XHQvLyBcdFx0XHRicmVhaztcblx0XHRcdFx0Ly8gXHRcdGNhc2UgMzpcblx0XHRcdFx0Ly8gXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0IzMkk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0Y2FzZSA0OlxuXHRcdFx0XHQvLyBcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkEzMkk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Ly8gXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciAke25hbWV9LmApO1xuXHRcdFx0XHQvLyBcdH1cblx0XHRcdFx0Ly8gXHRicmVhaztcblx0XHRcdFx0Ly8gY2FzZSAndWludDMyJzpcblx0XHRcdFx0Ly8gXHRnbFR5cGUgPSBnbC5VTlNJR05FRF9JTlQ7XG5cdFx0XHRcdC8vIFx0c3dpdGNoIChnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdC8vIFx0XHRjYXNlIDE6XG5cdFx0XHRcdC8vIFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUjMyVUk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0Y2FzZSAyOlxuXHRcdFx0XHQvLyBcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHMzJVSTtcblx0XHRcdFx0Ly8gXHRcdFx0YnJlYWs7XG5cdFx0XHRcdC8vIFx0XHRjYXNlIDM6XG5cdFx0XHRcdC8vIFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCMzJVSTtcblx0XHRcdFx0Ly8gXHRcdFx0YnJlYWs7XG5cdFx0XHRcdC8vIFx0XHRjYXNlIDQ6XG5cdFx0XHRcdC8vIFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQTMyVUk7XG5cdFx0XHRcdC8vIFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Ly8gXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciAke25hbWV9LmApO1xuXHRcdFx0XHQvLyBcdH1cblx0XHRcdFx0Ly8gXHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHR5cGUgJHt0eXBlfSBmb3IgRGF0YUxheWVyICR7bmFtZX0uYCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN3aXRjaCAobnVtQ29tcG9uZW50cykge1xuXHRcdFx0XHQvLyBUT0RPOiBmb3IgcmVhZCBvbmx5IHRleHR1cmVzIGluIFdlYkdMIDEuMCwgd2UgY291bGQgdXNlIGdsLkFMUEhBIGFuZCBnbC5MVU1JTkFOQ0VfQUxQSEEgaGVyZS5cblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRnbEZvcm1hdCA9IGdsLlJHQjtcblx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2wuUkdCO1xuXHRcdFx0XHRcdGdsTnVtQ2hhbm5lbHMgPSAzO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0Z2xGb3JtYXQgPSBnbC5SR0JBO1xuXHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBO1xuXHRcdFx0XHRcdGdsTnVtQ2hhbm5lbHMgPSA0O1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbnVtQ29tcG9uZW50cyAke251bUNvbXBvbmVudHN9IGZvciBEYXRhTGF5ZXIgJHtuYW1lfS5gKTtcblx0XHRcdH1cblx0XHRcdC8vIFRPRE86IGhvdyB0byBzdXBwb3J0IHNpZ25lZCBpbnRzLCBtYXliZSBjYXN0IGFzIGZsb2F0cyBpbnN0ZWFkP1xuXHRcdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ2Zsb2F0MzInOlxuXHRcdFx0XHRcdGdsVHlwZSA9IGdsLkZMT0FUO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdmbG9hdDE2Jzpcblx0XHRcdFx0XHRnbFR5cGUgPSBnZXRFeHRlbnNpb24oZ2wsIE9FU19URVhUVVJFX0hBTEZfRkxPQVQsIGVycm9yQ2FsbGJhY2spLkhBTEZfRkxPQVRfT0VTIGFzIG51bWJlcjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAndWludDgnOlxuXHRcdFx0XHRcdGdsVHlwZSA9IGdsLlVOU0lHTkVEX0JZVEU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdC8vIGNhc2UgJ2ludDgnOlxuXHRcdFx0XHQvLyBcdGdsVHlwZSA9IGdsLkJZVEU7XG5cdFx0XHRcdC8vIFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3VpbnQxNic6XG5cdFx0XHRcdFx0Z2V0RXh0ZW5zaW9uKGdsLCBXRUJHTF9ERVBUSF9URVhUVVJFLCBlcnJvckNhbGxiYWNrKTtcblx0XHRcdFx0XHRnbFR5cGUgPSBnbC5VTlNJR05FRF9TSE9SVDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Ly8gY2FzZSAnaW50MTYnOlxuXHRcdFx0XHQvLyBcdGdsVHlwZSA9IGdsLlNIT1JUO1xuXHRcdFx0XHQvLyBcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICd1aW50MzInOlxuXHRcdFx0XHRcdGdldEV4dGVuc2lvbihnbCwgV0VCR0xfREVQVEhfVEVYVFVSRSwgZXJyb3JDYWxsYmFjayk7XG5cdFx0XHRcdFx0Z2xUeXBlID0gZ2wuVU5TSUdORURfSU5UO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHQvLyBjYXNlICdpbnQzMic6XG5cdFx0XHRcdC8vIFx0Z2xUeXBlID0gZ2wuSU5UO1xuXHRcdFx0XHQvLyBcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdHlwZSAke3R5cGV9IGZvciBEYXRhTGF5ZXIgJHtuYW1lfS5gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3IgbWlzc2luZyBwYXJhbXMuXG5cdFx0aWYgKGdsVHlwZSA9PT0gdW5kZWZpbmVkIHx8IGdsRm9ybWF0ID09PSB1bmRlZmluZWQgfHwgZ2xJbnRlcm5hbEZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZTogJHt0eXBlfSBvciBudW1Db21wb25lbnRzICR7bnVtQ29tcG9uZW50c30uYCk7XG5cdFx0fVxuXHRcdGlmIChnbE51bUNoYW5uZWxzID09PSB1bmRlZmluZWQgfHwgbnVtQ29tcG9uZW50cyA8IDEgfHwgbnVtQ29tcG9uZW50cyA+IDQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBudW1DaGFubmVsczogJHtudW1Db21wb25lbnRzfS5gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Z2xGb3JtYXQsXG5cdFx0XHRnbEludGVybmFsRm9ybWF0LFxuXHRcdFx0Z2xUeXBlLFxuXHRcdFx0Z2xOdW1DaGFubmVscyxcblx0XHR9O1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgdGVzdEZyYW1lYnVmZmVyV3JpdGUoXG5cdFx0Z2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsIHR5cGU6IERhdGFMYXllclR5cGUsXG5cdFx0b3B0aW9uczoge1xuXHRcdFx0bnVtQ29tcG9uZW50cz86IERhdGFMYXllck51bUNvbXBvbmVudHMsXG5cdFx0XHR3cmFwUz86IERhdGFMYXllcldyYXBUeXBlLFxuXHRcdFx0d3JhcFQ/OiBEYXRhTGF5ZXJXcmFwVHlwZSxcblx0XHRcdGZpbHRlcj86IERhdGFMYXllckZpbHRlclR5cGUsXG5cdFx0XHR3aWR0aD86IG51bWJlclxuXHRcdFx0aGVpZ2h0PzogbnVtYmVyLFxuXHR9ID0ge30pIHtcblx0XHRjb25zdCB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXHRcdGlmICghdGV4dHVyZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcblxuXHRcdGNvbnN0IHdyYXBTID0gZ2xbb3B0aW9ucy53cmFwUyB8fCAnQ0xBTVBfVE9fRURHRSddO1xuXHRcdGNvbnN0IHdyYXBUID0gZ2xbb3B0aW9ucy53cmFwVCB8fCAnQ0xBTVBfVE9fRURHRSddO1xuXHRcdGNvbnN0IGZpbHRlciA9IGdsW29wdGlvbnMuZmlsdGVyIHx8ICdORUFSRVNUJ107XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgd3JhcFMpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIHdyYXBUKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZmlsdGVyKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZmlsdGVyKTtcblxuXHRcdGNvbnN0IHsgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSB9ID0gRGF0YUxheWVyLmdldEdMVGV4dHVyZVBhcmFtZXRlcnMoZ2wsICd0ZXN0Jywge1xuXHRcdFx0bnVtQ29tcG9uZW50czogb3B0aW9ucy5udW1Db21wb25lbnRzIHx8IDEsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0fSwgKCkgPT4ge30pO1xuXHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgb3B0aW9ucy53aWR0aCB8fCAxMDAsIG9wdGlvbnMuaGVpZ2h0IHx8IDEwMCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCk7XG5cblx0XHQvLyBJbml0IGEgZnJhbWVidWZmZXIgZm9yIHRoaXMgdGV4dHVyZSBzbyB3ZSBjYW4gd3JpdGUgdG8gaXQuXG5cdFx0Y29uc3QgZnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXHRcdGlmICghZnJhbWVidWZmZXIpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlcik7XG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC9mcmFtZWJ1ZmZlclRleHR1cmUyRFxuXHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSwgMCk7XG5cblx0XHRjb25zdCBzdGF0dXMgPSBnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKTtcblx0XHRyZXR1cm4gc3RhdHVzID09PSBnbC5GUkFNRUJVRkZFUl9DT01QTEVURTtcblx0fVxuXG5cdHByaXZhdGUgaW5pdEJ1ZmZlcnMoXG5cdFx0X2RhdGE/OiBEYXRhTGF5ZXJBcnJheVR5cGUsXG5cdCkge1xuXHRcdGNvbnN0IHsgXG5cdFx0XHRudW1CdWZmZXJzLFxuXHRcdFx0Z2wsXG5cdFx0XHR3aWR0aCxcblx0XHRcdGhlaWdodCxcblx0XHRcdGdsSW50ZXJuYWxGb3JtYXQsXG5cdFx0XHRnbEZvcm1hdCxcblx0XHRcdGdsVHlwZSxcblx0XHRcdGZpbHRlcixcblx0XHRcdHdyYXBTLFxuXHRcdFx0d3JhcFQsXG5cdFx0XHR3cml0YWJsZSxcblx0XHRcdGVycm9yQ2FsbGJhY2ssXG5cdFx0fSA9IHRoaXM7XG5cblx0XHRjb25zdCBkYXRhID0gdGhpcy5jaGVja0RhdGFBcnJheShfZGF0YSk7XG5cblx0XHQvLyBJbml0IGEgdGV4dHVyZSBmb3IgZWFjaCBidWZmZXIuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBudW1CdWZmZXJzOyBpKyspIHtcblx0XHRcdGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cdFx0XHRpZiAoIXRleHR1cmUpIHtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayhgQ291bGQgbm90IGluaXQgdGV4dHVyZSBmb3IgRGF0YUxheWVyICR7dGhpcy5uYW1lfTogJHtnbC5nZXRFcnJvcigpfS5gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG5cblx0XHRcdC8vIFRPRE86IGFyZSB0aGVyZSBvdGhlciBwYXJhbXMgdG8gbG9vayBpbnRvOlxuXHRcdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC90ZXhQYXJhbWV0ZXJcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIHdyYXBTKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIHdyYXBUKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBmaWx0ZXIpO1xuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGZpbHRlcik7XG5cblx0XHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgZGF0YSA/IGRhdGEgOiBudWxsKTtcblx0XHRcdFxuXHRcdFx0Y29uc3QgYnVmZmVyOiBEYXRhTGF5ZXJCdWZmZXIgPSB7XG5cdFx0XHRcdHRleHR1cmUsXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAod3JpdGFibGUpIHtcblx0XHRcdFx0Ly8gSW5pdCBhIGZyYW1lYnVmZmVyIGZvciB0aGlzIHRleHR1cmUgc28gd2UgY2FuIHdyaXRlIHRvIGl0LlxuXHRcdFx0XHRjb25zdCBmcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cdFx0XHRcdGlmICghZnJhbWVidWZmZXIpIHtcblx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKGBDb3VsZCBub3QgaW5pdCBmcmFtZWJ1ZmZlciBmb3IgRGF0YUxheWVyICR7dGhpcy5uYW1lfTogJHtnbC5nZXRFcnJvcigpfS5gKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlcik7XG5cdFx0XHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvZnJhbWVidWZmZXJUZXh0dXJlMkRcblx0XHRcdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlLCAwKTtcblxuXHRcdFx0XHRjb25zdCBzdGF0dXMgPSBnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKTtcblx0XHRcdFx0aWYoc3RhdHVzICE9IGdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFKXtcblx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKGBJbnZhbGlkIHN0YXR1cyBmb3IgZnJhbWVidWZmZXIgZm9yIERhdGFMYXllciAke3RoaXMubmFtZX06ICR7c3RhdHVzfS5gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBmcmFtZWJ1ZmZlci5cblx0XHRcdFx0YnVmZmVyLmZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXI7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFNhdmUgdGhpcyBidWZmZXIgdG8gdGhlIGxpc3QuXG5cdFx0XHR0aGlzLmJ1ZmZlcnMucHVzaChidWZmZXIpO1xuXHRcdH1cblx0XHQvLyBVbmJpbmQuXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblx0fVxuXG5cdGdldEN1cnJlbnRTdGF0ZVRleHR1cmUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYnVmZmVyc1t0aGlzLmJ1ZmZlckluZGV4XS50ZXh0dXJlO1xuXHR9XG5cblx0Z2V0UHJldmlvdXNTdGF0ZVRleHR1cmUoaW5kZXggPSAtMSkge1xuXHRcdGlmICh0aGlzLm51bUJ1ZmZlcnMgPT09IDEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNhbGwgZ2V0UHJldmlvdXNTdGF0ZVRleHR1cmUgb24gRGF0YUxheWVyICR7dGhpcy5uYW1lfSB3aXRoIG9ubHkgb25lIGJ1ZmZlci5gKTtcblx0XHR9XG5cdFx0Y29uc3QgcHJldmlvdXNJbmRleCA9IHRoaXMuYnVmZmVySW5kZXggKyBpbmRleCArIHRoaXMubnVtQnVmZmVycztcblx0XHRpZiAocHJldmlvdXNJbmRleCA8IDAgfHwgcHJldmlvdXNJbmRleCA+PSB0aGlzLm51bUJ1ZmZlcnMpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBpbmRleCAke2luZGV4fSBwYXNzZWQgdG8gZ2V0UHJldmlvdXNTdGF0ZVRleHR1cmUgb24gRGF0YUxheWVyICR7dGhpcy5uYW1lfSB3aXRoICR7dGhpcy5udW1CdWZmZXJzfSBidWZmZXJzLmApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5idWZmZXJzW3ByZXZpb3VzSW5kZXhdLnRleHR1cmU7XG5cdH1cblxuXHRiaW5kT3V0cHV0QnVmZmVyKFxuXHRcdGluY3JlbWVudEJ1ZmZlckluZGV4OiBib29sZWFuLFxuXHQpIHtcblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXHRcdGlmIChpbmNyZW1lbnRCdWZmZXJJbmRleCkge1xuXHRcdFx0Ly8gSW5jcmVtZW50IGJ1ZmZlckluZGV4LlxuXHRcdFx0dGhpcy5idWZmZXJJbmRleCA9ICh0aGlzLmJ1ZmZlckluZGV4ICsgMSkgJSB0aGlzLm51bUJ1ZmZlcnM7XG5cdFx0fVxuXHRcdGNvbnN0IHsgZnJhbWVidWZmZXIgfSA9IHRoaXMuYnVmZmVyc1t0aGlzLmJ1ZmZlckluZGV4XTtcblx0XHRpZiAoIWZyYW1lYnVmZmVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYERhdGFMYXllciAke3RoaXMubmFtZX0gaXMgbm90IHdyaXRhYmxlLmApO1xuXHRcdH1cblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyKTtcblx0fVxuXG5cdHJlc2l6ZShcblx0XHRkaW1lbnNpb25zOiBudW1iZXIgfCBbbnVtYmVyLCBudW1iZXJdLFxuXHRcdGRhdGE/OiBEYXRhTGF5ZXJBcnJheVR5cGUsXG5cdCkge1xuXHRcdGlmICghaXNOYU4oZGltZW5zaW9ucyBhcyBudW1iZXIpKSB7XG5cdFx0XHRpZiAoIXRoaXMubGVuZ3RoKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBkaW1lbnNpb25zICR7ZGltZW5zaW9uc30gZm9yIDJEIERhdGFMYXllciAke3RoaXMubmFtZX0sIHBsZWFzZSBzcGVjaWZ5IGEgd2lkdGggYW5kIGhlaWdodCBhcyBhbiBhcnJheS5gKVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5sZW5ndGggPSBkaW1lbnNpb25zIGFzIG51bWJlcjtcblx0XHRcdGNvbnN0IFsgd2lkdGgsIGhlaWdodCBdID0gdGhpcy5jYWxjV2lkdGhIZWlnaHQodGhpcy5sZW5ndGgpO1xuXHRcdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0aGlzLmxlbmd0aCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGltZW5zaW9ucyAke2RpbWVuc2lvbnN9IGZvciAxRCBEYXRhTGF5ZXIgJHt0aGlzLm5hbWV9LCBwbGVhc2Ugc3BlY2lmeSBhIGxlbmd0aCBhcyBhIG51bWJlci5gKVxuXHRcdFx0fVxuXHRcdFx0dGhpcy53aWR0aCA9IChkaW1lbnNpb25zIGFzIFtudW1iZXIsIG51bWJlcl0pWzBdO1xuXHRcdFx0dGhpcy5oZWlnaHQgPSAoZGltZW5zaW9ucyBhcyBbbnVtYmVyLCBudW1iZXJdKVsxXTtcblx0XHR9XG5cdFx0dGhpcy5kZXN0cm95QnVmZmVycygpO1xuXHRcdHRoaXMuaW5pdEJ1ZmZlcnMoZGF0YSk7XG5cdH1cblxuXHRjbGVhcigpIHtcblx0XHQvLyBSZXNldCBldmVyeXRoaW5nIHRvIHplcm8uXG5cdFx0Ly8gVGhpcyBpcyBub3QgdGhlIG1vc3QgZWZmaWNpZW50IHdheSB0byBkbyB0aGlzIChyZWFsbG9jYXRpbmcgYWxsIHRleHR1cmVzIGFuZCBmcmFtZWJ1ZmZlcnMpLlxuXHRcdC8vIGJ1dCBvayBmb3Igbm93LlxuXHRcdHRoaXMuZGVzdHJveUJ1ZmZlcnMoKTtcblx0XHR0aGlzLmluaXRCdWZmZXJzKCk7XG5cdH1cblxuXHRnZXREaW1lbnNpb25zKCkge1xuXHRcdHJldHVybiBbXG5cdFx0XHR0aGlzLndpZHRoLFxuXHRcdFx0dGhpcy5oZWlnaHQsXG5cdFx0XSBhcyBbbnVtYmVyLCBudW1iZXJdO1xuXHR9XG5cblx0Z2V0TGVuZ3RoKCkge1xuXHRcdGlmICghdGhpcy5sZW5ndGgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNhbGwgZ2V0TGVuZ3RoKCkgb24gMkQgRGF0YUxheWVyICR7dGhpcy5uYW1lfS5gKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMubGVuZ3RoO1xuXHR9XG5cblx0Z2V0TnVtQ29tcG9uZW50KCkge1xuXHRcdHJldHVybiB0aGlzLm51bUNvbXBvbmVudHM7XG5cdH1cblxuXHRnZXRUeXBlKCkge1xuXHRcdHJldHVybiB0aGlzLnR5cGU7XG5cdH1cblxuXHRwcml2YXRlIGRlc3Ryb3lCdWZmZXJzKCkge1xuXHRcdGNvbnN0IHsgZ2wsIGJ1ZmZlcnMgfSA9IHRoaXM7XG5cdFx0YnVmZmVycy5mb3JFYWNoKGJ1ZmZlciA9PiB7XG5cdFx0XHRjb25zdCB7IGZyYW1lYnVmZmVyLCB0ZXh0dXJlIH0gPSBidWZmZXI7XG5cdFx0XHRnbC5kZWxldGVUZXh0dXJlKHRleHR1cmUpO1xuXHRcdFx0aWYgKGZyYW1lYnVmZmVyKSB7XG5cdFx0XHRcdGdsLmRlbGV0ZUZyYW1lYnVmZmVyKGZyYW1lYnVmZmVyKTtcblx0XHRcdH1cblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGRlbGV0ZSBidWZmZXIudGV4dHVyZTtcblx0XHRcdGRlbGV0ZSBidWZmZXIuZnJhbWVidWZmZXI7XG5cdFx0fSk7XG5cdFx0YnVmZmVycy5sZW5ndGggPSAwO1xuXHR9XG5cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzLmRlc3Ryb3lCdWZmZXJzKCk7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRlbGV0ZSB0aGlzLmdsO1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRkZWxldGUgdGhpcy5lcnJvckNhbGxiYWNrO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBEYXRhTGF5ZXIsIERhdGFMYXllckFycmF5VHlwZSwgRGF0YUxheWVyRmlsdGVyVHlwZSwgRGF0YUxheWVyTnVtQ29tcG9uZW50cywgRGF0YUxheWVyVHlwZSwgRGF0YUxheWVyV3JhcFR5cGUgfSBmcm9tICcuL0RhdGFMYXllcic7XG5pbXBvcnQgeyBHUFVQcm9ncmFtLCBVbmlmb3JtVmFsdWVUeXBlLCBVbmlmb3JtRGF0YVR5cGUgfSBmcm9tICcuL0dQVVByb2dyYW0nO1xuaW1wb3J0IHsgY29tcGlsZVNoYWRlciwgaXNXZWJHTDIsIGlzUG93ZXJPZjIgfSBmcm9tICcuL3V0aWxzJztcbmNvbnN0IGRlZmF1bHRWZXJ0ZXhTaGFkZXJTb3VyY2UgPSByZXF1aXJlKCcuL2tlcm5lbHMvRGVmYXVsdFZlcnRleFNoYWRlci5nbHNsJyk7XG5jb25zdCBwYXNzVGhyb3VnaEZyYWdtZW50U2hhZGVyU291cmNlID0gcmVxdWlyZSgnLi9rZXJuZWxzL1Bhc3NUaHJvdWdoRnJhZ21lbnRTaGFkZXIuZ2xzbCcpO1xuY29uc3QgcGFja0Zsb2F0MzJUb1JHQkE4U2hhZGVyU291cmNlID0gcmVxdWlyZSgnLi9rZXJuZWxzL3BhY2tGbG9hdDMyVG9SR0JBOEZyYWdtZW50U2hhZGVyLmdsc2wnKTtcblxuY29uc3QgZnNRdWFkUG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShbIC0xLCAtMSwgMSwgLTEsIC0xLCAxLCAxLCAxIF0pO1xuY29uc3QgYm91bmRhcnlQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KFsgLTEsIC0xLCAxLCAtMSwgMSwgMSwgLTEsIDEsIC0xLCAtMSBdKTtcbmNvbnN0IHVuaXRDaXJjbGVQb2ludHMgPSBbMCwgMF07XG5jb25zdCBOVU1fU0VHTUVOVFNfQ0lSQ0xFID0gMjA7XG5mb3IgKGxldCBpID0gMDsgaSA8PSBOVU1fU0VHTUVOVFNfQ0lSQ0xFOyBpKyspIHtcblx0dW5pdENpcmNsZVBvaW50cy5wdXNoKFxuXHRcdE1hdGguY29zKDIgKiBNYXRoLlBJICogaSAvIE5VTV9TRUdNRU5UU19DSVJDTEUpLFxuXHRcdE1hdGguc2luKDIgKiBNYXRoLlBJICogaSAvIE5VTV9TRUdNRU5UU19DSVJDTEUpLFxuXHQpO1xufVxuY29uc3QgY2lyY2xlUG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSh1bml0Q2lyY2xlUG9pbnRzKTtcblxuZXhwb3J0IGNsYXNzIEdMQ29tcHV0ZSB7XG5cdHByaXZhdGUgcmVhZG9ubHkgZ2whOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0O1xuXHQvLyBUaGVzZSB3aWR0aCBhbmQgaGVpZ2h0IGFyZSB0aGUgY3VycmVudCBjYW52YXMgYXQgZnVsbCByZXMuXG5cdHByaXZhdGUgd2lkdGghOiBudW1iZXI7XG5cdHByaXZhdGUgaGVpZ2h0ITogbnVtYmVyO1xuXG5cdHByaXZhdGUgZXJyb3JTdGF0ZSA9IGZhbHNlO1xuXHRwcml2YXRlIHJlYWRvbmx5IGVycm9yQ2FsbGJhY2s6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQ7XG5cdFxuXHQvLyBTb21lIHByZWNvbXB1dGVkIHZhbHVlcy5cblx0cHJpdmF0ZSByZWFkb25seSBkZWZhdWx0VmVydGV4U2hhZGVyITogV2ViR0xTaGFkZXI7XG5cdHByaXZhdGUgcmVhZG9ubHkgcXVhZFBvc2l0aW9uc0J1ZmZlciE6IFdlYkdMQnVmZmVyO1xuXHRwcml2YXRlIHJlYWRvbmx5IGJvdW5kYXJ5UG9zaXRpb25zQnVmZmVyITogV2ViR0xCdWZmZXI7XG5cdHByaXZhdGUgcmVhZG9ubHkgY2lyY2xlUG9zaXRpb25zQnVmZmVyITogV2ViR0xCdWZmZXI7XG5cdHByaXZhdGUgcG9pbnRJbmRleEFycmF5PzogRmxvYXQzMkFycmF5O1xuXHRwcml2YXRlIHBvaW50SW5kZXhCdWZmZXI/OiBXZWJHTEJ1ZmZlcjtcblx0cHJpdmF0ZSByZWFkb25seSBwYXNzVGhyb3VnaFByb2dyYW0hOiBHUFVQcm9ncmFtO1xuXHRwcml2YXRlIHBhY2tGbG9hdDMyVG9SR0JBOFByb2dyYW0/OiBHUFVQcm9ncmFtO1xuXHRwcml2YXRlIHBhY2tUb1JHQkE4T3V0cHV0QnVmZmVyPzogRGF0YUxheWVyO1xuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0IHwgbnVsbCxcblx0XHRjYW52YXNFbDogSFRNTENhbnZhc0VsZW1lbnQsXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdGFudGlhbGlhcz86IGJvb2xlYW4sXG5cdFx0fSxcblx0XHQvLyBPcHRpb25hbGx5IHBhc3MgaW4gYW4gZXJyb3IgY2FsbGJhY2sgaW4gY2FzZSB3ZSB3YW50IHRvIGhhbmRsZSBlcnJvcnMgcmVsYXRlZCB0byB3ZWJnbCBzdXBwb3J0LlxuXHRcdC8vIGUuZy4gdGhyb3cgdXAgYSBtb2RhbCB0ZWxsaW5nIHVzZXIgdGhpcyB3aWxsIG5vdCB3b3JrIG9uIHRoZWlyIGRldmljZS5cblx0XHRlcnJvckNhbGxiYWNrOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkID0gKG1lc3NhZ2U6IHN0cmluZykgPT4geyB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSkgfSwgXG5cdCkge1xuXHRcdC8vIFNhdmUgY2FsbGJhY2sgaW4gY2FzZSB3ZSBydW4gaW50byBhbiBlcnJvci5cblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHR0aGlzLmVycm9yQ2FsbGJhY2sgPSAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG5cdFx0XHRpZiAoc2VsZi5lcnJvclN0YXRlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHNlbGYuZXJyb3JTdGF0ZSA9IHRydWU7XG5cdFx0XHRpZiAoZXJyb3JDYWxsYmFjaykgZXJyb3JDYWxsYmFjayhtZXNzYWdlKTtcblx0XHR9XG5cblx0XHQvLyBJbml0IEdMLlxuXHRcdGlmICghZ2wpIHtcblx0XHRcdC8vIEluaXQgYSBnbCBjb250ZXh0IGlmIG5vdCBwYXNzZWQgaW4uXG5cdFx0XHRnbCA9IGNhbnZhc0VsLmdldENvbnRleHQoJ3dlYmdsMicsIG9wdGlvbnMpICBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0IHwgbnVsbFxuXHRcdFx0XHR8fCBjYW52YXNFbC5nZXRDb250ZXh0KCd3ZWJnbCcsIG9wdGlvbnMpICBhcyBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBudWxsXG5cdFx0XHRcdHx8IGNhbnZhc0VsLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIG9wdGlvbnMpICBhcyBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBudWxsO1xuXHRcdFx0aWYgKGdsID09PSBudWxsKSB7XG5cdFx0XHR0aGlzLmVycm9yQ2FsbGJhY2soJ1VuYWJsZSB0byBpbml0aWFsaXplIFdlYkdMIGNvbnRleHQuJyk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGlzV2ViR0wyKGdsKSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ1VzaW5nIFdlYkdMIDIuMCBjb250ZXh0LicpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZygnVXNpbmcgV2ViR0wgMS4wIGNvbnRleHQuJyk7XG5cdFx0fVxuXHRcdHRoaXMuZ2wgPSBnbDtcblxuXHRcdC8vIEdMIHNldHVwLlxuXHRcdC8vIERpc2FibGUgZGVwdGggdGVzdGluZyBnbG9iYWxseS5cblx0XHRnbC5kaXNhYmxlKGdsLkRFUFRIX1RFU1QpO1xuXHRcdC8vIFNldCB1bnBhY2sgYWxpZ25tZW50IHRvIDEgc28gd2UgY2FuIGhhdmUgdGV4dHVyZXMgb2YgYXJiaXRyYXJ5IGRpbWVuc2lvbnMuXG5cdFx0Ly8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTE1ODIyODIvZXJyb3Itd2hlbi1jcmVhdGluZy10ZXh0dXJlcy1pbi13ZWJnbC13aXRoLXRoZS1yZ2ItZm9ybWF0XG5cdFx0Z2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0FMSUdOTUVOVCwgMSk7XG5cdFx0Ly8gVE9ETzogbG9vayBpbnRvIG1vcmUgb2YgdGhlc2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvcGl4ZWxTdG9yZWlcblx0XHQvLyAvLyBTb21lIGltcGxlbWVudGF0aW9ucyBvZiBIVE1MQ2FudmFzRWxlbWVudCdzIG9yIE9mZnNjcmVlbkNhbnZhcydzIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCBzdG9yZSBjb2xvciB2YWx1ZXNcblx0XHQvLyAvLyBpbnRlcm5hbGx5IGluIHByZW11bHRpcGxpZWQgZm9ybS4gSWYgc3VjaCBhIGNhbnZhcyBpcyB1cGxvYWRlZCB0byBhIFdlYkdMIHRleHR1cmUgd2l0aCB0aGVcblx0XHQvLyAvLyBVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wgcGl4ZWwgc3RvcmFnZSBwYXJhbWV0ZXIgc2V0IHRvIGZhbHNlLCB0aGUgY29sb3IgY2hhbm5lbHMgd2lsbCBoYXZlIHRvIGJlIHVuLW11bHRpcGxpZWRcblx0XHQvLyAvLyBieSB0aGUgYWxwaGEgY2hhbm5lbCwgd2hpY2ggaXMgYSBsb3NzeSBvcGVyYXRpb24uIFRoZSBXZWJHTCBpbXBsZW1lbnRhdGlvbiB0aGVyZWZvcmUgY2FuIG5vdCBndWFyYW50ZWUgdGhhdCBjb2xvcnNcblx0XHQvLyAvLyB3aXRoIGFscGhhIDwgMS4wIHdpbGwgYmUgcHJlc2VydmVkIGxvc3NsZXNzbHkgd2hlbiBmaXJzdCBkcmF3biB0byBhIGNhbnZhcyB2aWEgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIGFuZCB0aGVuXG5cdFx0Ly8gLy8gdXBsb2FkZWQgdG8gYSBXZWJHTCB0ZXh0dXJlIHdoZW4gdGhlIFVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCBwaXhlbCBzdG9yYWdlIHBhcmFtZXRlciBpcyBzZXQgdG8gZmFsc2UuXG5cdFx0Ly8gZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0cnVlKTtcblxuXHRcdC8vIEluaXQgYSBkZWZhdWx0IHZlcnRleCBzaGFkZXIgdGhhdCBqdXN0IHBhc3NlcyB0aHJvdWdoIHNjcmVlbiBjb29yZHMuXG5cdFx0Y29uc3QgZGVmYXVsdFZlcnRleFNoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIHRoaXMuZXJyb3JDYWxsYmFjaywgZGVmYXVsdFZlcnRleFNoYWRlclNvdXJjZSwgZ2wuVkVSVEVYX1NIQURFUik7XG5cdFx0aWYgKCFkZWZhdWx0VmVydGV4U2hhZGVyKSB7XG5cdFx0XHR0aGlzLmVycm9yQ2FsbGJhY2soJ1VuYWJsZSB0byBpbml0aWFsaXplIGZ1bGxzY3JlZW4gcXVhZCB2ZXJ0ZXggc2hhZGVyLicpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLmRlZmF1bHRWZXJ0ZXhTaGFkZXIgPSBkZWZhdWx0VmVydGV4U2hhZGVyO1xuXG5cdFx0Ly8gSW5pdCBhIHByb2dyYW0gdG8gcGFzcyB2YWx1ZXMgZnJvbSBvbmUgdGV4dHVyZSB0byBhbm90aGVyLlxuXHRcdHRoaXMucGFzc1Rocm91Z2hQcm9ncmFtID0gdGhpcy5pbml0UHJvZ3JhbShcblx0XHRcdCdwYXNzVGhyb3VnaCcsXG5cdFx0XHRwYXNzVGhyb3VnaEZyYWdtZW50U2hhZGVyU291cmNlLFxuXHRcdFx0W1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3Vfc3RhdGUnLFxuXHRcdFx0XHRcdHZhbHVlOiAwLFxuXHRcdFx0XHRcdGRhdGFUeXBlOiAnSU5UJyxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0KTtcblxuXHRcdC8vIENyZWF0ZSB2ZXJ0ZXggYnVmZmVycy5cblx0XHR0aGlzLnF1YWRQb3NpdGlvbnNCdWZmZXIgPSB0aGlzLmluaXRWZXJ0ZXhCdWZmZXIoZnNRdWFkUG9zaXRpb25zKSE7XG5cdFx0dGhpcy5ib3VuZGFyeVBvc2l0aW9uc0J1ZmZlciA9IHRoaXMuaW5pdFZlcnRleEJ1ZmZlcihib3VuZGFyeVBvc2l0aW9ucykhO1xuXHRcdHRoaXMuY2lyY2xlUG9zaXRpb25zQnVmZmVyID0gdGhpcy5pbml0VmVydGV4QnVmZmVyKGNpcmNsZVBvc2l0aW9ucykhO1xuXHRcdC8vIFVuYmluZCBhY3RpdmUgYnVmZmVyLlxuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcblxuXHRcdC8vIENhbnZhcyBzZXR1cC5cblx0XHR0aGlzLm9uUmVzaXplKGNhbnZhc0VsKTtcblxuXHRcdC8vIExvZyBudW1iZXIgb2YgdGV4dHVyZXMgYXZhaWxhYmxlLlxuXHRcdGNvbnN0IG1heFRleHR1cmVzSW5GcmFnbWVudFNoYWRlciA9IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpO1xuXHRcdGNvbnNvbGUubG9nKGAke21heFRleHR1cmVzSW5GcmFnbWVudFNoYWRlcn0gdGV4dHVyZXMgbWF4LmApO1xuXHR9XG5cblx0cHJpdmF0ZSBpbml0VmVydGV4QnVmZmVyKFxuXHRcdGRhdGE6IEZsb2F0MzJBcnJheSxcblx0KSB7XG5cdFx0Y29uc3QgeyBlcnJvckNhbGxiYWNrLCBnbCB9ID0gdGhpcztcblx0XHRjb25zdCBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblx0XHRpZiAoIWJ1ZmZlcikge1xuXHRcdFx0ZXJyb3JDYWxsYmFjaygnVW5hYmxlIHRvIGFsbG9jYXRlIGdsIGJ1ZmZlci4nKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcik7XG5cdFx0Ly8gQWRkIGJ1ZmZlciBkYXRhLlxuXHRcdGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBkYXRhLCBnbC5TVEFUSUNfRFJBVyk7XG5cdFx0cmV0dXJuIGJ1ZmZlcjtcblx0fVxuXG5cdGluaXRQcm9ncmFtKFxuXHRcdG5hbWU6IHN0cmluZyxcblx0XHRmcmFnbWVudFNoYWRlck9yU291cmNlOiBzdHJpbmcgfCBXZWJHTFNoYWRlcixcblx0XHR1bmlmb3Jtcz86IHtcblx0XHRcdG5hbWU6IHN0cmluZyxcblx0XHRcdHZhbHVlOiBVbmlmb3JtVmFsdWVUeXBlLFxuXHRcdFx0ZGF0YVR5cGU6IFVuaWZvcm1EYXRhVHlwZSxcblx0XHR9W10sXG5cdFx0ZGVmaW5lcz86IHtcblx0XHRcdFtrZXkgOiBzdHJpbmddOiBzdHJpbmcsXG5cdFx0fSxcblx0XHR2ZXJ0ZXhTaGFkZXJPclNvdXJjZT86IHN0cmluZyB8IFdlYkdMU2hhZGVyLFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvckNhbGxiYWNrIH0gPSB0aGlzO1x0XG5cdFx0cmV0dXJuIG5ldyBHUFVQcm9ncmFtKFxuXHRcdFx0bmFtZSxcblx0XHRcdGdsLFxuXHRcdFx0ZXJyb3JDYWxsYmFjayxcblx0XHRcdHZlcnRleFNoYWRlck9yU291cmNlID8gdmVydGV4U2hhZGVyT3JTb3VyY2UgOiB0aGlzLmRlZmF1bHRWZXJ0ZXhTaGFkZXIsXG5cdFx0XHRmcmFnbWVudFNoYWRlck9yU291cmNlLFxuXHRcdFx0dW5pZm9ybXMsXG5cdFx0XHRkZWZpbmVzLFxuXHRcdCk7XG5cdH07XG5cblx0aW5pdERhdGFMYXllcihcblx0XHRuYW1lOiBzdHJpbmcsXG5cdFx0b3B0aW9uczp7XG5cdFx0XHRkaW1lbnNpb25zOiBudW1iZXIgfCBbbnVtYmVyLCBudW1iZXJdLFxuXHRcdFx0dHlwZTogRGF0YUxheWVyVHlwZSxcblx0XHRcdG51bUNvbXBvbmVudHM6IERhdGFMYXllck51bUNvbXBvbmVudHMsXG5cdFx0XHRkYXRhPzogRGF0YUxheWVyQXJyYXlUeXBlLFxuXHRcdFx0ZmlsdGVyPzogRGF0YUxheWVyRmlsdGVyVHlwZSxcblx0XHRcdHdyYXBTPzogRGF0YUxheWVyV3JhcFR5cGUsXG5cdFx0XHR3cmFwVD86IERhdGFMYXllcldyYXBUeXBlLFxuXHRcdH0sXG5cdFx0d3JpdGFibGUgPSBmYWxzZSxcblx0XHRudW1CdWZmZXJzID0gMSxcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JDYWxsYmFjayB9ID0gdGhpcztcblx0XHRyZXR1cm4gbmV3IERhdGFMYXllcihuYW1lLCBnbCwgb3B0aW9ucywgZXJyb3JDYWxsYmFjaywgd3JpdGFibGUsIG51bUJ1ZmZlcnMpO1xuXHR9O1xuXG5cdGluaXRUZXh0dXJlKFxuXHRcdHVybDogc3RyaW5nLFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvckNhbGxiYWNrIH0gPSB0aGlzO1xuXHRcdGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cdFx0aWYgKHRleHR1cmUgPT09IG51bGwpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGluaXQgdGV4dHVyZS4nKTtcblx0XHR9XG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG5cdFx0Ly8gQmVjYXVzZSBpbWFnZXMgaGF2ZSB0byBiZSBkb3dubG9hZGVkIG92ZXIgdGhlIGludGVybmV0XG5cdFx0Ly8gdGhleSBtaWdodCB0YWtlIGEgbW9tZW50IHVudGlsIHRoZXkgYXJlIHJlYWR5LlxuXHRcdC8vIFVudGlsIHRoZW4gcHV0IGEgc2luZ2xlIHBpeGVsIGluIHRoZSB0ZXh0dXJlIHNvIHdlIGNhblxuXHRcdC8vIHVzZSBpdCBpbW1lZGlhdGVseS4gV2hlbiB0aGUgaW1hZ2UgaGFzIGZpbmlzaGVkIGRvd25sb2FkaW5nXG5cdFx0Ly8gd2UnbGwgdXBkYXRlIHRoZSB0ZXh0dXJlIHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBpbWFnZS5cblx0XHRjb25zdCBsZXZlbCA9IDA7XG5cdFx0Y29uc3QgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBO1xuXHRcdGNvbnN0IHdpZHRoID0gMTtcblx0XHRjb25zdCBoZWlnaHQgPSAxO1xuXHRcdGNvbnN0IGJvcmRlciA9IDA7XG5cdFx0Y29uc3Qgc3JjRm9ybWF0ID0gZ2wuUkdCQTtcblx0XHRjb25zdCBzcmNUeXBlID0gZ2wuVU5TSUdORURfQllURTtcblx0XHRjb25zdCBwaXhlbCA9IG5ldyBVaW50OEFycmF5KFswLCAwLCAyNTUsIDI1NV0pOyAgLy8gb3BhcXVlIGJsdWVcblx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIGxldmVsLCBpbnRlcm5hbEZvcm1hdCxcblx0XHRcdFx0XHRcdHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgc3JjRm9ybWF0LCBzcmNUeXBlLFxuXHRcdFx0XHRcdFx0cGl4ZWwpO1xuXG5cdFx0Y29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcblx0XHRpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG5cdFx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcblx0XHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgbGV2ZWwsIGludGVybmFsRm9ybWF0LFxuXHRcdFx0XHRcdFx0c3JjRm9ybWF0LCBzcmNUeXBlLCBpbWFnZSk7XG5cblx0XHRcdC8vIFdlYkdMMSBoYXMgZGlmZmVyZW50IHJlcXVpcmVtZW50cyBmb3IgcG93ZXIgb2YgMiBpbWFnZXNcblx0XHRcdC8vIHZzIG5vbiBwb3dlciBvZiAyIGltYWdlcyBzbyBjaGVjayBpZiB0aGUgaW1hZ2UgaXMgYVxuXHRcdFx0Ly8gcG93ZXIgb2YgMiBpbiBib3RoIGRpbWVuc2lvbnMuXG5cdFx0XHRpZiAoaXNQb3dlck9mMihpbWFnZS53aWR0aCkgJiYgaXNQb3dlck9mMihpbWFnZS5oZWlnaHQpKSB7XG5cdFx0XHRcdC8vIFllcywgaXQncyBhIHBvd2VyIG9mIDIuIEdlbmVyYXRlIG1pcHMuXG5cdFx0XHRcdGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKGBUZXh0dXJlICR7dXJsfSBkaW1lbnNpb25zIFske2ltYWdlLndpZHRofSwgJHtpbWFnZS5oZWlnaHR9XSBhcmUgbm90IHBvd2VyIG9mIDIuYCk7XG5cdFx0XHRcdC8vIE5vLCBpdCdzIG5vdCBhIHBvd2VyIG9mIDIuIFR1cm4gb2ZmIG1pcHMgYW5kIHNldFxuXHRcdFx0XHQvLyB3cmFwcGluZyB0byBjbGFtcCB0byBlZGdlXG5cdFx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpO1xuXHRcdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRpbWFnZS5vbmVycm9yID0gKGUpID0+IHtcblx0XHRcdGVycm9yQ2FsbGJhY2soYEVycm9yIGxvYWRpbmcgaW1hZ2UgJHt1cmx9OiAke2V9YCk7XG5cdFx0fVxuXHRcdGltYWdlLnNyYyA9IHVybDtcblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXHR9XG5cblx0b25SZXNpemUoY2FudmFzRWw6IEhUTUxDYW52YXNFbGVtZW50KSB7XG5cdFx0Y29uc3QgeyBnbCB9ID0gdGhpcztcblx0XHRjb25zdCB3aWR0aCA9IGNhbnZhc0VsLmNsaWVudFdpZHRoO1xuXHRcdGNvbnN0IGhlaWdodCA9IGNhbnZhc0VsLmNsaWVudEhlaWdodDtcblx0XHQvLyBTZXQgY29ycmVjdCBjYW52YXMgcGl4ZWwgc2l6ZS5cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViR0xfQVBJL0J5X2V4YW1wbGUvQ2FudmFzX3NpemVfYW5kX1dlYkdMXG5cdFx0Y2FudmFzRWwud2lkdGggPSB3aWR0aDtcblx0XHRjYW52YXNFbC5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0Ly8gU2F2ZSBkaW1lbnNpb25zLlxuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0fTtcblxuXHRwcml2YXRlIGRyYXdTZXR1cChcblx0XHRwcm9ncmFtOiBHUFVQcm9ncmFtLFxuXHRcdGZ1bGxzY3JlZW5SZW5kZXI6IGJvb2xlYW4sXG5cdFx0aW5wdXRMYXllcnM6IChEYXRhTGF5ZXIgfCBXZWJHTFRleHR1cmUpW10sXG5cdFx0b3V0cHV0TGF5ZXI/OiBEYXRhTGF5ZXIsXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cdFx0Ly8gQ2hlY2sgaWYgd2UgYXJlIGluIGFuIGVycm9yIHN0YXRlLlxuXHRcdGlmICghcHJvZ3JhbS5wcm9ncmFtKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ0FVVElPTjogdGhlIG9yZGVyIG9mIHRoZXNlIG5leHQgZmV3IGxpbmVzIGlzIGltcG9ydGFudC5cblxuXHRcdC8vIEdldCBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50IHRleHR1cmVzLlxuXHRcdC8vIFRoaXMgbGluZSBtdXN0IGNvbWUgYmVmb3JlIHRoaXMuc2V0T3V0cHV0KCkgYXMgaXQgZGVwZW5kcyBvbiBjdXJyZW50IGludGVybmFsIHN0YXRlLlxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRjb25zdCBpbnB1dFRleHR1cmVzID0gaW5wdXRMYXllcnMubWFwKGxheWVyID0+IGxheWVyLmdldEN1cnJlbnRTdGF0ZVRleHR1cmUgPyAobGF5ZXIgYXMgRGF0YUxheWVyKS5nZXRDdXJyZW50U3RhdGVUZXh0dXJlKCkgOiBsYXllcik7XG5cblx0XHQvLyBTZXQgb3V0cHV0IGZyYW1lYnVmZmVyLlxuXHRcdC8vIFRoaXMgbWF5IG1vZGlmeSBXZWJHTCBpbnRlcm5hbCBzdGF0ZS5cblx0XHR0aGlzLnNldE91dHB1dExheWVyKGZ1bGxzY3JlZW5SZW5kZXIsIGlucHV0TGF5ZXJzLCBvdXRwdXRMYXllcik7XG5cblx0XHQvLyBTZXQgY3VycmVudCBwcm9ncmFtLlxuXHRcdGdsLnVzZVByb2dyYW0ocHJvZ3JhbS5wcm9ncmFtKTtcblxuXHRcdC8vIFNldCBpbnB1dCB0ZXh0dXJlcy5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0VGV4dHVyZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyBpKTtcblx0XHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGlucHV0VGV4dHVyZXNbaV0pO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgc2V0T3V0cHV0TGF5ZXIoXG5cdFx0ZnVsbHNjcmVlblJlbmRlcjogYm9vbGVhbixcblx0XHRpbnB1dExheWVyczogKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSxcblx0XHRvdXRwdXRMYXllcj86IERhdGFMYXllciwgLy8gVW5kZWZpbmVkIHJlbmRlcnMgdG8gc2NyZWVuLlxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBwYXNzVGhyb3VnaFByb2dyYW0gfSA9IHRoaXM7XG5cblx0XHQvLyBSZW5kZXIgdG8gc2NyZWVuLlxuXHRcdGlmICghb3V0cHV0TGF5ZXIpIHtcblx0XHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdFx0XHQvLyBSZXNpemUgdmlld3BvcnQuXG5cdFx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXM7XG5cdFx0XHRnbC52aWV3cG9ydCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiBvdXRwdXQgaXMgc2FtZSBhcyBvbmUgb2YgaW5wdXQgbGF5ZXJzLlxuXHRcdGlmIChpbnB1dExheWVycy5pbmRleE9mKG91dHB1dExheWVyKSA+IC0xKSB7XG5cdFx0XHRpZiAob3V0cHV0TGF5ZXIubnVtQnVmZmVycyA9PT0gMSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFxuQ2Fubm90IHVzZSBzYW1lIGJ1ZmZlciBmb3IgaW5wdXQgYW5kIG91dHB1dCBvZiBhIHByb2dyYW0uXG5UcnkgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGJ1ZmZlcnMgaW4geW91ciBvdXRwdXQgbGF5ZXIgdG8gYXQgbGVhc3QgMiBzbyB5b3VcbmNhbiByZW5kZXIgdG8gbmV4dFN0YXRlIHVzaW5nIGN1cnJlbnRTdGF0ZSBhcyBhbiBpbnB1dC5gKTtcblx0XHRcdH1cblx0XHRcdGlmIChmdWxsc2NyZWVuUmVuZGVyKSB7XG5cdFx0XHRcdC8vIFJlbmRlciBhbmQgaW5jcmVtZW50IGJ1ZmZlciBzbyB3ZSBhcmUgcmVuZGVyaW5nIHRvIGEgZGlmZmVyZW50IHRhcmdldFxuXHRcdFx0XHQvLyB0aGFuIHRoZSBpbnB1dCB0ZXh0dXJlLlxuXHRcdFx0XHRvdXRwdXRMYXllci5iaW5kT3V0cHV0QnVmZmVyKHRydWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gUGFzcyBpbnB1dCB0ZXh0dXJlIHRocm91Z2ggdG8gb3V0cHV0LlxuXHRcdFx0XHR0aGlzLnN0ZXAocGFzc1Rocm91Z2hQcm9ncmFtLCBbb3V0cHV0TGF5ZXJdLCBvdXRwdXRMYXllcik7XG5cdFx0XHRcdC8vIFJlbmRlciB0byBvdXRwdXQgd2l0aG91dCBpbmNyZW1lbnRpbmcgYnVmZmVyLlxuXHRcdFx0XHRvdXRwdXRMYXllci5iaW5kT3V0cHV0QnVmZmVyKGZhbHNlKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gUmVuZGVyIHRvIGN1cnJlbnQgYnVmZmVyLlxuXHRcdFx0b3V0cHV0TGF5ZXIuYmluZE91dHB1dEJ1ZmZlcihmYWxzZSk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIFJlc2l6ZSB2aWV3cG9ydC5cblx0XHRjb25zdCBbIHdpZHRoLCBoZWlnaHQgXSA9IG91dHB1dExheWVyLmdldERpbWVuc2lvbnMoKTtcblx0XHRnbC52aWV3cG9ydCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcblx0fTtcblxuXHRwcml2YXRlIHNldFBvc2l0aW9uQXR0cmlidXRlKHByb2dyYW06IEdQVVByb2dyYW0pIHtcblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXHRcdC8vIFBvaW50IGF0dHJpYnV0ZSB0byB0aGUgY3VycmVudGx5IGJvdW5kIFZCTy5cblx0XHRjb25zdCBsb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0ucHJvZ3JhbSEsICdhUG9zaXRpb24nKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXHRcdC8vIEVuYWJsZSB0aGUgYXR0cmlidXRlLlxuXHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGxvY2F0aW9uKTtcblx0fVxuXG5cdHByaXZhdGUgc2V0SW5kZXhBdHRyaWJ1dGUocHJvZ3JhbTogR1BVUHJvZ3JhbSkge1xuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cdFx0Ly8gUG9pbnQgYXR0cmlidXRlIHRvIHRoZSBjdXJyZW50bHkgYm91bmQgVkJPLlxuXHRcdGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbS5wcm9ncmFtISwgJ2FJbmRleCcpO1xuXHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIobG9jYXRpb24sIDEsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cdFx0Ly8gRW5hYmxlIHRoZSBhdHRyaWJ1dGUuXG5cdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobG9jYXRpb24pO1xuXHR9XG5cblx0Ly8gU3RlcCBmb3IgZW50aXJlIGZ1bGxzY3JlZW4gcXVhZC5cblx0c3RlcChcblx0XHRwcm9ncmFtOiBHUFVQcm9ncmFtLFxuXHRcdGlucHV0TGF5ZXJzOiAoRGF0YUxheWVyIHwgV2ViR0xUZXh0dXJlKVtdID0gW10sXG5cdFx0b3V0cHV0TGF5ZXI/OiBEYXRhTGF5ZXIsIC8vIFVuZGVmaW5lZCByZW5kZXJzIHRvIHNjcmVlbi5cblx0XHRvcHRpb25zPzoge1xuXHRcdFx0c2hvdWxkQmxlbmRBbHBoYT86IGJvb2xlYW4sXG5cdFx0fSxcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JTdGF0ZSwgcXVhZFBvc2l0aW9uc0J1ZmZlciB9ID0gdGhpcztcblxuXHRcdC8vIElnbm9yZSBpZiB3ZSBhcmUgaW4gZXJyb3Igc3RhdGUuXG5cdFx0aWYgKGVycm9yU3RhdGUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEbyBzZXR1cCAtIHRoaXMgbXVzdCBjb21lIGZpcnN0LlxuXHRcdHRoaXMuZHJhd1NldHVwKHByb2dyYW0sIHRydWUsIGlucHV0TGF5ZXJzLCBvdXRwdXRMYXllcik7XG5cblx0XHQvLyBVcGRhdGUgdW5pZm9ybXMgYW5kIGJ1ZmZlcnMuXG5cdFx0cHJvZ3JhbS5zZXRVbmlmb3JtKCd1X3NjYWxlJywgWzEsIDFdLCAnRkxPQVQnKTtcblx0XHRwcm9ncmFtLnNldFVuaWZvcm0oJ3VfdHJhbnNsYXRpb24nLCBbMCwgMF0sICdGTE9BVCcpO1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBxdWFkUG9zaXRpb25zQnVmZmVyKTtcblx0XHR0aGlzLnNldFBvc2l0aW9uQXR0cmlidXRlKHByb2dyYW0pO1xuXG5cdFx0Ly8gRHJhdy5cblx0XHRpZiAob3B0aW9ucz8uc2hvdWxkQmxlbmRBbHBoYSkge1xuXHRcdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKTtcblx0XHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXHRcdH1cblx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcblx0XHRnbC5kaXNhYmxlKGdsLkJMRU5EKTtcblx0fVxuXG5cdC8vIFN0ZXAgcHJvZ3JhbSBvbmx5IGZvciBhIHN0cmlwIG9mIHB4IGFsb25nIHRoZSBib3VuZGFyeS5cblx0c3RlcEJvdW5kYXJ5KFxuXHRcdHByb2dyYW06IEdQVVByb2dyYW0sXG5cdFx0aW5wdXRMYXllcnM6IChEYXRhTGF5ZXIgfCBXZWJHTFRleHR1cmUpW10gPSBbXSxcblx0XHRvdXRwdXRMYXllcj86IERhdGFMYXllciwgLy8gVW5kZWZpbmVkIHJlbmRlcnMgdG8gc2NyZWVuLlxuXHRcdG9wdGlvbnM/OiB7XG5cdFx0XHRzaG91bGRCbGVuZEFscGhhPzogYm9vbGVhbixcblx0XHRcdHNpbmdsZUVkZ2U/OiAnTEVGVCcgfCAnUklHSFQnIHwgJ1RPUCcgfCAnQk9UVE9NJztcblx0XHR9LFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvclN0YXRlLCBib3VuZGFyeVBvc2l0aW9uc0J1ZmZlcn0gPSB0aGlzO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERvIHNldHVwIC0gdGhpcyBtdXN0IGNvbWUgZmlyc3QuXG5cdFx0dGhpcy5kcmF3U2V0dXAocHJvZ3JhbSwgZmFsc2UsIGlucHV0TGF5ZXJzLCBvdXRwdXRMYXllcik7XG5cblx0XHQvLyBVcGRhdGUgdW5pZm9ybXMgYW5kIGJ1ZmZlcnMuXG5cdFx0Ly8gRnJhbWUgbmVlZHMgdG8gYmUgb2Zmc2V0IGFuZCBzY2FsZWQgc28gdGhhdCBhbGwgZm91ciBzaWRlcyBhcmUgaW4gdmlld3BvcnQuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGNvbnN0IFsgd2lkdGgsIGhlaWdodCBdID0gb3V0cHV0TGF5ZXIgPyBvdXRwdXRMYXllci5nZXREaW1lbnNpb25zKCkgOiB0aGlzO1xuXHRcdGNvbnN0IG9uZVB4ID0gWyAxIC8gd2lkdGgsIDEgLyBoZWlnaHRdIGFzIFtudW1iZXIsIG51bWJlcl07XG5cdFx0cHJvZ3JhbS5zZXRVbmlmb3JtKCd1X3NjYWxlJywgWzEgLSBvbmVQeFswXSwgMSAtIG9uZVB4WzFdXSwgJ0ZMT0FUJyk7XG5cdFx0cHJvZ3JhbS5zZXRVbmlmb3JtKCd1X3RyYW5zbGF0aW9uJywgb25lUHgsICdGTE9BVCcpO1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBib3VuZGFyeVBvc2l0aW9uc0J1ZmZlcik7XG5cdFx0dGhpcy5zZXRQb3NpdGlvbkF0dHJpYnV0ZShwcm9ncmFtKTtcblxuXHRcdC8vIERyYXcuXG5cdFx0aWYgKG9wdGlvbnM/LnNob3VsZEJsZW5kQWxwaGEpIHtcblx0XHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHR9XG5cdFx0aWYgKG9wdGlvbnM/LnNpbmdsZUVkZ2UpIHtcblx0XHRcdHN3aXRjaChvcHRpb25zPy5zaW5nbGVFZGdlKSB7XG5cdFx0XHRcdGNhc2UgJ0xFRlQnOlxuXHRcdFx0XHRcdGdsLmRyYXdBcnJheXMoZ2wuTElORVMsIDMsIDIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdSSUdIVCc6XG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMSwgMik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1RPUCc6XG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMiwgMik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0JPVFRPTSc6XG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMCwgMik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGJvdW5kYXJ5IGVkZ2UgdHlwZTogJHtvcHRpb25zPy5zaW5nbGVFZGdlfS5gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FX0xPT1AsIDAsIDQpO1xuXHRcdH1cblx0XHRcblx0XHRnbC5kaXNhYmxlKGdsLkJMRU5EKTtcblx0fVxuXG5cdC8vIFN0ZXAgcHJvZ3JhbSBmb3IgYWxsIGJ1dCBhIHN0cmlwIG9mIHB4IGFsb25nIHRoZSBib3VuZGFyeS5cblx0c3RlcE5vbkJvdW5kYXJ5KFxuXHRcdHByb2dyYW06IEdQVVByb2dyYW0sXG5cdFx0aW5wdXRMYXllcnM6IChEYXRhTGF5ZXIgfCBXZWJHTFRleHR1cmUpW10gPSBbXSxcblx0XHRvdXRwdXRMYXllcj86IERhdGFMYXllciwgLy8gVW5kZWZpbmVkIHJlbmRlcnMgdG8gc2NyZWVuLlxuXHRcdG9wdGlvbnM/OiB7XG5cdFx0XHRzaG91bGRCbGVuZEFscGhhPzogYm9vbGVhbixcblx0XHR9LFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvclN0YXRlLCBxdWFkUG9zaXRpb25zQnVmZmVyIH0gPSB0aGlzO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERvIHNldHVwIC0gdGhpcyBtdXN0IGNvbWUgZmlyc3QuXG5cdFx0dGhpcy5kcmF3U2V0dXAocHJvZ3JhbSwgZmFsc2UsIGlucHV0TGF5ZXJzLCBvdXRwdXRMYXllcik7XG5cblx0XHQvLyBVcGRhdGUgdW5pZm9ybXMgYW5kIGJ1ZmZlcnMuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGNvbnN0IFsgd2lkdGgsIGhlaWdodCBdID0gb3V0cHV0TGF5ZXIgPyBvdXRwdXRMYXllci5nZXREaW1lbnNpb25zKCkgOiB0aGlzO1xuXHRcdGNvbnN0IG9uZVB4ID0gWyAxIC8gd2lkdGgsIDEgLyBoZWlnaHRdIGFzIFtudW1iZXIsIG51bWJlcl07XG5cdFx0cHJvZ3JhbS5zZXRVbmlmb3JtKCd1X3NjYWxlJywgWzEgLSAyICogb25lUHhbMF0sIDEgLSAyICogb25lUHhbMV1dLCAnRkxPQVQnKTtcblx0XHRwcm9ncmFtLnNldFVuaWZvcm0oJ3VfdHJhbnNsYXRpb24nLCBvbmVQeCwgJ0ZMT0FUJyk7XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHF1YWRQb3NpdGlvbnNCdWZmZXIpO1xuXHRcdHRoaXMuc2V0UG9zaXRpb25BdHRyaWJ1dGUocHJvZ3JhbSk7XG5cdFx0XG5cdFx0Ly8gRHJhdy5cblx0XHRpZiAob3B0aW9ucz8uc2hvdWxkQmxlbmRBbHBoYSkge1xuXHRcdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKTtcblx0XHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXHRcdH1cblx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcblx0XHRnbC5kaXNhYmxlKGdsLkJMRU5EKTtcblx0fVxuXG5cdC8vIFN0ZXAgcHJvZ3JhbSBvbmx5IGZvciBhIGNpcmN1bGFyIHNwb3QuXG5cdHN0ZXBDaXJjbGUoXG5cdFx0cHJvZ3JhbTogR1BVUHJvZ3JhbSxcblx0XHRwb3NpdGlvbjogW251bWJlciwgbnVtYmVyXSwgLy8gcG9zaXRpb24gaXMgaW4gc2NyZWVuIHNwYWNlIGNvb3Jkcy5cblx0XHRyYWRpdXM6IG51bWJlciwgLy8gcmFkaXVzIGlzIGluIHB4LlxuXHRcdGlucHV0TGF5ZXJzOiAoRGF0YUxheWVyIHwgV2ViR0xUZXh0dXJlKVtdID0gW10sXG5cdFx0b3V0cHV0TGF5ZXI/OiBEYXRhTGF5ZXIsIC8vIFVuZGVmaW5lZCByZW5kZXJzIHRvIHNjcmVlbi5cblx0XHRvcHRpb25zPzoge1xuXHRcdFx0c2hvdWxkQmxlbmRBbHBoYT86IGJvb2xlYW4sXG5cdFx0fSxcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JTdGF0ZSwgY2lyY2xlUG9zaXRpb25zQnVmZmVyLCB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERvIHNldHVwIC0gdGhpcyBtdXN0IGNvbWUgZmlyc3QuXG5cdFx0dGhpcy5kcmF3U2V0dXAocHJvZ3JhbSwgZmFsc2UsIGlucHV0TGF5ZXJzLCBvdXRwdXRMYXllcik7XG5cblx0XHQvLyBVcGRhdGUgdW5pZm9ybXMgYW5kIGJ1ZmZlcnMuXG5cdFx0cHJvZ3JhbS5zZXRVbmlmb3JtKCd1X3NjYWxlJywgW3JhZGl1cyAvIHdpZHRoLCByYWRpdXMgLyBoZWlnaHRdLCAnRkxPQVQnKTtcblx0XHRwcm9ncmFtLnNldFVuaWZvcm0oJ3VfdHJhbnNsYXRpb24nLCBbMiAqIHBvc2l0aW9uWzBdIC8gd2lkdGggLSAxLCAyICogcG9zaXRpb25bMV0gLyBoZWlnaHQgLSAxXSwgJ0ZMT0FUJyk7XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGNpcmNsZVBvc2l0aW9uc0J1ZmZlcik7XG5cdFx0dGhpcy5zZXRQb3NpdGlvbkF0dHJpYnV0ZShwcm9ncmFtKTtcblx0XHRcblx0XHQvLyBEcmF3LlxuXHRcdGlmIChvcHRpb25zPy5zaG91bGRCbGVuZEFscGhhKSB7XG5cdFx0XHRnbC5lbmFibGUoZ2wuQkxFTkQpO1xuXHRcdFx0Z2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cdFx0fVxuXHRcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfRkFOLCAwLCBOVU1fU0VHTUVOVFNfQ0lSQ0xFICsgMik7XG5cdFx0Z2wuZGlzYWJsZShnbC5CTEVORCk7XG5cdH1cblxuXHRkcmF3UG9pbnRzKFxuXHRcdHByb2dyYW06IEdQVVByb2dyYW0sXG5cdFx0aW5wdXRMYXllcnM6IChEYXRhTGF5ZXIgfCBXZWJHTFRleHR1cmUpW10sXG5cdFx0b3V0cHV0TGF5ZXI/OiBEYXRhTGF5ZXIsXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdHBvaW50U2l6ZT86IG51bWJlcixcblx0XHRcdG51bVBvaW50cz86IG51bWJlcixcblx0XHRcdHNob3VsZEJsZW5kQWxwaGE/OiBib29sZWFuLFxuXHRcdH1cblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JTdGF0ZSwgd2lkdGgsIGhlaWdodCwgcG9pbnRJbmRleEFycmF5IH0gPSB0aGlzO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChpbnB1dExheWVycy5sZW5ndGggPCAxKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaW5wdXRMYXllcnMgZm9yIGRyYXdQb2ludHMgb24gJHtwcm9ncmFtLm5hbWV9OiBtdXN0IHBhc3MgYSBwb3NpdGlvbkRhdGFMYXllciBhcyBmaXJzdCBlbGVtZW50IG9mIGlucHV0TGF5ZXJzLmApO1xuXHRcdH1cblx0XHRjb25zdCBwb3NpdGlvbkxheWVyID0gaW5wdXRMYXllcnNbMF0gYXMgRGF0YUxheWVyO1xuXG5cdFx0Ly8gQ2hlY2sgdGhhdCBudW1Qb2ludHMgaXMgdmFsaWQuXG5cdFx0Y29uc3QgbGVuZ3RoID0gcG9zaXRpb25MYXllci5nZXRMZW5ndGgoKTtcblx0XHRjb25zdCBudW1Qb2ludHMgPSBvcHRpb25zPy5udW1Qb2ludHMgfHwgbGVuZ3RoO1xuXHRcdGlmIChudW1Qb2ludHMgPiBsZW5ndGgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBudW1Qb2ludCAke251bVBvaW50c30gZm9yIHBvc2l0aW9uRGF0YUxheWVyIG9mIGxlbmd0aCAke2xlbmd0aH0uYCk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IGRlZmF1bHQgcG9pbnRTaXplLlxuXHRcdGNvbnN0IHBvaW50U2l6ZSA9IG9wdGlvbnM/LnBvaW50U2l6ZSB8fCAxO1xuXG5cdFx0Ly8gRG8gc2V0dXAgLSB0aGlzIG11c3QgY29tZSBmaXJzdC5cblx0XHR0aGlzLmRyYXdTZXR1cChwcm9ncmFtLCBmYWxzZSwgaW5wdXRMYXllcnMsIG91dHB1dExheWVyKTtcblxuXHRcdC8vIFVwZGF0ZSB1bmlmb3JtcyBhbmQgYnVmZmVycy5cblx0XHRwcm9ncmFtLnNldFVuaWZvcm0oJ3Vfc2NhbGUnLCBbMSAvIHdpZHRoLCAxIC8gaGVpZ2h0XSwgJ0ZMT0FUJyk7XG5cdFx0cHJvZ3JhbS5zZXRVbmlmb3JtKCd1X3BvaW50U2l6ZScsIHBvaW50U2l6ZSwgJ0ZMT0FUJyk7XG5cdFx0Y29uc3QgcG9zaXRpb25MYXllckRpbWVuc2lvbnMgPSBwb3NpdGlvbkxheWVyLmdldERpbWVuc2lvbnMoKTtcblx0XHRwcm9ncmFtLnNldFVuaWZvcm0oJ3VfcG9zaXRpb25EaW1lbnNpb25zJywgcG9zaXRpb25MYXllckRpbWVuc2lvbnMsICdGTE9BVCcpO1xuXHRcdGlmICh0aGlzLnBvaW50SW5kZXhCdWZmZXIgPT09IHVuZGVmaW5lZCB8fCAocG9pbnRJbmRleEFycmF5ICYmIHBvaW50SW5kZXhBcnJheS5sZW5ndGggPCBudW1Qb2ludHMpKSB7XG5cdFx0XHQvLyBIYXZlIHRvIHVzZSBmbG9hdDMyIGFycmF5IGJjIGludCBpcyBub3Qgc3VwcG9ydGVkIGFzIGEgdmVydGV4IGF0dHJpYnV0ZSB0eXBlLlxuXHRcdFx0Y29uc3QgaW5kaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aW5kaWNlc1tpXSA9IGk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBvaW50SW5kZXhBcnJheSA9IGluZGljZXM7XG5cdFx0XHR0aGlzLnBvaW50SW5kZXhCdWZmZXIgPSB0aGlzLmluaXRWZXJ0ZXhCdWZmZXIoaW5kaWNlcyk7XG5cdFx0fVxuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnBvaW50SW5kZXhCdWZmZXIhKTtcblx0XHR0aGlzLnNldEluZGV4QXR0cmlidXRlKHByb2dyYW0pO1xuXG5cdFx0Ly8gRHJhdy5cblx0XHQvLyBEZWZhdWx0IHRvIGJsZW5kID09PSB0cnVlLlxuXHRcdGNvbnN0IHNob3VsZEJsZW5kQWxwaGEgPSBvcHRpb25zPy5zaG91bGRCbGVuZEFscGhhID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcblx0XHRpZiAoc2hvdWxkQmxlbmRBbHBoYSkge1xuXHRcdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKTtcblx0XHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXHRcdH1cblx0XHRnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgbnVtUG9pbnRzKTtcblx0XHRnbC5kaXNhYmxlKGdsLkJMRU5EKTtcblx0fVxuXHRcblx0Z2V0Q29udGV4dCgpIHtcblx0XHRyZXR1cm4gdGhpcy5nbDtcblx0fVxuXG5cdGdldFZhbHVlcyhkYXRhTGF5ZXI6IERhdGFMYXllcikge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yQ2FsbGJhY2ssIGRlZmF1bHRWZXJ0ZXhTaGFkZXIgfSA9IHRoaXM7XG5cdFx0bGV0IHsgcGFja0Zsb2F0MzJUb1JHQkE4UHJvZ3JhbSwgcGFja1RvUkdCQThPdXRwdXRCdWZmZXIgfSA9IHRoaXM7XG5cblx0XHQvLyBJbml0IHByb2dyYW0gaWYgbmVlZGVkLlxuXHRcdGlmICghcGFja0Zsb2F0MzJUb1JHQkE4UHJvZ3JhbSkge1xuXHRcdFx0cGFja0Zsb2F0MzJUb1JHQkE4UHJvZ3JhbSA9IG5ldyBHUFVQcm9ncmFtKFxuXHRcdFx0XHQncGFja0Zsb2F0MzJUb1JHQkE4Jyxcblx0XHRcdFx0Z2wsXG5cdFx0XHRcdGVycm9yQ2FsbGJhY2ssXG5cdFx0XHRcdGRlZmF1bHRWZXJ0ZXhTaGFkZXIsXG5cdFx0XHRcdHBhY2tGbG9hdDMyVG9SR0JBOFNoYWRlclNvdXJjZSwgW1xuXHRcdFx0XHRcdHsgXG5cdFx0XHRcdFx0XHRuYW1lOiAndV9mbG9hdFRleHR1cmUnLFxuXHRcdFx0XHRcdFx0dmFsdWU6IDAsXG5cdFx0XHRcdFx0XHRkYXRhVHlwZTogJ0lOVCcsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSk7XG5cdFx0XHR0aGlzLnBhY2tGbG9hdDMyVG9SR0JBOFByb2dyYW0gPSBwYWNrRmxvYXQzMlRvUkdCQThQcm9ncmFtO1xuXHRcdH1cblx0XHRcblx0XHRjb25zdCB0eXBlID0gZGF0YUxheWVyLmdldFR5cGUoKTtcblx0XHRpZiAodHlwZSAhPT0gJ2Zsb2F0MTYnICYmIHR5cGUgIT09ICdmbG9hdDMyJykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCB0eXBlICR7dHlwZX0gZm9yIGdldFZhbHVlcygpLmApO1xuXHRcdH1cblx0XHRjb25zdCBbd2lkdGgsIGhlaWdodF0gPSBkYXRhTGF5ZXIuZ2V0RGltZW5zaW9ucygpO1xuXHRcdGNvbnN0IG51bUNvbXBvbmVudHMgPSBkYXRhTGF5ZXIuZ2V0TnVtQ29tcG9uZW50KCk7XG5cdFx0Y29uc3Qgb3V0cHV0V2lkdGggPSB3aWR0aCAqIG51bUNvbXBvbmVudHM7XG5cdFx0Y29uc3Qgb3V0cHV0SGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0Ly8gSW5pdCBvdXRwdXQgYnVmZmVyIGlmIG5lZWRlZC5cblx0XHRpZiAoIXBhY2tUb1JHQkE4T3V0cHV0QnVmZmVyKSB7XG5cdFx0XHRwYWNrVG9SR0JBOE91dHB1dEJ1ZmZlciA9IG5ldyBEYXRhTGF5ZXIoJ3BhY2tUb1JHQkE4T3V0cHV0JywgZ2wsIHtcblx0XHRcdFx0ZGltZW5zaW9uczogW291dHB1dFdpZHRoLCBvdXRwdXRIZWlnaHRdLFxuXHRcdFx0XHR0eXBlOiAndWludDgnLFxuXHRcdFx0XHRudW1Db21wb25lbnRzOiA0LFxuXHRcdFx0fSwgZXJyb3JDYWxsYmFjaywgdHJ1ZSwgMSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFJlc2l6ZSBpZiBuZWVkZWQuXG5cdFx0XHRjb25zdCBvdXRwdXREaW1lbnNpb25zID0gcGFja1RvUkdCQThPdXRwdXRCdWZmZXIuZ2V0RGltZW5zaW9ucygpO1xuXHRcdFx0aWYgKG91dHB1dERpbWVuc2lvbnNbMF0gIT09IG91dHB1dFdpZHRoIHx8IG91dHB1dERpbWVuc2lvbnNbMV0gIT09IG91dHB1dEhlaWdodCkge1xuXHRcdFx0XHRwYWNrVG9SR0JBOE91dHB1dEJ1ZmZlci5yZXNpemUoW291dHB1dFdpZHRoLCBvdXRwdXRIZWlnaHRdKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQYWNrIHRvIGJ5dGVzLlxuXHRcdHBhY2tGbG9hdDMyVG9SR0JBOFByb2dyYW0uc2V0VW5pZm9ybSgndV9mbG9hdFRleHR1cmVEaW0nLCBbd2lkdGgsIGhlaWdodF0sICdGTE9BVCcpO1xuXHRcdHBhY2tGbG9hdDMyVG9SR0JBOFByb2dyYW0uc2V0VW5pZm9ybSgndV9udW1GbG9hdENvbXBvbmVudHMnLCBudW1Db21wb25lbnRzLCAnRkxPQVQnKTtcblx0XHR0aGlzLnN0ZXAocGFja0Zsb2F0MzJUb1JHQkE4UHJvZ3JhbSwgW2RhdGFMYXllcl0sIHBhY2tUb1JHQkE4T3V0cHV0QnVmZmVyKTtcblxuXHRcdC8vIFJlYWQgcmVzdWx0LlxuXHRcdGlmICh0aGlzLnJlYWR5VG9SZWFkKCkpIHtcblx0XHRcdGNvbnN0IHBpeGVscyA9IG5ldyBVaW50OEFycmF5KG91dHB1dFdpZHRoICogb3V0cHV0SGVpZ2h0ICogNCk7XG5cdFx0XHRnbC5yZWFkUGl4ZWxzKDAsIDAsIG91dHB1dFdpZHRoLCBvdXRwdXRIZWlnaHQsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIHBpeGVscyk7XG5cdFx0XHRyZXR1cm4gbmV3IEZsb2F0MzJBcnJheShwaXhlbHMuYnVmZmVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gcmVhZCB2YWx1ZXMgZnJvbSBCdWZmZXIgd2l0aCBzdGF0dXM6ICR7Z2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhnbC5GUkFNRUJVRkZFUil9LmApO1xuXHRcdH1cblx0fVxuXG5cdHJlYWR5VG9SZWFkKCkge1xuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cdFx0cmV0dXJuIGdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoZ2wuRlJBTUVCVUZGRVIpID09IGdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFO1xuXHR9O1xuXG4gICAgcmVzZXQoKSB7XG5cdH07XG5cdFxuXHRkZXN0cm95KCkge1xuXHRcdC8vIFRPRE86IE5lZWQgdG8gaW1wbGVtZW50IHRoaXMuXG5cdH1cbn0iLCJpbXBvcnQgeyBjb21waWxlU2hhZGVyLCBpc1dlYkdMMiB9IGZyb20gJy4vdXRpbHMnO1xuXG4vLyBVbmlmb3JtIHR5cGVzLlxuY29uc3QgRkxPQVRfMURfVU5JRk9STSA9ICcxZic7XG5jb25zdCBGTE9BVF8yRF9VTklGT1JNID0gJzJmJztcbmNvbnN0IEZMT0FUXzNEX1VOSUZPUk0gPSAnM2YnO1xuY29uc3QgRkxPQVRfNERfVU5JRk9STSA9ICczZic7XG5jb25zdCBJTlRfMURfVU5JRk9STSA9ICcxaSc7XG5jb25zdCBJTlRfMkRfVU5JRk9STSA9ICcyaSc7XG5jb25zdCBJTlRfM0RfVU5JRk9STSA9ICczaSc7XG5jb25zdCBJTlRfNERfVU5JRk9STSA9ICczaSc7XG5cbmV4cG9ydCB0eXBlIFVuaWZvcm1EYXRhVHlwZSA9ICdGTE9BVCcgfCAnSU5UJztcbmV4cG9ydCB0eXBlIFVuaWZvcm1WYWx1ZVR5cGUgPSBcblx0bnVtYmVyIHxcblx0W251bWJlcl0gfFxuXHRbbnVtYmVyLCBudW1iZXJdIHxcblx0W251bWJlciwgbnVtYmVyLCBudW1iZXJdIHxcblx0W251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG50eXBlIFVuaWZvcm1UeXBlID0gXG5cdHR5cGVvZiBGTE9BVF8xRF9VTklGT1JNIHxcblx0dHlwZW9mIEZMT0FUXzJEX1VOSUZPUk0gfFxuXHR0eXBlb2YgRkxPQVRfM0RfVU5JRk9STSB8XG5cdHR5cGVvZiBGTE9BVF80RF9VTklGT1JNIHxcblx0dHlwZW9mIElOVF8xRF9VTklGT1JNIHxcblx0dHlwZW9mIElOVF8yRF9VTklGT1JNIHxcblx0dHlwZW9mIElOVF8zRF9VTklGT1JNIHxcblx0dHlwZW9mIElOVF80RF9VTklGT1JNO1xudHlwZSBVbmlmb3JtID0geyBcblx0bG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uLFxuXHR0eXBlOiBVbmlmb3JtVHlwZSxcbn07XG5cbmV4cG9ydCB0eXBlIEF0dHJpYnV0ZURhdGFUeXBlID0gJ2Zsb2F0MzInIHwgJ2Zsb2F0MTYnIHwgJ3VpbnQ4JyB8ICdpbnQ4JyB8ICd1aW50MTYnIHwgJ2ludDE2JztcbnR5cGUgQXR0cmlidXRlID0geyBcblx0bG9jYXRpb246IG51bWJlcixcblx0dHlwZTogQXR0cmlidXRlRGF0YVR5cGUsXG59O1xuXG5leHBvcnQgY2xhc3MgR1BVUHJvZ3JhbSB7XG5cdHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblx0cHJpdmF0ZSByZWFkb25seSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcblx0cHJpdmF0ZSByZWFkb25seSBlcnJvckNhbGxiYWNrOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkO1xuXHRyZWFkb25seSBwcm9ncmFtPzogV2ViR0xQcm9ncmFtO1xuXHRwcml2YXRlIHJlYWRvbmx5IHVuaWZvcm1zOiB7IFsga2V5OiBzdHJpbmddOiBVbmlmb3JtIH0gPSB7fTtcblx0cHJpdmF0ZSByZWFkb25seSBzaGFkZXJzOiBXZWJHTFNoYWRlcltdID0gW107IC8vIFNhdmUgcmVmIHRvIHNoYWRlcnMgc28gd2UgY2FuIGRlYWxsb2NhdGUuXG5cdHByaXZhdGUgcmVhZG9ubHkgYXR0cmlidXRlczogeyBbIGtleTogc3RyaW5nXTogQXR0cmlidXRlIH0gPSB7fTtcblx0cHJpdmF0ZSByZWFkb25seSBhdHRyaWJ1dGVOYW1lczogc3RyaW5nW10gPSBbXTtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRuYW1lOiBzdHJpbmcsXG5cdFx0Z2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsXG5cdFx0ZXJyb3JDYWxsYmFjazogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZCxcblx0XHR2ZXJ0ZXhTaGFkZXJPclNvdXJjZTogc3RyaW5nIHwgIFdlYkdMU2hhZGVyLFxuXHRcdGZyYWdtZW50U2hhZGVyT3JTb3VyY2U6IHN0cmluZyB8IHN0cmluZ1tdIHwgV2ViR0xTaGFkZXIsLy8gV2UgbWF5IHdhbnQgdG8gcGFzcyBpbiBhbiBhcnJheSBvZiBzaGFkZXIgc3RyaW5nIHNvdXJjZXMsIGlmIHNwbGl0IGFjcm9zcyBzZXZlcmFsIGZpbGVzLlxuXHRcdHVuaWZvcm1zPzoge1xuXHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0dmFsdWU6IFVuaWZvcm1WYWx1ZVR5cGUsXG5cdFx0XHRkYXRhVHlwZTogVW5pZm9ybURhdGFUeXBlLFxuXHRcdH1bXSxcblx0XHRkZWZpbmVzPzogey8vIEZvciBub3csIHdlJ2xsIGFsbG93IHNvbWUgdmFyaWFibGVzIHRvIGJlIHBhc3NlZCBpbiBhcyAjZGVmaW5lIHRvIHRoZSBwcmVwcm9jZXNzb3IuXG5cdFx0XHRba2V5OiBzdHJpbmddOiBzdHJpbmcsIC8vIFdlJ2xsIGRvIHRoZXNlIGFzIHN0cmluZ3MgdG8gbWFrZSBpdCBlYXNpZXIgdG8gY29udHJvbCBmbG9hdCB2cyBpbnQuXG5cdFx0fSxcblx0KSB7XG5cdFx0Ly8gU2F2ZSBwYXJhbXMuXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHR0aGlzLmdsID0gZ2w7XG5cdFx0dGhpcy5lcnJvckNhbGxiYWNrID0gZXJyb3JDYWxsYmFjaztcblxuXHRcdC8vIENyZWF0ZSBhIHByb2dyYW0uXG5cdFx0Y29uc3QgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcblx0XHRpZiAoIXByb2dyYW0pIHtcblx0XHRcdGVycm9yQ2FsbGJhY2soYFVuYWJsZSB0byBpbml0IGdsIHByb2dyYW06ICR7bmFtZX0uYCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcGlsZSBzaGFkZXJzLlxuXHRcdGlmICh0eXBlb2YoZnJhZ21lbnRTaGFkZXJPclNvdXJjZSkgPT09ICdzdHJpbmcnIHx8IHR5cGVvZigoZnJhZ21lbnRTaGFkZXJPclNvdXJjZSBhcyBzdHJpbmdbXSlbMF0pID09PSAnc3RyaW5nJykge1xuXHRcdFx0bGV0IHNvdXJjZVN0cmluZyA9IHR5cGVvZihmcmFnbWVudFNoYWRlck9yU291cmNlKSA9PT0gJ3N0cmluZycgP1xuXHRcdFx0XHRmcmFnbWVudFNoYWRlck9yU291cmNlIDpcblx0XHRcdFx0KGZyYWdtZW50U2hhZGVyT3JTb3VyY2UgYXMgc3RyaW5nW10pLmpvaW4oJ1xcbicpO1xuXHRcdFx0aWYgKGRlZmluZXMpIHtcblx0XHRcdFx0Ly8gRmlyc3QgY29udmVydCBkZWZpbmVzIHRvIGEgc3RyaW5nLlxuXHRcdFx0XHRjb25zdCBkZWZpbmVzU291cmNlID0gT2JqZWN0LmtleXMoZGVmaW5lcykubWFwKGtleSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGAjZGVmaW5lICR7a2V5fSAke2RlZmluZXNba2V5XX1cXG5gO1xuXHRcdFx0XHR9KS5qb2luKCdcXG4nKTtcblx0XHRcdFx0c291cmNlU3RyaW5nID0gZGVmaW5lc1NvdXJjZSArIHNvdXJjZVN0cmluZztcblx0XHRcdH1cblx0XHRcdGNvbnN0IGZyYWdtZW50U2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZXJyb3JDYWxsYmFjaywgc291cmNlU3RyaW5nLCBnbC5GUkFHTUVOVF9TSEFERVIsIG5hbWUpO1xuXHRcdFx0aWYgKCFmcmFnbWVudFNoYWRlcikge1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGBVbmFibGUgdG8gY29tcGlsZSBmcmFnbWVudCBzaGFkZXIgZm9yIHByb2dyYW0gJHtuYW1lfS5gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zaGFkZXJzLnB1c2goZnJhZ21lbnRTaGFkZXIpO1xuXHRcdFx0Z2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKGRlZmluZXMpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gYXR0YWNoIGRlZmluZXMgdG8gcHJvZ3JhbSAke25hbWV9IGJlY2F1c2UgaXQgaXMgYWxyZWFkeSBjb21waWxlZC5gKTtcblx0XHRcdH1cblx0XHRcdGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlck9yU291cmNlKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZih2ZXJ0ZXhTaGFkZXJPclNvdXJjZSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRjb25zdCB2ZXJ0ZXhTaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBlcnJvckNhbGxiYWNrLCB2ZXJ0ZXhTaGFkZXJPclNvdXJjZSwgZ2wuVkVSVEVYX1NIQURFUiwgbmFtZSk7XG5cdFx0XHRpZiAoIXZlcnRleFNoYWRlcikge1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGBVbmFibGUgdG8gY29tcGlsZSB2ZXJ0ZXggc2hhZGVyIGZvciBwcm9ncmFtICR7bmFtZX0uYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHRoaXMuc2hhZGVycy5wdXNoKHZlcnRleFNoYWRlcik7XG5cdFx0XHRnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlck9yU291cmNlKTtcblx0XHR9XG5cblx0XHQvLyBMaW5rIHRoZSBwcm9ncmFtLlxuXHRcdGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuXHRcdC8vIENoZWNrIGlmIGl0IGxpbmtlZC5cblx0XHRjb25zdCBzdWNjZXNzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyk7XG5cdFx0aWYgKCFzdWNjZXNzKSB7XG5cdFx0XHQvLyBTb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIHRoZSBsaW5rLlxuXHRcdFx0ZXJyb3JDYWxsYmFjayhgUHJvZ3JhbSAke25hbWV9IGZhaWxlZCB0byBsaW5rOiAke2dsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pfWApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFByb2dyYW0gaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGluaXRlZC5cblx0XHR0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuXG5cdFx0dW5pZm9ybXM/LmZvckVhY2godW5pZm9ybSA9PiB7XG5cdFx0XHRjb25zdCB7IG5hbWUsIHZhbHVlLCBkYXRhVHlwZSB9ID0gdW5pZm9ybTtcblx0XHRcdHRoaXMuc2V0VW5pZm9ybShuYW1lLCB2YWx1ZSwgZGF0YVR5cGUpO1xuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSB1bmlmb3JtVHlwZUZvclZhbHVlKFxuXHRcdHZhbHVlOiBudW1iZXIgfCBudW1iZXJbXSxcblx0XHRkYXRhVHlwZTogVW5pZm9ybURhdGFUeXBlLFxuXHQpIHtcblx0XHRpZiAoZGF0YVR5cGUgPT09ICdGTE9BVCcpIHtcblx0XHRcdGlmICghaXNOYU4odmFsdWUgYXMgbnVtYmVyKSB8fCAodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gRkxPQVRfMURfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdGlmICgodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0XHRyZXR1cm4gRkxPQVRfMkRfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdGlmICgodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRyZXR1cm4gRkxPQVRfM0RfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdGlmICgodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gNCkge1xuXHRcdFx0XHRyZXR1cm4gRkxPQVRfNERfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB1bmlmb3JtIHZhbHVlOiAke3ZhbHVlfWApO1xuXHRcdH0gZWxzZSBpZiAoZGF0YVR5cGUgPT09ICdJTlQnKSB7XG5cdFx0XHRpZiAoIWlzTmFOKHZhbHVlIGFzIG51bWJlcikgfHwgKHZhbHVlIGFzIG51bWJlcltdKS5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0cmV0dXJuIElOVF8xRF9VTklGT1JNO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCh2YWx1ZSBhcyBudW1iZXJbXSkubGVuZ3RoID09PSAyKSB7XG5cdFx0XHRcdHJldHVybiBJTlRfMkRfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdGlmICgodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRyZXR1cm4gSU5UXzNEX1VOSUZPUk07XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHZhbHVlIGFzIG51bWJlcltdKS5sZW5ndGggPT09IDQpIHtcblx0XHRcdFx0cmV0dXJuIElOVF80RF9VTklGT1JNO1xuXHRcdFx0fVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHVuaWZvcm0gdmFsdWU6ICR7dmFsdWV9YCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB1bmlmb3JtIGRhdGEgdHlwZTogJHtkYXRhVHlwZX1gKTtcblx0XHR9XG5cdH1cblxuXHRzZXRVbmlmb3JtKFxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXG5cdFx0dmFsdWU6IFVuaWZvcm1WYWx1ZVR5cGUsXG5cdFx0ZGF0YVR5cGU6IFVuaWZvcm1EYXRhVHlwZSxcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JDYWxsYmFjaywgcHJvZ3JhbSwgdW5pZm9ybXMgfSA9IHRoaXM7XG5cblx0XHRpZiAoIXByb2dyYW0pIHtcblx0XHRcdGVycm9yQ2FsbGJhY2soYFByb2dyYW0gbm90IGluaXRlZC5gKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBTZXQgYWN0aXZlIHByb2dyYW0uXG5cdFx0Z2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcblx0XG5cdFx0Y29uc3QgdHlwZSA9IHRoaXMudW5pZm9ybVR5cGVGb3JWYWx1ZSh2YWx1ZSwgZGF0YVR5cGUpO1xuXHRcdGlmICghdW5pZm9ybXNbdW5pZm9ybU5hbWVdKSB7XG5cdFx0XHQvLyBJbml0IHVuaWZvcm0gaWYgbmVlZGVkLlxuXHRcdFx0Y29uc3QgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgdW5pZm9ybU5hbWUpO1xuXHRcdFx0aWYgKCFsb2NhdGlvbikge1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGBDb3VsZCBub3QgaW5pdCB1bmlmb3JtICR7dW5pZm9ybU5hbWV9IGZvciBwcm9ncmFtICR7dGhpcy5uYW1lfS5cbkNoZWNrIHRoYXQgdW5pZm9ybSBpcyBwcmVzZW50IGluIHNoYWRlciBjb2RlLCB1bnVzZWQgdW5pZm9ybXMgbWF5IGJlIHJlbW92ZWQgYnkgY29tcGlsZXIuXG5BbHNvIGNoZWNrIHRoYXQgdW5pZm9ybSB0eXBlIGluIHNoYWRlciBjb2RlIG1hdGNoZXMgdHlwZSAke3R5cGV9LlxuRXJyb3IgY29kZTogJHtnbC5nZXRFcnJvcigpfS5gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dW5pZm9ybXNbdW5pZm9ybU5hbWVdID0ge1xuXHRcdFx0XHRsb2NhdGlvbixcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCB1bmlmb3JtID0gdW5pZm9ybXNbdW5pZm9ybU5hbWVdO1xuXHRcdC8vIENoZWNrIHRoYXQgdHlwZXMgbWF0Y2ggcHJldmlvdXNseSBzZXQgdW5pZm9ybS5cblx0XHRpZiAodW5pZm9ybS50eXBlICE9IHR5cGUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5pZm9ybSAke3VuaWZvcm1OYW1lfSBjYW5ub3QgY2hhbmdlIGZyb20gdHlwZSAke3VuaWZvcm0udHlwZX0gdG8gdHlwZSAke3R5cGV9LmApO1xuXHRcdH1cblx0XHRjb25zdCB7IGxvY2F0aW9uIH0gPSB1bmlmb3JtO1xuXG5cdFx0Ly8gU2V0IHVuaWZvcm0uXG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC91bmlmb3JtXG5cdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRjYXNlIEZMT0FUXzFEX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsdWUgYXMgbnVtYmVyKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEZMT0FUXzJEX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm0yZnYobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcltdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEZMT0FUXzNEX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm0zZnYobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcltdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEZMT0FUXzREX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm00ZnYobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcltdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIElOVF8xRF9VTklGT1JNOlxuXHRcdFx0XHRnbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBJTlRfMkRfVU5JRk9STTpcblx0XHRcdFx0Z2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdmFsdWUgYXMgbnVtYmVyW10pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgSU5UXzNEX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcltdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIElOVF80RF9VTklGT1JNOlxuXHRcdFx0XHRnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2YWx1ZSBhcyBudW1iZXJbXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHVuaWZvcm0gdHlwZTogJHt0eXBlfS5gKTtcblx0XHR9XG5cdH07XG5cblx0c2V0VmVydGV4QXR0cmlidXRlKFxuXHRcdGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcblx0XHRkYXRhVHlwZTogQXR0cmlidXRlRGF0YVR5cGUsXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yQ2FsbGJhY2ssIHByb2dyYW0sIGF0dHJpYnV0ZXMsIGF0dHJpYnV0ZU5hbWVzIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCFwcm9ncmFtKSB7XG5cdFx0XHRlcnJvckNhbGxiYWNrKGBQcm9ncmFtIG5vdCBpbml0ZWQuYCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCFpc1dlYkdMMihnbCkpIHtcblx0XHRcdC8vIFRPRE86IHByb3ZpZGUgYSBmYWxsYmFjayBoZXJlLlxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdNdXN0IHVzZSBhIHdlYmdsMiBjb250ZXh0IGZvciB0cmFuc2Zvcm0gZmVlZGJhY2suJyk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IGFjdGl2ZSBwcm9ncmFtLlxuXHRcdGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7XG5cdFxuXHRcdGlmICghYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkge1xuXHRcdFx0Ly8gSW5pdCB1bmlmb3JtIGlmIG5lZWRlZC5cblx0XHRcdGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgYXR0cmlidXRlTmFtZSk7XG5cdFx0XHRpZiAoIWxvY2F0aW9uKSB7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2soXG5gQ291bGQgbm90IGluaXQgdmVydGV4QXR0cmlidXRlICR7YXR0cmlidXRlTmFtZX0uXG5FcnJvciBjb2RlOiAke2dsLmdldEVycm9yKCl9LmApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdID0ge1xuXHRcdFx0XHRsb2NhdGlvbixcblx0XHRcdFx0dHlwZTogZGF0YVR5cGUsXG5cdFx0XHR9XG5cdFx0XHRhdHRyaWJ1dGVOYW1lcy5wdXNoKGF0dHJpYnV0ZU5hbWUpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XG5cdFx0Ly8gQ2hlY2sgdGhhdCB0eXBlcyBtYXRjaCBwcmV2aW91c2x5IHNldCB1bmlmb3JtLlxuXHRcdGlmIChhdHRyaWJ1dGUudHlwZSAhPSBkYXRhVHlwZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBWZXJ0ZXggYXR0cmlidXRlICR7YXR0cmlidXRlTmFtZX0gY2Fubm90IGNoYW5nZSBmcm9tIHR5cGUgJHthdHRyaWJ1dGUudHlwZX0gdG8gdHlwZSAke2RhdGFUeXBlfS5gKTtcblx0XHR9XG5cdH1cblxuXHRnZXRBdHRyaWJ1dGVMb2NhdGlvbihpbmRleDogbnVtYmVyKSB7XG5cdFx0Y29uc3QgeyBhdHRyaWJ1dGVzLCBhdHRyaWJ1dGVOYW1lcywgbmFtZSB9ID0gdGhpcztcblx0XHRjb25zdCBhdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlTmFtZXNbaW5kZXhdO1xuXHRcdGlmICghYXR0cmlidXRlTmFtZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGF0dHJpYnV0ZSBpbmRleCAke2luZGV4fSBmb3IgcHJvZ3JhbSAke25hbWV9LCBjdXJyZW50IGF0dHJpYnV0ZXM6ICR7YXR0cmlidXRlTmFtZXMuam9pbignLCAnKX0uYCk7XG5cdFx0fVxuXHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XG5cdFx0aWYgKCFhdHRyaWJ1dGUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhdHRyaWJ1dGUgJHthdHRyaWJ1dGVOYW1lfSBmb3IgcHJvZ3JhbSAke25hbWV9LmApO1xuXHRcdH1cblx0XHRyZXR1cm4gYXR0cmlidXRlLmxvY2F0aW9uO1xuXHR9XG5cblx0ZGVzdHJveSgpIHtcblx0XHRjb25zdCB7IGdsLCBwcm9ncmFtLCBzaGFkZXJzIH0gPSB0aGlzO1xuXHRcdGlmIChwcm9ncmFtKSBnbC5kZWxldGVQcm9ncmFtKHByb2dyYW0pO1xuXHRcdC8vIFVuYmluZCBhbGwgZGF0YSBiZWZvcmUgZGVsZXRpbmcuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzaGFkZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHQvLyBGcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvZGVsZXRlU2hhZGVyXG5cdFx0XHQvLyBUaGlzIG1ldGhvZCBoYXMgbm8gZWZmZWN0IGlmIHRoZSBzaGFkZXIgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkXG5cdFx0XHRnbC5kZWxldGVTaGFkZXIoc2hhZGVyc1tpXSk7XG5cdFx0fVxuXHRcdHNoYWRlcnMubGVuZ3RoID0gMDtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0ZGVsZXRlIHRoaXMuZ2w7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRlbGV0ZSB0aGlzLmVycm9yQ2FsbGJhY2s7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRlbGV0ZSB0aGlzLnByb2dyYW07XG5cdH1cbn1cbiIsImNvbnN0IGV4dGVuc2lvbnM6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL09FU190ZXh0dXJlX2Zsb2F0XG4vLyBGbG9hdCBpcyBwcm92aWRlZCBieSBkZWZhdWx0IGluIFdlYkdMMiBjb250ZXh0cy5cbi8vIFRoaXMgZXh0ZW5zaW9uIGltcGxpY2l0bHkgZW5hYmxlcyB0aGUgV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0IGV4dGVuc2lvbiAoaWYgc3VwcG9ydGVkKSwgd2hpY2ggYWxsb3dzIHJlbmRlcmluZyB0byAzMi1iaXQgZmxvYXRpbmctcG9pbnQgY29sb3IgYnVmZmVycy5cbmV4cG9ydCBjb25zdCBPRVNfVEVYVFVSRV9GTE9BVCA9ICdPRVNfdGV4dHVyZV9mbG9hdCc7XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvT0VTX3RleHR1cmVfaGFsZl9mbG9hdFxuLy8gSGFsZiBmbG9hdCBpcyBzdXBwb3J0ZWQgYnkgbW9kZXJuIG1vYmlsZSBicm93c2VycywgZmxvYXQgbm90IHlldCBzdXBwb3J0ZWQuXG4vLyBIYWxmIGZsb2F0IGlzIHByb3ZpZGVkIGJ5IGRlZmF1bHQgZm9yIFdlYmdsMiBjb250ZXh0cy5cbi8vIFRoaXMgZXh0ZW5zaW9uIGltcGxpY2l0bHkgZW5hYmxlcyB0aGUgRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0IGV4dGVuc2lvbiAoaWYgc3VwcG9ydGVkKSwgd2hpY2ggYWxsb3dzIHJlbmRlcmluZyB0byAxNi1iaXQgZmxvYXRpbmcgcG9pbnQgZm9ybWF0cy5cbmV4cG9ydCBjb25zdCBPRVNfVEVYVFVSRV9IQUxGX0ZMT0FUID0gJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnO1xuLy8gVE9ETzogU2VlbXMgbGlrZSBsaW5lYXIgZmlsdGVyaW5nIG9mIGZsb2F0cyBtYXkgYmUgc3VwcG9ydGVkIGluIHNvbWUgYnJvd3NlcnMgd2l0aG91dCB0aGVzZSBleHRlbnNpb25zP1xuLy8gaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvT3BlbkdML2V4dGVuc2lvbnMvT0VTL09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhci50eHRcbmV4cG9ydCBjb25zdCBPRVNfVEVYVFVSRV9GTE9BVF9MSU5FQVIgPSAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJztcbmV4cG9ydCBjb25zdCBPRVNfVEVYVFVSRV9IQWxGX0ZMT0FUX0xJTkVBUiA9ICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcic7XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV0VCR0xfZGVwdGhfdGV4dHVyZVxuLy8gQWRkcyBnbC5VTlNJR05FRF9TSE9SVCwgZ2wuVU5TSUdORURfSU5UIHR5cGVzIHRvIHRleHRJbWFnZTJEIGluIFdlYkdMMS4wXG5leHBvcnQgY29uc3QgV0VCR0xfREVQVEhfVEVYVFVSRSA9ICdXRUJHTF9kZXB0aF90ZXh0dXJlJztcbi8vIEVYVF9DT0xPUl9CVUZGRVJfRkxPQVQgYWRkcyBhYmlsaXR5IHRvIHJlbmRlciB0byBhIHZhcmlldHkgb2YgZmxvYXRpbmcgcHQgdGV4dHVyZXMuXG4vLyBUaGlzIGlzIG5lZWRlZCBmb3IgdGhlIFdlYkdMMiBjb250ZXh0cyB0aGF0IGRvIG5vdCBzdXBwb3J0IE9FU19URVhUVVJFX0ZMT0FUIC8gT0VTX1RFWFRVUkVfSEFMRl9GTE9BVCBleHRlbnNpb25zLlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VYVF9jb2xvcl9idWZmZXJfZmxvYXRcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM0MjYyNDkzL2ZyYW1lYnVmZmVyLWluY29tcGxldGUtYXR0YWNobWVudC1mb3ItdGV4dHVyZS13aXRoLWludGVybmFsLWZvcm1hdFxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzYxMDkzNDcvZnJhbWVidWZmZXItaW5jb21wbGV0ZS1hdHRhY2htZW50LW9ubHktaGFwcGVucy1vbi1hbmRyb2lkLXctZmlyZWZveFxuZXhwb3J0IGNvbnN0IEVYVF9DT0xPUl9CVUZGRVJfRkxPQVQgPSAnRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHRlbnNpb24oXG5cdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRleHRlbnNpb25OYW1lOiBzdHJpbmcsXG5cdGVycm9yQ2FsbGJhY2s6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQsXG5cdG9wdGlvbmFsID0gZmFsc2UsXG4pIHtcblx0Ly8gQ2hlY2sgaWYgd2UndmUgYWxyZWFkeSBsb2FkZWQgdGhlIGV4dGVuc2lvbi5cblx0aWYgKGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV07XG5cblx0bGV0IGV4dGVuc2lvbjtcblx0dHJ5IHtcblx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oZXh0ZW5zaW9uTmFtZSk7XG5cdH0gY2F0Y2ggKGUpIHt9XG5cdGlmIChleHRlbnNpb24pIHtcblx0XHQvLyBDYWNoZSB0aGlzIGV4dGVuc2lvbi5cblx0XHRleHRlbnNpb25zW2V4dGVuc2lvbk5hbWVdID0gZXh0ZW5zaW9uO1xuXHRcdGNvbnNvbGUubG9nKGBMb2FkZWQgZXh0ZW5zaW9uOiAke2V4dGVuc2lvbk5hbWV9LmApO1xuXHR9IGVsc2Uge1xuXHRcdGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV0gPSBmYWxzZTsgLy8gQ2FjaGUgdGhlIGJhZCBleHRlbnNpb24gbG9va3VwLlxuXHRcdGNvbnNvbGUud2FybihgVW5zdXBwb3J0ZWQgJHtvcHRpb25hbCA/ICdvcHRpb25hbCAnIDogJyd9ZXh0ZW5zaW9uOiAke2V4dGVuc2lvbk5hbWV9LmApO1xuXHR9XG5cdC8vIElmIHRoZSBleHRlbnNpb24gaXMgbm90IG9wdGlvbmFsLCB0aHJvdyBlcnJvci5cblx0aWYgKCFleHRlbnNpb24gJiYgIW9wdGlvbmFsKSB7XG5cdFx0ZXJyb3JDYWxsYmFjayhgUmVxdWlyZWQgZXh0ZW5zaW9uIHVuc3VwcG9ydGVkIGJ5IHRoaXMgZGV2aWNlIC8gYnJvd3NlcjogJHtleHRlbnNpb25OYW1lfS5gKTtcblx0fVxuXHRyZXR1cm4gZXh0ZW5zaW9uO1xufSIsIi8vIENvcGllZCBmcm9tIGh0dHA6Ly93ZWJnbGZ1bmRhbWVudGFscy5vcmcvd2ViZ2wvbGVzc29ucy93ZWJnbC1ib2lsZXJwbGF0ZS5odG1sXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZVNoYWRlcihcblx0Z2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsXG5cdGVycm9yQ2FsbGJhY2s6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQsXG5cdHNoYWRlclNvdXJjZTogc3RyaW5nLFxuXHRzaGFkZXJUeXBlOiBudW1iZXIsXG5cdHByb2dyYW1OYW1lPzogc3RyaW5nLFxuKSB7XG5cdC8vIENyZWF0ZSB0aGUgc2hhZGVyIG9iamVjdFxuXHRjb25zdCBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoc2hhZGVyVHlwZSk7XG5cdGlmICghc2hhZGVyKSB7XG5cdFx0ZXJyb3JDYWxsYmFjaygnVW5hYmxlIHRvIGluaXQgZ2wgc2hhZGVyLicpO1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU2V0IHRoZSBzaGFkZXIgc291cmNlIGNvZGUuXG5cdGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNoYWRlclNvdXJjZSk7XG5cblx0Ly8gQ29tcGlsZSB0aGUgc2hhZGVyXG5cdGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuXHQvLyBDaGVjayBpZiBpdCBjb21waWxlZFxuXHRjb25zdCBzdWNjZXNzID0gZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpO1xuXHRpZiAoIXN1Y2Nlc3MpIHtcblx0XHQvLyBTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgY29tcGlsYXRpb24gLSBwcmludCB0aGUgZXJyb3IuXG5cdFx0ZXJyb3JDYWxsYmFjayhgQ291bGQgbm90IGNvbXBpbGUgJHtzaGFkZXJUeXBlID09PSBnbC5GUkFHTUVOVF9TSEFERVIgPyAnZnJhZ21lbnQnIDogJ3ZlcnRleCd9XG5cdFx0XHQgc2hhZGVyJHtwcm9ncmFtTmFtZSA/IGAgZm9yIHByb2dyYW0gJHtwcm9ncmFtTmFtZX1gIDogJyd9OiAke2dsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKX0uYCk7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0cmV0dXJuIHNoYWRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzV2ViR0wyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KSB7XG5cdC8vIFRPRE86IEknbSBzdXJlIHRoZXJlIGlzIGEgYmV0dGVyIHdheSB0byBjaGVjayB0aGlzLlxuXHRyZXR1cm4gISEoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuSEFMRl9GTE9BVDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUG93ZXJPZjIodmFsdWU6IG51bWJlcikge1xuXHRyZXR1cm4gKHZhbHVlICYgKHZhbHVlIC0gMSkpID09IDA7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIi8vIFZlcnRleCBzaGFkZXIgZm9yIGZ1bGxzY3JlZW4gcXVhZC5cXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxuYXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xcblxcbnVuaWZvcm0gdmVjMiB1X3NjYWxlO1xcbnVuaWZvcm0gdmVjMiB1X3RyYW5zbGF0aW9uO1xcblxcbnZhcnlpbmcgdmVjMiB2X1VWX2xvY2FsO1xcbnZhcnlpbmcgdmVjMiB2X1VWO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHQvLyBDYWxjdWxhdGUgVVYgY29vcmRpbmF0ZXMgb2YgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXFxuXFx0dl9VVl9sb2NhbCA9IDAuNSAqIChhUG9zaXRpb24gKyAxLjApO1xcblxcblxcdC8vIEFwcGx5IHRyYW5zZm9ybWF0aW9ucy5cXG5cXHR2ZWMyIHBvc2l0aW9uID0gdV9zY2FsZSAqIGFQb3NpdGlvbiArIHVfdHJhbnNsYXRpb247XFxuXFxuXFx0Ly8gQ2FsY3VsYXRlIGEgZ2xvYmFsIHV2IGZvciB0aGUgdmlld3BvcnQuXFxuXFx0dl9VViA9IDAuNSAqIChwb3NpdGlvbiArIDEuMCk7XFxuXFxuXFx0Ly8gQ2FsY3VsYXRlIHZlcnRleCBwb3NpdGlvbi5cXG5cXHRnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDAsIDEpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxudmFyeWluZyB2ZWMyIHZfVVY7XFxudW5pZm9ybSBzYW1wbGVyMkQgdV9zdGF0ZTtcXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVfc3RhdGUsIHZfVVYpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIvKipcXG4gKiBSZXR1cm5zIGFjY3VyYXRlIE1PRCB3aGVuIGFyZ3VtZW50cyBhcmUgYXBwcm94aW1hdGUgaW50ZWdlcnMuXFxuICovXFxuZmxvYXQgbW9kSShmbG9hdCBhLCBmbG9hdCBiKSB7XFxuICAgIGZsb2F0IG0gPSBhIC0gZmxvb3IoKGEgKyAwLjUpIC8gYikgKiBiO1xcbiAgICByZXR1cm4gZmxvb3IobSArIDAuNSk7XFxufVxcblxcbi8vIFZlcnRleCBzaGFkZXIgZm9yIHBvaW50cy5cXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIGludDtcXG5cXG4vLyBDYW5ub3QgdXNlIGludCB2ZXJ0ZXggYXR0cmlidXRlczogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc4NzQ5ODMvd2ViZ2wtaG93LXRvLXVzZS1pbnRlZ2VyLWF0dHJpYnV0ZXMtaW4tZ2xzbFxcbmF0dHJpYnV0ZSBmbG9hdCBhSW5kZXg7IC8vIEluZGV4IG9mIHBvaW50LlxcblxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfcG9zaXRpb25zOyAvLyBUZXh0dXJlIGxvb2t1cCB3aXRoIHBvc2l0aW9uIGRhdGEuXFxudW5pZm9ybSB2ZWMyIHVfcG9zaXRpb25EaW1lbnNpb25zO1xcbnVuaWZvcm0gdmVjMiB1X3NjYWxlO1xcbnVuaWZvcm0gZmxvYXQgdV9wb2ludFNpemU7XFxuXFxudmFyeWluZyB2ZWMyIHZfVVY7XFxudmFyeWluZyB2ZWMyIHZQYXJ0aWNsZVVWO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHQvLyBDYWxjdWxhdGUgYSB1diBiYXNlZCBvbiB0aGUgcG9pbnQncyBpbmRleCBhdHRyaWJ1dGUuXFxuXFx0dlBhcnRpY2xlVVYgPSB2ZWMyKG1vZEkoYUluZGV4LCB1X3Bvc2l0aW9uRGltZW5zaW9ucy54KSwgZmxvb3IoZmxvb3IoYUluZGV4ICsgMC41KSAvIHVfcG9zaXRpb25EaW1lbnNpb25zLngpKSAvIHVfcG9zaXRpb25EaW1lbnNpb25zO1xcblxcblxcdC8vIENhbGN1bGF0ZSBhIGdsb2JhbCB1diBmb3IgdGhlIHZpZXdwb3J0LlxcblxcdC8vIExvb2t1cCB2ZXJ0ZXggcG9zaXRpb24gYW5kIHNjYWxlIHRvIFswLCAxXSByYW5nZS5cXG5cXHR2X1VWID0gdGV4dHVyZTJEKHVfcG9zaXRpb25zLCB2UGFydGljbGVVVikueHkgKiB1X3NjYWxlO1xcblxcblxcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpbiBbLTEsIDFdIHJhbmdlLlxcblxcdHZlYzIgcG9zaXRpb24gPSB2X1VWICogMi4wIC0gMS4wO1xcblxcblxcdGdsX1BvaW50U2l6ZSA9IHVfcG9pbnRTaXplO1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxufVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIi8qKlxcbiAqIFJldHVybnMgYWNjdXJhdGUgTU9EIHdoZW4gYXJndW1lbnRzIGFyZSBhcHByb3hpbWF0ZSBpbnRlZ2Vycy5cXG4gKi9cXG5mbG9hdCBtb2RJKGZsb2F0IGEsIGZsb2F0IGIpIHtcXG4gICAgZmxvYXQgbSA9IGEgLSBmbG9vcigoYSArIDAuNSkgLyBiKSAqIGI7XFxuICAgIHJldHVybiBmbG9vcihtICsgMC41KTtcXG59XFxuXFxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbnByZWNpc2lvbiBoaWdocCBpbnQ7XFxuXFxuLy8gQ2Fubm90IHVzZSBpbnQgdmVydGV4IGF0dHJpYnV0ZXM6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI3ODc0OTgzL3dlYmdsLWhvdy10by11c2UtaW50ZWdlci1hdHRyaWJ1dGVzLWluLWdsc2xcXG5hdHRyaWJ1dGUgZmxvYXQgYUluZGV4OyAvLyBJbmRleCBvZiBwb2ludC5cXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1X3Bvc2l0aW9uczsgLy8gVGV4dHVyZSBsb29rdXAgd2l0aCBwb3NpdGlvbiBkYXRhLlxcbnVuaWZvcm0gdmVjMiB1X3Bvc2l0aW9uRGltZW5zaW9ucztcXG51bmlmb3JtIHZlYzIgdV9zY2FsZTtcXG51bmlmb3JtIGZsb2F0IHVfcG9pbnRTaXplO1xcblxcbnZhcnlpbmcgdmVjMiB2X1VWO1xcbnZhcnlpbmcgdmVjMiB2UGFydGljbGVVVjtcXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Ly8gQ2FsY3VsYXRlIGEgdXYgYmFzZWQgb24gdGhlIHBvaW50J3MgaW5kZXggYXR0cmlidXRlLlxcblxcdHZQYXJ0aWNsZVVWID0gdmVjMihtb2RJKGFJbmRleCwgdV9wb3NpdGlvbkRpbWVuc2lvbnMueCksIGZsb29yKGZsb29yKGFJbmRleCArIDAuNSkgLyB1X3Bvc2l0aW9uRGltZW5zaW9ucy54KSkgLyB1X3Bvc2l0aW9uRGltZW5zaW9ucztcXG5cXG5cXHQvLyBDYWxjdWxhdGUgYSBnbG9iYWwgdXYgZm9yIHRoZSB2aWV3cG9ydC5cXG5cXHQvLyBMb29rdXAgdmVydGV4IHBvc2l0aW9uIGFuZCBzY2FsZSB0byBbMCwgMV0gcmFuZ2UuXFxuXFx0Ly8gV2UgaGF2ZSBwYWNrZWQgYSAyRCBkaXNwbGFjZW1lbnQgd2l0aCB0aGUgcG9zaXRpb24uXFxuXFx0dmVjNCBwb3NpdGlvbkRhdGEgPSB0ZXh0dXJlMkQodV9wb3NpdGlvbnMsIHZQYXJ0aWNsZVVWKTtcXG5cXHR2ZWMyIHBvc2l0aW9uQWJzb2x1dGUgPSBwb3NpdGlvbkRhdGEucmcgKyBwb3NpdGlvbkRhdGEuYmE7XFxuXFx0dl9VViA9IHBvc2l0aW9uQWJzb2x1dGUgKiB1X3NjYWxlO1xcblxcblxcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpbiBbLTEsIDFdIHJhbmdlLlxcblxcdHZlYzIgcG9zaXRpb24gPSB2X1VWICogMi4wIC0gMS4wO1xcblxcblxcdGdsX1BvaW50U2l6ZSA9IHVfcG9pbnRTaXplO1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxufVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIi8vIEZyYWdtZW50IHNoYWRlciB0aGF0IGRyYXdzIGEgc2luZ2xlIGNvbG9yIChmb3IgdGVzdGluZykuXFxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcblxcbnVuaWZvcm0gdmVjMyB1X2NvbG9yO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHVfY29sb3IsIDEpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIvLyBUT0RPOiB0aGlzIGlzIHN0aWxsIG9mZiBieSBhIGZhY3RvciBvZiAyIHNvbWV0aW1lcy5cXG5cXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxudW5pZm9ybSB2ZWMyIHVfZmxvYXRUZXh0dXJlRGltO1xcbnVuaWZvcm0gc2FtcGxlcjJEIHVfZmxvYXRUZXh0dXJlO1xcbnVuaWZvcm0gZmxvYXQgdV9udW1GbG9hdENvbXBvbmVudHM7XFxuXFxuZmxvYXQgc2hpZnRfcmlnaHQgKGZsb2F0IHYsIGZsb2F0IGFtdCkge1xcblxcdHYgPSBmbG9vcih2KSArIDAuNTtcXG5cXHRyZXR1cm4gZmxvb3IodiAvIGV4cDIoYW10KSk7XFxufVxcbmZsb2F0IHNoaWZ0X2xlZnQgKGZsb2F0IHYsIGZsb2F0IGFtdCkge1xcblxcdHJldHVybiBmbG9vcih2ICogZXhwMihhbXQpICsgMC41KTtcXG59XFxuZmxvYXQgbWFza19sYXN0IChmbG9hdCB2LCBmbG9hdCBiaXRzKSB7XFxuXFx0cmV0dXJuIG1vZCh2LCBzaGlmdF9sZWZ0KDEuMCwgYml0cykpO1xcbn1cXG5mbG9hdCBleHRyYWN0X2JpdHMgKGZsb2F0IG51bSwgZmxvYXQgZnJvbSwgZmxvYXQgdG8pIHtcXG5cXHRmcm9tID0gZmxvb3IoZnJvbSArIDAuNSk7IHRvID0gZmxvb3IodG8gKyAwLjUpO1xcblxcdHJldHVybiBtYXNrX2xhc3Qoc2hpZnRfcmlnaHQobnVtLCBmcm9tKSwgdG8gLSBmcm9tKTtcXG59XFxudmVjNCBlbmNvZGVfZmxvYXQgKGZsb2F0IHZhbCkge1xcblxcdGlmICh2YWwgPT0gMC4wKSByZXR1cm4gdmVjNCgwLCAwLCAwLCAwKTtcXG5cXHRmbG9hdCBzaWduID0gdmFsID4gMC4wID8gMC4wIDogMS4wO1xcblxcdHZhbCA9IGFicyh2YWwpO1xcblxcdGZsb2F0IGV4cG9uZW50ID0gZmxvb3IobG9nMih2YWwpKTtcXG5cXHRmbG9hdCBiaWFzZWRfZXhwb25lbnQgPSBleHBvbmVudCArIDEyNy4wO1xcblxcdGZsb2F0IGZyYWN0aW9uID0gKCh2YWwgLyBleHAyKGV4cG9uZW50KSkgLSAxLjApICogODM4ODYwOC4wO1xcblxcdGZsb2F0IHQgPSBiaWFzZWRfZXhwb25lbnQgLyAyLjA7XFxuXFx0ZmxvYXQgbGFzdF9iaXRfb2ZfYmlhc2VkX2V4cG9uZW50ID0gZnJhY3QodCkgKiAyLjA7XFxuXFx0ZmxvYXQgcmVtYWluaW5nX2JpdHNfb2ZfYmlhc2VkX2V4cG9uZW50ID0gZmxvb3IodCk7XFxuXFx0ZmxvYXQgYnl0ZTQgPSBleHRyYWN0X2JpdHMoZnJhY3Rpb24sIDAuMCwgOC4wKSAvIDI1NS4wO1xcblxcdGZsb2F0IGJ5dGUzID0gZXh0cmFjdF9iaXRzKGZyYWN0aW9uLCA4LjAsIDE2LjApIC8gMjU1LjA7XFxuXFx0ZmxvYXQgYnl0ZTIgPSAobGFzdF9iaXRfb2ZfYmlhc2VkX2V4cG9uZW50ICogMTI4LjAgKyBleHRyYWN0X2JpdHMoZnJhY3Rpb24sIDE2LjAsIDIzLjApKSAvIDI1NS4wO1xcblxcdGZsb2F0IGJ5dGUxID0gKHNpZ24gKiAxMjguMCArIHJlbWFpbmluZ19iaXRzX29mX2JpYXNlZF9leHBvbmVudCkgLyAyNTUuMDtcXG5cXHRyZXR1cm4gdmVjNChieXRlNCwgYnl0ZTMsIGJ5dGUyLCBieXRlMSk7XFxufVxcbnZvaWQgbWFpbigpe1xcblxcdHZlYzIgZnJhZ0Nvb3JkID0gZ2xfRnJhZ0Nvb3JkLnh5O1xcblxcdGZsb2F0IHRleHR1cmVYY29vcmQgPSBmbG9vcigoZnJhZ0Nvb3JkLnggLSAwLjUpL3VfbnVtRmxvYXRDb21wb25lbnRzKzAuMDAwMSkgKyAwLjU7XFxuXFx0dmVjNCBkYXRhID0gdGV4dHVyZTJEKHVfZmxvYXRUZXh0dXJlLCB2ZWMyKHRleHR1cmVYY29vcmQsIGZyYWdDb29yZC55KS91X2Zsb2F0VGV4dHVyZURpbSk7XFxuXFx0aW50IHRleHR1cmVJbmRleCA9IGludChmbG9vcihtb2QoZnJhZ0Nvb3JkLngtMC41KzAuMDAwMSwgdV9udW1GbG9hdENvbXBvbmVudHMpKSk7XFxuXFx0aWYgKHRleHR1cmVJbmRleCA9PSAwKSBnbF9GcmFnQ29sb3IgPSBlbmNvZGVfZmxvYXQoZGF0YVswXSk7XFxuXFx0ZWxzZSBpZiAodGV4dHVyZUluZGV4ID09IDEpIGdsX0ZyYWdDb2xvciA9IGVuY29kZV9mbG9hdChkYXRhWzFdKTtcXG5cXHRlbHNlIGlmICh0ZXh0dXJlSW5kZXggPT0gMikgZ2xfRnJhZ0NvbG9yID0gZW5jb2RlX2Zsb2F0KGRhdGFbMl0pO1xcblxcdGVsc2UgaWYgKHRleHR1cmVJbmRleCA9PSAzKSBnbF9GcmFnQ29sb3IgPSBlbmNvZGVfZmxvYXQoZGF0YVszXSk7XFxufVwiIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBHTENvbXB1dGUgfSBmcm9tICcuL0dMQ29tcHV0ZSc7XG5jb25zdCBTaW5nbGVDb2xvckZyYWdTaGFkZXIgPSByZXF1aXJlKCcuL2tlcm5lbHMvU2luZ2xlQ29sb3JGcmFnU2hhZGVyLmdsc2wnKTtcbmNvbnN0IFBvaW50c1ZlcnRleFNoYWRlciA9IHJlcXVpcmUoJy4va2VybmVscy9Qb2ludHNWZXJ0ZXhTaGFkZXIuZ2xzbCcpO1xuY29uc3QgUG9pbnRzVmVydGV4U2hhZGVyV2l0aERpc3BsYWNlbWVudCA9IHJlcXVpcmUoJy4va2VybmVscy9Qb2ludHNWZXJ0ZXhTaGFkZXJXaXRoRGlzcGxhY2VtZW50Lmdsc2wnKTtcbmNvbnN0IFBhc3NUaHJvdWdoRnJhZ21lbnRTaGFkZXIgPSByZXF1aXJlKCcuL2tlcm5lbHMvUGFzc1Rocm91Z2hGcmFnbWVudFNoYWRlci5nbHNsJyk7XG5cbmV4cG9ydCB7XG5cdEdMQ29tcHV0ZSxcblx0U2luZ2xlQ29sb3JGcmFnU2hhZGVyLFxuXHRQb2ludHNWZXJ0ZXhTaGFkZXIsXG5cdFBvaW50c1ZlcnRleFNoYWRlcldpdGhEaXNwbGFjZW1lbnQsXG5cdFBhc3NUaHJvdWdoRnJhZ21lbnRTaGFkZXIsXG59OyJdLCJzb3VyY2VSb290IjoiIn0=