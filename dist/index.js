!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.GLCompute=t():e.GLCompute=t()}(self,(function(){return(()=>{var e={501:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Float16Array:()=>_e,getFloat16:()=>Te,hfround:()=>p,setFloat16:()=>ge});const n=new ArrayBuffer(4),a=new Float32Array(n),o=new Uint32Array(n),i=new Uint32Array(512),s=new Uint32Array(512);for(let e=0;e<256;++e){const t=e-127;t<-27?(i[0|e]=0,i[256|e]=32768,s[0|e]=24,s[256|e]=24):t<-14?(i[0|e]=1024>>-t-14,i[256|e]=1024>>-t-14|32768,s[0|e]=-t-1,s[256|e]=-t-1):t<=15?(i[0|e]=t+15<<10,i[256|e]=t+15<<10|32768,s[0|e]=13,s[256|e]=13):t<128?(i[0|e]=31744,i[256|e]=64512,s[0|e]=24,s[256|e]=24):(i[0|e]=31744,i[256|e]=64512,s[0|e]=13,s[256|e]=13)}function l(e){a[0]=e;const t=o[0],r=t>>23&511;return i[r]+((8388607&t)>>s[r])}const u=new Uint32Array(2048),f=new Uint32Array(64),c=new Uint32Array(64);u[0]=0;for(let e=1;e<1024;++e){let t=e<<13,r=0;for(;0==(8388608&t);)r-=8388608,t<<=1;t&=-8388609,r+=947912704,u[e]=t|r}for(let e=1024;e<2048;++e)u[e]=939524096+(e-1024<<13);f[0]=0;for(let e=1;e<31;++e)f[e]=e<<23;f[31]=1199570944,f[32]=2147483648;for(let e=33;e<63;++e)f[e]=2147483648+(e-32<<23);f[63]=3347054592,c[0]=0;for(let e=1;e<64;++e)c[e]=32===e?0:1024;function h(e){const t=e>>10;return o[0]=u[c[t]+(1023&e)]+f[t],a[0]}function p(e){return e=Number(e),Number.isFinite(e)&&0!==e?h(l(e)):e}var _=r(277),d="object"==typeof self&&self&&self.Object===Object&&self;const E=_.Z||d||Function("return this")(),T=E.Symbol;var g=Object.prototype,y=g.hasOwnProperty,b=g.toString,m=T?T.toStringTag:void 0;var A=Object.prototype.toString;var R=T?T.toStringTag:void 0;const v=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":R&&R in Object(e)?function(e){var t=y.call(e,m),r=e[m];try{e[m]=void 0;var n=!0}catch(e){}var a=b.call(e);return n&&(t?e[m]=r:delete e[m]),a}(e):function(e){return A.call(e)}(e)},L=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},F=E["__core-js_shared__"];var w,O=(w=/[^.]+$/.exec(F&&F.keys&&F.keys.IE_PROTO||""))?"Symbol(src)_1."+w:"";var N=Function.prototype.toString;var I=/^\[object .+?Constructor\]$/,U=Function.prototype,S=Object.prototype,D=U.toString,P=S.hasOwnProperty,x=RegExp("^"+D.call(P).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const G=function(e){return!(!L(e)||(t=e,O&&O in t))&&(function(e){if(!L(e))return!1;var t=v(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}(e)?x:I).test(function(e){if(null!=e){try{return N.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e));var t},B=function(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return G(r)?r:void 0},k=B(Object,"create");var C=Object.prototype.hasOwnProperty;var M=Object.prototype.hasOwnProperty;function H(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}H.prototype.clear=function(){this.__data__=k?k(null):{},this.size=0},H.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},H.prototype.get=function(e){var t=this.__data__;if(k){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return C.call(t,e)?t[e]:void 0},H.prototype.has=function(e){var t=this.__data__;return k?void 0!==t[e]:M.call(t,e)},H.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=k&&void 0===t?"__lodash_hash_undefined__":t,this};const j=H,V=function(e,t){for(var r=e.length;r--;)if((n=e[r][0])===(a=t)||n!=n&&a!=a)return r;var n,a;return-1};var X=Array.prototype.splice;function W(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}W.prototype.clear=function(){this.__data__=[],this.size=0},W.prototype.delete=function(e){var t=this.__data__,r=V(t,e);return!(r<0||(r==t.length-1?t.pop():X.call(t,r,1),--this.size,0))},W.prototype.get=function(e){var t=this.__data__,r=V(t,e);return r<0?void 0:t[r][1]},W.prototype.has=function(e){return V(this.__data__,e)>-1},W.prototype.set=function(e,t){var r=this.__data__,n=V(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this};const Y=W,z=B(E,"Map"),q=function(e,t){var r,n,a=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?a["string"==typeof t?"string":"hash"]:a.map};function Z(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Z.prototype.clear=function(){this.size=0,this.__data__={hash:new j,map:new(z||Y),string:new j}},Z.prototype.delete=function(e){var t=q(this,e).delete(e);return this.size-=t?1:0,t},Z.prototype.get=function(e){return q(this,e).get(e)},Z.prototype.has=function(e){return q(this,e).has(e)},Z.prototype.set=function(e,t){var r=q(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this};const $=Z;function K(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,a=t?t.apply(this,n):n[0],o=r.cache;if(o.has(a))return o.get(a);var i=e.apply(this,n);return r.cache=o.set(a,i)||o,i};return r.cache=new(K.Cache||$),r}K.Cache=$;const J=K,Q=Object.getOwnPropertyDescriptor(new Uint8Array(1),0).writable;function ee(e){let t="number"!=typeof e?Number(e):e;return Number.isNaN(t)&&(t=0),Math.trunc(t)}function te(e,t){const[r,n]=[Number.isNaN(e),Number.isNaN(t)];if(r&&n)return 0;if(r)return 1;if(n)return-1;if(e<t)return-1;if(e>t)return 1;if(0===e&&0===t){const[r,n]=[Object.is(e,0),Object.is(t,0)];if(!r&&n)return-1;if(r&&!n)return 1}return 0}function re(e){return e instanceof DataView}function ne(e){return"string"==typeof e&&e===ee(e)+""}var ae=r(730),oe=ae.Z&&ae.Z.isArrayBuffer;const ie=oe?(se=oe,function(e){return se(e)}):function(e){return function(e){return null!=e&&"object"==typeof e}(e)&&"[object ArrayBuffer]"==v(e)};var se;const le=function(){const e=new WeakMap;return t=>{let r=e.get(t);return r||(r=Object.create(null),e.set(t,r),r)}}();function ue(e){return e instanceof _e}function fe(e){if(!ue(e))throw new TypeError("This is not a Float16Array")}function ce(e){const t=e.length,r=new Array(t);for(let n=0;n<t;++n)r[n]=h(e[n]);return r}const he={apply(e,t,r){return ue(t)&&"function"==typeof(n=e)&&Ee.has(n)?Reflect.apply(e,le(t).target,r):Reflect.apply(e,t,r);var n}},pe={get(e,t){let r=null;if(Q||(r=e,e=le(r).target),ne(t))return Reflect.has(e,t)?h(Reflect.get(e,t)):void 0;{const n=null!==r&&Reflect.has(r,t)?Reflect.get(r,t):Reflect.get(e,t);if("function"!=typeof n)return n;let a=le(n).proxy;return void 0===a&&(a=le(n).proxy=new Proxy(n,he)),a}},set(e,t,r){let n=null;return Q||(n=e,e=le(n).target),ne(t)?Reflect.set(e,t,l(r)):null===n||Reflect.has(e,t)&&!Object.isFrozen(n)?Reflect.set(e,t,r):Reflect.set(n,t,r)}};Q||(pe.getPrototypeOf=e=>Reflect.getPrototypeOf(le(e).target),pe.setPrototypeOf=(e,t)=>Reflect.setPrototypeOf(le(e).target,t),pe.defineProperty=(e,t,r)=>{const n=le(e).target;return!Reflect.has(n,t)||Object.isFrozen(e)?Reflect.defineProperty(e,t,r):Reflect.defineProperty(n,t,r)},pe.deleteProperty=(e,t)=>{const r=le(e).target;return Reflect.has(e,t)?Reflect.deleteProperty(e,t):Reflect.deleteProperty(r,t)},pe.has=(e,t)=>Reflect.has(e,t)||Reflect.has(le(e).target,t),pe.isExtensible=e=>Reflect.isExtensible(e),pe.preventExtensions=e=>Reflect.preventExtensions(e),pe.getOwnPropertyDescriptor=(e,t)=>Reflect.getOwnPropertyDescriptor(e,t),pe.ownKeys=e=>Reflect.ownKeys(e));class _e extends Uint16Array{constructor(e,t,r){if(ue(e))super(le(e).target);else if(null===e||"object"!=typeof e||ie(e))switch(arguments.length){case 0:super();break;case 1:super(e);break;case 2:super(e,t);break;case 3:super(e,t,r);break;default:super(...arguments)}else{const t=Reflect.has(e,"length")||void 0===e[Symbol.iterator]?e:[...e],r=t.length;super(r);for(let e=0;e<r;++e)this[e]=l(t[e])}let n;if(Q)n=new Proxy(this,pe);else{const e=Object.create(null);le(e).target=this,n=new Proxy(e,pe)}return le(n).target=this,le(this).proxy=n,n}static from(e,...t){if(0===t.length)return new _e(Uint16Array.from(e,l).buffer);const r=t[0],n=t[1];return new _e(Uint16Array.from(e,(function(e,...t){return l(r.call(this,e,...t))}),n).buffer)}static of(...e){return new _e(e)}*[Symbol.iterator](){for(const e of super[Symbol.iterator]())yield h(e)}keys(){return super.keys()}*values(){for(const e of super.values())yield h(e)}*entries(){for(const[e,t]of super.entries())yield[e,h(t)]}map(e,...t){fe(this);const r=t[0],n=[];for(let t=0,a=this.length;t<a;++t){const a=h(this[t]);n.push(e.call(r,a,t,le(this).proxy))}return new _e(n)}filter(e,...t){fe(this);const r=t[0],n=[];for(let t=0,a=this.length;t<a;++t){const a=h(this[t]);e.call(r,a,t,le(this).proxy)&&n.push(a)}return new _e(n)}reduce(e,...t){let r,n;fe(this),0===t.length?(r=h(this[0]),n=1):(r=t[0],n=0);for(let t=n,a=this.length;t<a;++t)r=e(r,h(this[t]),t,le(this).proxy);return r}reduceRight(e,...t){let r,n;fe(this);const a=this.length;0===t.length?(r=h(this[a-1]),n=a-1):(r=t[0],n=a);for(let t=n;t--;)r=e(r,h(this[t]),t,le(this).proxy);return r}forEach(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)e.call(r,h(this[t]),t,le(this).proxy)}find(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t){const n=h(this[t]);if(e.call(r,n,t,le(this).proxy))return n}}findIndex(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t){const n=h(this[t]);if(e.call(r,n,t,le(this).proxy))return t}return-1}every(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)if(!e.call(r,h(this[t]),t,le(this).proxy))return!1;return!0}some(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)if(e.call(r,h(this[t]),t,le(this).proxy))return!0;return!1}set(e,...t){fe(this);const r=t[0];let n;if(ue(e))n=le(e).target;else{const t=Reflect.has(e,"length")||void 0===e[Symbol.iterator]?e:[...e],r=t.length;n=new Uint16Array(r);for(let e=0,r=t.length;e<r;++e)n[e]=l(t[e])}super.set(n,r)}reverse(){return fe(this),super.reverse(),le(this).proxy}fill(e,...t){return fe(this),super.fill(l(e),...t),le(this).proxy}copyWithin(e,t,...r){return fe(this),super.copyWithin(e,t,...r),le(this).proxy}sort(...e){fe(this);let t=e[0];void 0===t&&(t=te);const r=J(h);return super.sort(((e,n)=>t(r(e),r(n)))),le(this).proxy}slice(...e){let t;fe(this);try{t=super.slice(...e)}catch(r){if(!(r instanceof TypeError))throw r;t=new Uint16Array(this.buffer,this.byteOffset,this.length).slice(...e)}return new _e(t.buffer)}subarray(...e){let t;fe(this);try{t=super.subarray(...e)}catch(r){if(!(r instanceof TypeError))throw r;t=new Uint16Array(this.buffer,this.byteOffset,this.length).subarray(...e)}return new _e(t.buffer,t.byteOffset,t.length)}indexOf(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n<0&&(n+=r,n<0&&(n=0));for(let t=n,a=r;t<a;++t)if(h(this[t])===e)return t;return-1}lastIndexOf(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n=0===n?r:n+1,n>=0?n=n<r?n:r:n+=r;for(let t=n;t--;)if(h(this[t])===e)return t;return-1}includes(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n<0&&(n+=r,n<0&&(n=0));const a=Number.isNaN(e);for(let t=n,o=r;t<o;++t){const r=h(this[t]);if(a&&Number.isNaN(r))return!0;if(r===e)return!0}return!1}join(...e){return fe(this),ce(this).join(...e)}toLocaleString(...e){return fe(this),ce(this).toLocaleString(...e)}get[Symbol.toStringTag](){if(ue(this))return"Float16Array"}}const de=_e.prototype,Ee=new WeakSet;for(const e of Reflect.ownKeys(de)){const t=de[e];"function"==typeof t&&Ee.add(t)}function Te(e,t,...r){if(!re(e))throw new TypeError("First argument to getFloat16 function must be a DataView");return h(e.getUint16(t,...r))}function ge(e,t,r,...n){if(!re(e))throw new TypeError("First argument to setFloat16 function must be a DataView");e.setUint16(t,l(r),...n)}},277:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g},730:(e,t,r)=>{"use strict";r.d(t,{Z:()=>s});var n=r(277);e=r.hmd(e);var a="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=a&&e&&!e.nodeType&&e,i=o&&o.exports===a&&n.Z.process;const s=function(){try{return o&&o.require&&o.require("util").types||i&&i.binding&&i.binding("util")}catch(e){}}()},627:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isArray=t.isString=t.isPositiveInteger=t.isInteger=t.isNumber=t.isValidWrapType=t.isValidFilterType=t.isValidDataType=void 0;var n=r(738);function a(e){return!isNaN(e)}function o(e){return a(e)&&e%1==0}t.isValidDataType=function(e){return e===n.HALF_FLOAT||e===n.FLOAT||e===n.UNSIGNED_BYTE||e===n.BYTE||e===n.UNSIGNED_SHORT||e===n.SHORT||e===n.UNSIGNED_INT||e===n.INT},t.isValidFilterType=function(e){return e===n.LINEAR||e===n.NEAREST},t.isValidWrapType=function(e){return e===n.REPEAT||e===n.CLAMP_TO_EDGE||e===n.MIRRORED_REPEAT},t.isNumber=a,t.isInteger=o,t.isPositiveInteger=function(e){return o(e)&&e>0},t.isString=function(e){return"string"==typeof e},t.isArray=function(e){return Array.isArray(e)}},738:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.INT_4D_UNIFORM=t.INT_3D_UNIFORM=t.INT_2D_UNIFORM=t.INT_1D_UNIFORM=t.FLOAT_4D_UNIFORM=t.FLOAT_3D_UNIFORM=t.FLOAT_2D_UNIFORM=t.FLOAT_1D_UNIFORM=t.GLSL1=t.GLSL3=t.MIRRORED_REPEAT=t.CLAMP_TO_EDGE=t.REPEAT=t.NEAREST=t.LINEAR=t.INT=t.UNSIGNED_INT=t.SHORT=t.UNSIGNED_SHORT=t.BYTE=t.UNSIGNED_BYTE=t.FLOAT=t.HALF_FLOAT=void 0,t.HALF_FLOAT="HALF_FLOAT",t.FLOAT="FLOAT",t.UNSIGNED_BYTE="UNSIGNED_BYTE",t.BYTE="BYTE",t.UNSIGNED_SHORT="UNSIGNED_SHORT",t.SHORT="SHORT",t.UNSIGNED_INT="UNSIGNED_INT",t.INT="INT",t.LINEAR="LINEAR",t.NEAREST="NEAREST",t.REPEAT="REPEAT",t.CLAMP_TO_EDGE="CLAMP_TO_EDGE",t.MIRRORED_REPEAT="MIRRORED_REPEAT",t.GLSL3="300 es",t.GLSL1="100",t.FLOAT_1D_UNIFORM="1f",t.FLOAT_2D_UNIFORM="2f",t.FLOAT_3D_UNIFORM="3f",t.FLOAT_4D_UNIFORM="3f",t.INT_1D_UNIFORM="1i",t.INT_2D_UNIFORM="2i",t.INT_3D_UNIFORM="3i",t.INT_4D_UNIFORM="3i"},930:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataLayer=void 0;var n=r(501),a=r(627),o=r(738),i=r(581),s=r(593),l=function(){function e(t){this.bufferIndex=0,this.buffers=[];var r=t.gl,n=t.errorCallback,i=t.name,s=t.dimensions,l=t.type,u=t.numComponents,f=t.data,c=t.glslVersion;if(this.name=i,this.gl=r,this.errorCallback=n,!a.isPositiveInteger(u)||u>4)throw new Error("Invalid numComponents "+u+' for DataLayer "'+i+'".');this.numComponents=u;var h=!!t.writable;if(this.writable=h,!a.isValidDataType(l)){var p=[o.HALF_FLOAT,o.FLOAT,o.UNSIGNED_BYTE,o.BYTE,o.UNSIGNED_SHORT,o.SHORT,o.UNSIGNED_INT,o.INT];throw new Error("Invalid type "+l+' for DataLayer "'+i+'", must be one of '+p.join(", ")+".")}this.type=l;var _=e.getInternalType({gl:r,type:l,glslVersion:c,writable:h,name:i,errorCallback:n});this.internalType=_;var d=e.getGLTextureParameters({gl:r,name:i,numComponents:u,writable:h,internalType:_,glslVersion:c,errorCallback:n}),E=d.glFormat,T=d.glInternalFormat,g=d.glType,y=d.glNumChannels;this.glInternalFormat=T,this.glFormat=E,this.glType=g,this.glNumChannels=y;var b=e.calcSize(s,i),m=b.length,A=b.width,R=b.height;if(this.length=m,!a.isPositiveInteger(A))throw new Error("Invalid width "+A+' for DataLayer "'+i+'".');if(this.width=A,!a.isPositiveInteger(R))throw new Error("Invalid length "+R+' for DataLayer "'+i+'".');this.height=R;var v=void 0!==t.filter?t.filter:m?o.NEAREST:o.LINEAR;if(!a.isValidFilterType(v))throw new Error("Invalid filter: "+v+' for DataLayer "'+i+'", must be '+o.LINEAR+" or "+o.NEAREST+".");this.filter=v,this.glFilter=e.getGLFilter({gl:r,filter:v,internalType:_,name:i,errorCallback:n});var L=void 0!==t.wrapS?t.wrapS:o.CLAMP_TO_EDGE;this.glWrapS=e.getGLWrap({gl:r,wrap:L,internalType:_,name:i});var F=void 0!==t.wrapT?t.wrapT:o.CLAMP_TO_EDGE;this.glWrapT=e.getGLWrap({gl:r,wrap:F,internalType:_,name:i});var w=void 0!==t.numBuffers?t.numBuffers:1;if(!a.isPositiveInteger(w))throw new Error("Invalid numBuffers: "+w+' for DataLayer "'+i+'", must be positive integer.');this.numBuffers=w,this.initBuffers(f)}return e.calcSize=function(e,t){var r,n,o;if(isNaN(e)){if(n=e[0],!a.isPositiveInteger(n))throw new Error("Invalid width "+n+' for DataLayer "'+t+'".');if(o=e[1],!a.isPositiveInteger(o))throw new Error("Invalid height "+o+' for DataLayer "'+t+'".')}else{if(!a.isPositiveInteger(e))throw new Error("Invalid length "+e+' for DataLayer "'+t+'".');for(var i=1,s=r=e;s>2;)i++,s/=2;n=Math.pow(2,Math.floor(i/2)+i%2),o=Math.pow(2,Math.floor(i/2))}return{width:n,height:o,length:r}},e.getGLWrap=function(e){var t=e.gl,r=e.wrap,n=e.internalType,a=e.name;return s.isWebGL2(t)||r===o.CLAMP_TO_EDGE?t[r]:n===o.FLOAT||n===o.HALF_FLOAT?(console.warn('Falling back to CLAMP_TO_EDGE wrapping for DataLayer "'+a+'".'),t[o.CLAMP_TO_EDGE]):t[r]},e.getGLFilter=function(e){var t=e.gl,r=e.errorCallback,n=e.internalType,a=e.name,s=e.filter;return s===o.NEAREST||(n===o.HALF_FLOAT&&(i.getExtension(t,i.OES_TEXTURE_HAlF_FLOAT_LINEAR,r,!0)||i.getExtension(t,i.OES_TEXTURE_FLOAT_LINEAR,r,!0)||(console.warn('Falling back to NEAREST filter for DataLayer "'+a+'".'),s=o.NEAREST)),n===o.FLOAT&&(i.getExtension(t,i.OES_TEXTURE_FLOAT_LINEAR,r,!0)||(console.warn('Falling back to NEAREST filter for DataLayer "'+a+'".'),s=o.NEAREST))),t[s]},e.getInternalType=function(t){var r=t.gl,n=t.errorCallback,a=t.writable,l=t.name,u=t.glslVersion,f=t.type;return e.shouldCastIntTypeAsFloat(t)&&(f=o.FLOAT),s.isWebGL2(r)||(f===o.FLOAT&&(i.getExtension(r,i.OES_TEXTURE_FLOAT,n,!0)||(console.warn('FLOAT not supported, falling back to HALF_FLOAT type for DataLayer "'+l+'".'),f=o.HALF_FLOAT),a&&(e.testFramebufferWrite({gl:r,type:f,glslVersion:u})||f===o.HALF_FLOAT||(console.warn('FLOAT not supported for writing operations, falling back to HALF_FLOAT type for DataLayer "'+l+'".'),f=o.HALF_FLOAT))),f===o.HALF_FLOAT&&(i.getExtension(r,i.OES_TEXTURE_HALF_FLOAT,n),a&&(e.testFramebufferWrite({gl:r,type:f,glslVersion:u})||n("This browser does not support rendering to HALF_FLOAT textures.")))),a&&s.isWebGL2(r)&&(f===o.HALF_FLOAT||f===o.FLOAT)&&i.getExtension(r,i.EXT_COLOR_BUFFER_FLOAT,n),f},e.shouldCastIntTypeAsFloat=function(e){var t=e.gl,r=e.type;return!(e.glslVersion===o.GLSL3&&s.isWebGL2(t)||r!==o.BYTE&&r!==o.SHORT&&r!==o.INT&&r!==o.UNSIGNED_SHORT&&r!==o.UNSIGNED_INT)},e.getGLTextureParameters=function(e){var t,r,n,a,l=e.gl,u=e.errorCallback,f=e.name,c=e.numComponents,h=e.internalType,p=e.writable,_=e.glslVersion;if(s.isWebGL2(l)){if(a=c,3===c&&p&&(a=4),h===o.FLOAT||h===o.HALF_FLOAT)switch(a){case 1:r=l.RED;break;case 2:r=l.RG;break;case 3:r=l.RGB;break;case 4:r=l.RGBA;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}else if(_===o.GLSL1&&h===o.UNSIGNED_BYTE)switch(a){case 1:case 2:case 3:r=l.RGB,a=3;break;case 4:r=l.RGBA,a=4;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}else switch(a){case 1:r=l.RED_INTEGER;break;case 2:r=l.RG_INTEGER;break;case 3:r=l.RGB_INTEGER;break;case 4:r=l.RGBA_INTEGER;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}switch(h){case o.HALF_FLOAT:switch(t=l.HALF_FLOAT,a){case 1:n=l.R16F;break;case 2:n=l.RG16F;break;case 3:n=l.RGB16F;break;case 4:n=l.RGBA16F;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}break;case o.FLOAT:switch(t=l.FLOAT,a){case 1:n=l.R32F;break;case 2:n=l.RG32F;break;case 3:n=l.RGB32F;break;case 4:n=l.RGBA32F;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}break;case o.UNSIGNED_BYTE:if(t=l.UNSIGNED_BYTE,_===o.GLSL1&&h===o.UNSIGNED_BYTE)n=r;else switch(a){case 1:n=l.R8UI;break;case 2:n=l.RG8UI;break;case 3:n=l.RGB8UI;break;case 4:n=l.RGBA8UI;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}break;case o.BYTE:switch(t=l.BYTE,a){case 1:n=l.R8I;break;case 2:n=l.RG8I;break;case 3:n=l.RGB8I;break;case 4:n=l.RGBA8I;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}break;case o.SHORT:switch(t=l.SHORT,a){case 1:n=l.R16I;break;case 2:n=l.RG16I;break;case 3:n=l.RGB16I;break;case 4:n=l.RGBA16I;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}break;case o.UNSIGNED_SHORT:switch(t=l.UNSIGNED_SHORT,a){case 1:n=l.R16UI;break;case 2:n=l.RG16UI;break;case 3:n=l.RGB16UI;break;case 4:n=l.RGBA16UI;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}break;case o.INT:switch(t=l.INT,a){case 1:n=l.R32I;break;case 2:n=l.RG32I;break;case 3:n=l.RGB32I;break;case 4:n=l.RGBA32I;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}break;case o.UNSIGNED_INT:switch(t=l.UNSIGNED_INT,a){case 1:n=l.R32UI;break;case 2:n=l.RG32UI;break;case 3:n=l.RGB32UI;break;case 4:n=l.RGBA32UI;break;default:throw new Error("Unsupported glNumChannels "+a+' for DataLayer "'+f+'".')}break;default:throw new Error("Unsupported type "+h+' for DataLayer "'+f+'".')}}else{switch(c){case 1:case 2:case 3:r=l.RGB,n=l.RGB,a=3;break;case 4:r=l.RGBA,n=l.RGBA,a=4;break;default:throw new Error("Unsupported numComponents "+c+' for DataLayer "'+f+'".')}switch(h){case o.FLOAT:t=l.FLOAT;break;case o.HALF_FLOAT:t=l.HALF_FLOAT||i.getExtension(l,i.OES_TEXTURE_HALF_FLOAT,u).HALF_FLOAT_OES;break;case o.UNSIGNED_BYTE:t=l.UNSIGNED_BYTE;break;default:throw new Error("Unsupported type "+h+' in WebGL 1.0 for DataLayer "'+f+'".')}}if(void 0===t||void 0===r||void 0===n){var d=[];throw void 0===t&&d.push("glType"),void 0===r&&d.push("glFormat"),void 0===n&&d.push("glInternalFormat"),new Error("Invalid type: "+h+" for numComponents "+c+", unable to init parameter"+(d.length>1?"s":"")+" "+d.join(", ")+' for DataLayer "'+f+'".')}if(void 0===a||c<1||c>4||a<c)throw new Error("Invalid numChannels "+a+" for numComponents "+c+' for DataLayer "'+f+'".');return{glFormat:r,glInternalFormat:n,glType:t,glNumChannels:a}},e.testFramebufferWrite=function(t){var r=t.gl,n=t.type,a=t.glslVersion,i=r.createTexture();if(!i)return!1;r.bindTexture(r.TEXTURE_2D,i);var s=r[o.CLAMP_TO_EDGE],l=r[o.CLAMP_TO_EDGE],u=r[o.NEAREST];r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,s),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,l),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,u),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,u);var f=e.getGLTextureParameters({gl:r,name:"testFramebufferWrite",numComponents:1,writable:!0,internalType:n,glslVersion:a,errorCallback:function(){}}),c=f.glInternalFormat,h=f.glFormat,p=f.glType;r.texImage2D(r.TEXTURE_2D,0,c,100,100,0,h,p,null);var _=r.createFramebuffer();if(!_)return r.deleteTexture(i),!1;r.bindFramebuffer(r.FRAMEBUFFER,_),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,i,0);var d=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.deleteTexture(i),r.deleteFramebuffer(_),d},e.prototype.validateDataArray=function(e,t){if(t){var r=this,a=r.width,i=r.height,s=r.length,l=r.numComponents,u=r.glNumChannels,f=r.type,c=r.internalType,h=r.name;if(s&&t.length!==s*l||!s&&t.length!==a*i*l)throw new Error("Invalid data length "+t.length+' for DataLayer "'+h+'" of size '+(s||a+"x"+i)+"x"+l+".");var p=!1;switch(f){case o.HALF_FLOAT:case o.FLOAT:p=p||t.constructor!==Float32Array;break;case o.UNSIGNED_BYTE:p=p||t.constructor!==Uint8Array;break;case o.BYTE:p=p||t.constructor!==Int8Array;break;case o.UNSIGNED_SHORT:p=p||t.constructor!==Uint16Array;break;case o.SHORT:p=p||t.constructor!==Int16Array;break;case o.UNSIGNED_INT:p=p||t.constructor!==Uint32Array;break;case o.INT:p=p||t.constructor!==Int32Array;break;default:throw new Error('Error initing DataLayer "'+h+'".  Unsupported type "'+f+'" for GLCompute.initDataLayer.')}if(p)throw new Error("Invalid TypedArray of type "+t.constructor.name+' supplied to DataLayer "'+h+'" of type "'+f+'".');var _=t,d=a*i*u,E=_.length<d,T=c===o.HALF_FLOAT;if(f!==c||E||T){switch(c){case o.FLOAT:_=new Float32Array(d);break;case o.HALF_FLOAT:_=new Uint16Array(d);break;case o.UNSIGNED_BYTE:_=new Uint8Array(d);break;case o.BYTE:_=new Int8Array(d);break;case o.UNSIGNED_SHORT:_=new Uint16Array(d);break;case o.SHORT:_=new Int16Array(d);break;case o.UNSIGNED_INT:_=new Uint32Array(d);break;case o.INT:_=new Int32Array(d);break;default:throw new Error("Error initing "+h+".  Unsupported internalType "+c+" for GLCompute.initDataLayer.")}for(var g=T?new DataView(_.buffer):null,y=0,b=t.length/l;y<b;y++)for(var m=0;m<l;m++)T?n.setFloat16(g,2*(y*u+m),t[y*l+m],!0):_[y*u+m]=t[y*l+m]}return _}},e.prototype.initBuffers=function(e){for(var t=this,r=t.name,n=t.numBuffers,a=t.gl,o=t.width,i=t.height,s=t.glInternalFormat,l=t.glFormat,u=t.glType,f=t.glFilter,c=t.glWrapS,h=t.glWrapT,p=t.writable,_=t.errorCallback,d=this.validateDataArray(a,e),E=0;E<n;E++){var T=a.createTexture();if(!T)return void _('Could not init texture for DataLayer "'+r+'": '+a.getError()+".");a.bindTexture(a.TEXTURE_2D,T),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,c),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,h),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,f),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,f),a.texImage2D(a.TEXTURE_2D,0,s,o,i,0,l,u,d||null);var g={texture:T};if(p){var y=a.createFramebuffer();if(!y)return void _('Could not init framebuffer for DataLayer "'+r+'": '+a.getError()+".");a.bindFramebuffer(a.FRAMEBUFFER,y),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,T,0);var b=a.checkFramebufferStatus(a.FRAMEBUFFER);b!=a.FRAMEBUFFER_COMPLETE&&_('Invalid status for framebuffer for DataLayer "'+r+'": '+b+"."),g.framebuffer=y}this.buffers.push(g)}a.bindFramebuffer(a.FRAMEBUFFER,null)},e.prototype.getCurrentStateTexture=function(){return this.buffers[this.bufferIndex].texture},e.prototype.getPreviousStateTexture=function(e){if(void 0===e&&(e=-1),1===this.numBuffers)throw new Error('Cannot call getPreviousStateTexture on DataLayer "'+this.name+'" with only one buffer.');var t=this.bufferIndex+e+this.numBuffers;if(t<0||t>=this.numBuffers)throw new Error("Invalid index "+e+" passed to getPreviousStateTexture on DataLayer "+this.name+" with "+this.numBuffers+" buffers.");return this.buffers[t].texture},e.prototype.bindOutputBuffer=function(e){var t=this.gl;e&&(this.bufferIndex=(this.bufferIndex+1)%this.numBuffers);var r=this.buffers[this.bufferIndex].framebuffer;if(!r)throw new Error('DataLayer "'+this.name+'" is not writable.');t.bindFramebuffer(t.FRAMEBUFFER,r)},e.prototype.resize=function(t,r){var n=e.calcSize(t,this.name),a=n.length,o=n.width,i=n.height;this.length=a,this.width=o,this.height=i,this.destroyBuffers(),this.initBuffers(r)},e.prototype.clear=function(){this.destroyBuffers(),this.initBuffers()},e.prototype.getDimensions=function(){return[this.width,this.height]},e.prototype.getTextures=function(){return this.buffers.map((function(e){return e.texture}))},e.prototype.getLength=function(){if(!this.length)throw new Error('Cannot call getLength() on 2D DataLayer "'+this.name+'".');return this.length},e.prototype.destroyBuffers=function(){var e=this.gl,t=this.buffers;t.forEach((function(t){var r=t.framebuffer,n=t.texture;e.deleteTexture(n),r&&e.deleteFramebuffer(r),delete t.texture,delete t.framebuffer})),t.length=0},e.prototype.destroy=function(){this.destroyBuffers(),delete this.gl,delete this.errorCallback},e}();t.DataLayer=l},321:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.GLCompute=void 0;for(var a=r(930),o=r(738),i=r(664),s=r(406),l=r(593),u=r(501),f=r(627),c=r(435),h=r(790),p=r(518),_=r(546),d=r(374),E=r(541),T=new Float32Array([-1,-1,1,-1,-1,1,1,1]),g=new Float32Array([-1,-1,1,-1,1,1,-1,1,-1,-1]),y=[0,0],b=0;b<=18;b++)y.push(Math.cos(2*Math.PI*b/18),Math.sin(2*Math.PI*b/18));var m=new Float32Array(y),A=function(){function e(e,t,r){void 0===t&&(t=function(e){throw new Error(e)}),this.errorState=!1;var n=["canvas","context","antialias","glslVersion"];Object.keys(e).forEach((function(e){if(n.indexOf(e)<0)throw new Error("Invalid key "+e+" passed to GLcompute.constructor.  Valid keys are "+n.join(", ")+".")}));var a=this;this.errorCallback=function(e){a.errorState||(a.errorState=!0,t(e))};var i=e.canvas,s=e.context;if(!s){var u={};if(void 0!==e.antialias&&(u.antialias=e.antialias),null===(s=i.getContext("webgl2",u)||i.getContext("webgl",u)||i.getContext("experimental-webgl",u)))return void this.errorCallback("Unable to initialize WebGL context.")}l.isWebGL2(s)?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=s,this.renderer=r;var f=void 0===e.glslVersion?o.GLSL1:e.glslVersion;this.glslVersion=f,l.isWebGL2(s)||f!==o.GLSL3||console.warn("GLSL3.x is incompatible with WebGL1.0 contexts."),s.disable(s.DEPTH_TEST),s.pixelStorei(s.UNPACK_ALIGNMENT,1);var y=f===o.GLSL3?c:h,b=l.compileShader(s,this.errorCallback,y,s.VERTEX_SHADER);b?(this.defaultVertexShader=b,this.copyFloatProgram=this.initProgram({name:"copyFloat",fragmentShader:f===o.GLSL3?p:E,uniforms:[{name:"u_state",value:0,dataType:o.INT}]}),f===o.GLSL3?(this.copyIntProgram=this.initProgram({name:"copyInt",fragmentShader:_,uniforms:[{name:"u_state",value:0,dataType:o.INT}]}),this.copyUintProgram=this.initProgram({name:"copyUint",fragmentShader:d,uniforms:[{name:"u_state",value:0,dataType:o.INT}]})):(this.copyIntProgram=this.copyFloatProgram,this.copyUintProgram=this.copyFloatProgram),this.quadPositionsBuffer=this.initVertexBuffer(T),this.boundaryPositionsBuffer=this.initVertexBuffer(g),this.circlePositionsBuffer=this.initVertexBuffer(m),s.bindBuffer(s.ARRAY_BUFFER,null),this.onResize(i),this.maxNumTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),console.log(this.maxNumTextures+" textures max.")):this.errorCallback("Unable to initialize fullscreen quad vertex shader.")}return e.initWithThreeRenderer=function(t,r,a){return new e(n({canvas:t.domElement,context:t.getContext()},r),a,t)},e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),n;t("Unable to allocate gl buffer.")},e.prototype.initProgram=function(e){var t=["name","fragmentShader","vertexShader","uniforms","defines"];Object.keys(e).forEach((function(e){if(t.indexOf(e)<0)throw new Error("Invalid key "+e+" passed to GLcompute.initProgram.  Valid keys are "+t.join(", ")+".")}));var r=this,a=r.gl,o=r.errorCallback,s=r.defaultVertexShader;return new i.GPUProgram(n(n({vertexShader:s},e),{gl:a,errorCallback:o}))},e.prototype.initDataLayer=function(e){var t=["name","dimensions","type","numComponents","data","filter","wrapS","wrapT","writable","numBuffers"];Object.keys(e).forEach((function(e){if(t.indexOf(e)<0)throw new Error("Invalid key "+e+" passed to GLcompute.initDataLayer.  Valid keys are "+t.join(", ")+".")}));var r=this,o=r.gl,i=r.errorCallback,s=r.glslVersion;return new a.DataLayer(n(n({},e),{gl:o,glslVersion:s,errorCallback:i}))},e.prototype.initTexture=function(e){if(!f.isString(e))throw new Error("Expected GLCompute.initTexture to have argument of type string, got "+e+" of type "+typeof e+".");var t=this.gl,r=this.errorCallback,n=t.createTexture();if(null===n)throw new Error("Unable to init glTexture.");t.bindTexture(t.TEXTURE_2D,n);var a=t.RGBA,o=t.RGBA,i=t.UNSIGNED_BYTE,s=new Uint8Array([0,0,0,255]);t.texImage2D(t.TEXTURE_2D,0,a,1,1,0,o,i,s);var u=new Image;return u.onload=function(){t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,a,o,i,u),l.isPowerOf2(u.width)&&l.isPowerOf2(u.height)||console.warn("Texture "+e+" dimensions ["+u.width+", "+u.height+"] are not power of 2."),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR)},u.onerror=function(t){r("Error loading image "+e+": "+t)},u.src=e,n},e.prototype.onResize=function(e){var t=e.clientWidth,r=e.clientHeight;e.width=t,e.height=r,this.width=t,this.height=r},e.prototype.drawSetup=function(e,t,r,n){var a=this.gl;if(e.glProgram){var o=r.map((function(e){return e.getCurrentStateTexture?e.getCurrentStateTexture():e}));this.setOutputLayer(t,r,n),a.useProgram(e.glProgram);for(var i=0;i<o.length;i++)a.activeTexture(a.TEXTURE0+i),a.bindTexture(a.TEXTURE_2D,o[i])}},e.prototype.copyProgramForType=function(e){switch(e){case o.HALF_FLOAT:case o.FLOAT:return this.copyFloatProgram;case o.UNSIGNED_BYTE:case o.UNSIGNED_SHORT:case o.UNSIGNED_INT:return this.copyUintProgram;case o.BYTE:case o.SHORT:case o.INT:return this.copyIntProgram;default:throw new Error("Invalid type: "+e+" passed to GLCompute.copyProgramForType.")}},e.prototype.setOutputLayer=function(e,t,r){var n=this.gl;if(r){if(t.indexOf(r)>-1){if(1===r.numBuffers)throw new Error("\nCannot use same buffer for input and output of a program.\nTry increasing the number of buffers in your output layer to at least 2 so you\ncan render to nextState using currentState as an input.");if(e)r.bindOutputBuffer(!0);else{var a=this.copyProgramForType(r.internalType);this.step(a,[r],r),r.bindOutputBuffer(!1)}}else r.bindOutputBuffer(!1);var o=r.getDimensions(),i=o[0],s=o[1];n.viewport(0,0,i,s)}else{n.bindFramebuffer(n.FRAMEBUFFER,null);var l=this.width,u=this.height;n.viewport(0,0,l,u)}},e.prototype.setPositionAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e.glProgram,"a_internal_position");t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.setIndexAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e.glProgram,"a_internal_index");t.vertexAttribPointer(r,1,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.step=function(e,t,r,n){void 0===t&&(t=[]);var a=this,o=a.gl,i=a.errorState,s=a.quadPositionsBuffer;i||(this.drawSetup(e,!0,t,r),e.setUniform("u_internal_scale",[1,1],"FLOAT"),e.setUniform("u_internal_translation",[0,0],"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,s),this.setPositionAttribute(e),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND))},e.prototype.stepBoundary=function(e,t,r,n){void 0===t&&(t=[]);var a=this,o=a.gl,i=a.errorState,s=a.boundaryPositionsBuffer;if(!i){this.drawSetup(e,!1,t,r);var l=r?r.getDimensions():[this.width,this.height],u=[1/l[0],1/l[1]];if(e.setUniform("u_internal_scale",[1-u[0],1-u[1]],"FLOAT"),e.setUniform("u_internal_translation",u,"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,s),this.setPositionAttribute(e),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),null==n?void 0:n.singleEdge)switch(null==n?void 0:n.singleEdge){case"LEFT":o.drawArrays(o.LINES,3,2);break;case"RIGHT":o.drawArrays(o.LINES,1,2);break;case"TOP":o.drawArrays(o.LINES,2,2);break;case"BOTTOM":o.drawArrays(o.LINES,0,2);break;default:throw new Error("Unknown boundary edge type: "+(null==n?void 0:n.singleEdge)+".")}else o.drawArrays(o.LINE_LOOP,0,4);o.disable(o.BLEND)}},e.prototype.stepNonBoundary=function(e,t,r,n){void 0===t&&(t=[]);var a=this,o=a.gl,i=a.errorState,s=a.quadPositionsBuffer;if(!i){this.drawSetup(e,!1,t,r);var l=r?r.getDimensions():[this.width,this.height],u=[1/l[0],1/l[1]];e.setUniform("u_internal_scale",[1-2*u[0],1-2*u[1]],"FLOAT"),e.setUniform("u_internal_translation",u,"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,s),this.setPositionAttribute(e),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND)}},e.prototype.stepCircle=function(e,t,r,n,a,o){void 0===n&&(n=[]);var i=this,s=i.gl,l=i.errorState,u=i.circlePositionsBuffer,f=a?a.getDimensions():[this.width,this.height],c=f[0],h=f[1];l||(this.drawSetup(e,!1,n,a),e.setUniform("u_internal_radius",r,"FLOAT"),e.setUniform("u_internal_scale",[2/c,2/h],"FLOAT"),e.setUniform("u_internal_length",0,"FLOAT"),e.setUniform("u_internal_translation",[2*t[0]/c-1,2*t[1]/h-1],"FLOAT"),s.bindBuffer(s.ARRAY_BUFFER,u),this.setPositionAttribute(e),(null==o?void 0:o.shouldBlendAlpha)&&(s.enable(s.BLEND),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA)),s.drawArrays(s.TRIANGLE_FAN,0,20),s.disable(s.BLEND))},e.prototype.stepSegment=function(e,t,r,n,a,o,i){void 0===a&&(a=[]);var s=this,l=s.gl,u=s.errorState,f=s.circlePositionsBuffer,c=o?o.getDimensions():[this.width,this.height],h=c[0],p=c[1];if(!u){this.drawSetup(e,!1,a,o),e.setUniform("u_internal_radius",n,"FLOAT"),e.setUniform("u_internal_scale",[2/h,2/p],"FLOAT");var _=t[0]-r[0],d=t[1]-r[1],E=Math.atan2(d,_);e.setUniform("u_internal_rotation",E,"FLOAT");var T=Math.sqrt(_*_+d*d);e.setUniform("u_internal_length",T,"FLOAT");var g=(t[0]+r[0])/2,y=(t[1]+r[1])/2;e.setUniform("u_internal_translation",[2*g/h-1,2*y/p-1],"FLOAT"),l.bindBuffer(l.ARRAY_BUFFER,f),this.setPositionAttribute(e),(null==i?void 0:i.shouldBlendAlpha)&&(l.enable(l.BLEND),l.blendFunc(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA)),l.drawArrays(l.TRIANGLE_FAN,0,20),l.disable(l.BLEND)}},e.prototype.drawPoints=function(e,t,r,n){var a=this,o=a.gl,i=a.errorState,s=a.pointIndexArray,l=r?r.getDimensions():[this.width,this.height],u=l[0],f=l[1];if(!i){if(t.length<1)throw new Error('Invalid inputLayers for drawPoints on program "'+e.name+'": must pass a positionDataLayer as first element of inputLayers.');var c=t[0],h=c.getLength(),p=(null==n?void 0:n.numPoints)||h;if(p>h)throw new Error("Invalid numPoint "+p+" for positionDataLayer of length "+h+".");var _=(null==n?void 0:n.pointSize)||1;this.drawSetup(e,!1,t,r),e.setUniform("u_internal_scale",[1/u,1/f],"FLOAT"),e.setUniform("u_internal_pointSize",_,"FLOAT");var d=c.getDimensions();if(e.setUniform("u_internal_positionDimensions",d,"FLOAT"),void 0===this.pointIndexBuffer||s&&s.length<p){for(var E=new Float32Array(h),T=0;T<h;T++)E[T]=T;this.pointIndexArray=E,this.pointIndexBuffer=this.initVertexBuffer(E)}o.bindBuffer(o.ARRAY_BUFFER,this.pointIndexBuffer),this.setIndexAttribute(e),!1!==(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.POINTS,0,p),o.disable(o.BLEND)}},e.prototype.getContext=function(){return this.gl},e.prototype.getValues=function(e){var t,r=this.gl,n=this.glslVersion,a=e.getDimensions(),i=a[0],s=a[1],l=e.glNumChannels,f=e.glType,c=e.glFormat,h=e.internalType;switch(h){case o.HALF_FLOAT:l=4,c=r.RGBA,f=r.FLOAT,t=new Float32Array(i*s*l);break;case o.FLOAT:l=4,c=r.RGBA,t=new Float32Array(i*s*l);break;case o.UNSIGNED_BYTE:if(n===o.GLSL1){l=4,c=r.RGBA,t=new Uint8Array(i*s*l);break}l=4,c=r.RGBA_INTEGER,f=r.UNSIGNED_INT,t=new Uint32Array(i*s*l);break;case o.UNSIGNED_SHORT:l=4,c=r.RGBA_INTEGER,f=r.UNSIGNED_INT,t=new Uint32Array(i*s*l);break;case o.UNSIGNED_INT:l=4,c=r.RGBA_INTEGER,t=new Uint32Array(i*s*l);break;case o.BYTE:case o.SHORT:l=4,c=r.RGBA_INTEGER,f=r.INT,t=new Int32Array(i*s*l);break;case o.INT:l=4,c=r.RGBA_INTEGER,t=new Int32Array(i*s*l);break;default:throw new Error("Unsupported internalType "+h+" for getValues().")}if(this.readyToRead()){r.readPixels(0,0,i,s,c,f,t);var p=e.numComponents,_=e.type,d=i*s*p,E=h===o.HALF_FLOAT&&t.constructor===Uint16Array,T=E?new DataView(t.buffer):void 0,g=t;if(h!==_)switch(_){case o.HALF_FLOAT:case o.FLOAT:g=new Float32Array;break;case o.UNSIGNED_BYTE:g=new Uint8Array(d);break;case o.BYTE:g=new Int8Array(d);break;case o.UNSIGNED_SHORT:g=new Uint16Array(d);break;case o.SHORT:g=new Int16Array(d);break;case o.UNSIGNED_INT:g=new Uint32Array(d);break;case o.INT:g=new Int32Array(d);break;default:throw new Error("Unsupported type "+_+" for getValues().")}if(E||g!==t||p!==l)for(var y=0,b=i*s;y<b;y++)for(var m=y*l,A=y*p,R=0;R<p;R++)g[A+R]=E?u.getFloat16(T,2*(m+R),!0):t[m+R];return g.length!==d&&(g=g.slice(0,d)),g}throw new Error("Unable to read values from Buffer with status: "+r.checkFramebufferStatus(r.FRAMEBUFFER)+".")},e.prototype.readyToRead=function(){var e=this.gl;return e.checkFramebufferStatus(e.FRAMEBUFFER)==e.FRAMEBUFFER_COMPLETE},e.prototype.reset=function(){},e.prototype.attachDataLayerToThreeTexture=function(e,t){if(!this.renderer)throw new Error("GLCompute was not inited with a renderer.");var r=e.getTextures();if(r.length>1)throw new Error('DataLayer "'+e.name+'" contains multiple WebGL textures (one for each buffer) that are flip-flopped during compute cycles, please choose a DataLayer with one buffer.');var n=this.renderer.properties.get(t);n.__webglTexture=r[0],n.__webglInit=!0},e.prototype.resetThreeState=function(){if(!this.renderer)throw new Error("GLCompute was not inited with a renderer.");var e=this.gl,t=this.renderer.getViewport(new s.Vector4);e.viewport(t.x,t.y,t.width,t.height),this.renderer.setRenderTarget(null),this.renderer.resetState()},e.prototype.destroy=function(){delete this.renderer},e}();t.GLCompute=A},664:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPUProgram=void 0;var n=r(627),a=r(738),o=r(593),i=function(){function e(e){var t=this;this.uniforms={},this.shaders=[];var r=e.gl,a=e.errorCallback,i=e.name,s=e.fragmentShader,l=e.vertexShader,u=e.uniforms,f=e.defines;this.gl=r,this.errorCallback=a,this.name=i;var c=r.createProgram();if(c){if("string"==typeof s||"string"==typeof s[0]){var h="string"==typeof s?s:s.join("\n");if(f&&(h=Object.keys(f).map((function(e){if(!n.isString(e)||!n.isString(f[e]))throw new Error("GPUProgram defines must be passed in as key value pairs that are both strings, got key value pair of type "+typeof e+" : "+typeof f[e]+".");return"#define "+e+" "+f[e]+"\n"})).join("\n")+h),!(p=o.compileShader(r,a,h,r.FRAGMENT_SHADER,i)))return void a('Unable to compile fragment shader for program "'+i+'".');this.shaders.push(p),r.attachShader(c,p)}else{if(f)throw new Error('Unable to attach defines to program "'+i+'" because fragment shader is already compiled.');r.attachShader(c,s)}if("string"==typeof l){var p;if(!(p=o.compileShader(r,a,l,r.VERTEX_SHADER,i)))return void a('Unable to compile vertex shader for program "'+i+'".');this.shaders.push(p),r.attachShader(c,p)}else r.attachShader(c,l);r.linkProgram(c),r.getProgramParameter(c,r.LINK_STATUS)?(this.glProgram=c,null==u||u.forEach((function(e){var r=e.name,n=e.value,a=e.dataType;t.setUniform(r,n,a)}))):a('Program "'+i+'" failed to link: '+r.getProgramInfoLog(c))}else a("Unable to init gl program: "+i+".")}return e.prototype.uniformTypeForValue=function(e,t){var r=this;if(t===a.FLOAT){if(n.isArray(e))e.forEach((function(t){if(!n.isNumber(t))throw new Error("Invalid uniform value: "+e+' for program "'+r.name+'", expected float or float[] of length 1-4.')}));else if(!n.isNumber(e))throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected float or float[] of length 1-4.');if(!n.isArray(e)||1===e.length)return a.FLOAT_1D_UNIFORM;if(2===e.length)return a.FLOAT_2D_UNIFORM;if(3===e.length)return a.FLOAT_3D_UNIFORM;if(4===e.length)return a.FLOAT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected float or float[] of length 1-4.')}if(t===a.INT){if(n.isArray(e))e.forEach((function(t){if(!n.isInteger(t))throw new Error("Invalid uniform value: "+e+' for program "'+r.name+'", expected int or int[] of length 1-4.')}));else if(!n.isInteger(e))throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected int or int[] of length 1-4.');if(!n.isArray(e)||1===e.length)return a.INT_1D_UNIFORM;if(2===e.length)return a.INT_2D_UNIFORM;if(3===e.length)return a.INT_3D_UNIFORM;if(4===e.length)return a.INT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected int or int[] of length 1-4.')}throw new Error("Invalid uniform data type: "+t+' for program "'+this.name+'", expected '+a.FLOAT+" or "+a.INT+".")},e.prototype.setUniform=function(e,t,r){var n=this,o=n.gl,i=n.errorCallback,s=n.glProgram,l=n.uniforms;if(s){o.useProgram(s);var u=this.uniformTypeForValue(t,r);if(!l[e]){var f=o.getUniformLocation(s,e);if(!f)return void i('Could not init uniform "'+e+'" for program "'+this.name+'".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type '+u+".\nError code: "+o.getError()+".");l[e]={location:f,type:u}}var c=l[e];if(c.type!=u)throw new Error('Uniform "'+e+'" for GPUProgram "'+this.name+'" cannot change from type '+c.type+" to type "+u+".");var h=c.location;switch(u){case a.FLOAT_1D_UNIFORM:o.uniform1f(h,t);break;case a.FLOAT_2D_UNIFORM:o.uniform2fv(h,t);break;case a.FLOAT_3D_UNIFORM:o.uniform3fv(h,t);break;case a.FLOAT_4D_UNIFORM:o.uniform4fv(h,t);break;case a.INT_1D_UNIFORM:o.uniform1i(h,t);break;case a.INT_2D_UNIFORM:o.uniform2iv(h,t);break;case a.INT_3D_UNIFORM:o.uniform3iv(h,t);break;case a.INT_4D_UNIFORM:o.uniform4iv(h,t);break;default:throw new Error("Unknown uniform type "+u+' for GPUProgram "'+this.name+'".')}}else i('GLProgram for GPUProgram "'+this.name+'" not inited.')},e.prototype.destroy=function(){var e=this,t=e.gl,r=e.glProgram,n=e.shaders;r&&t.deleteProgram(r);for(var a=0;a<n.length;a++)t.deleteShader(n[a]);n.length=0,delete this.gl,delete this.errorCallback,delete this.program},e}();t.GPUProgram=i},581:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getExtension=t.EXT_COLOR_BUFFER_FLOAT=t.WEBGL_DEPTH_TEXTURE=t.OES_TEXTURE_HAlF_FLOAT_LINEAR=t.OES_TEXTURE_FLOAT_LINEAR=t.OES_TEXTURE_HALF_FLOAT=t.OES_TEXTURE_FLOAT=void 0;var r={};t.OES_TEXTURE_FLOAT="OES_texture_float",t.OES_TEXTURE_HALF_FLOAT="OES_texture_half_float",t.OES_TEXTURE_FLOAT_LINEAR="OES_texture_float_linear",t.OES_TEXTURE_HAlF_FLOAT_LINEAR="OES_texture_half_float_linear",t.WEBGL_DEPTH_TEXTURE="WEBGL_depth_texture",t.EXT_COLOR_BUFFER_FLOAT="EXT_color_buffer_float",t.getExtension=function(e,t,n,a){if(void 0===a&&(a=!1),void 0!==r[t])return r[t];var o;try{o=e.getExtension(t)}catch(e){}return o?(r[t]=o,console.log("Loaded extension: "+t+".")):(r[t]=!1,console.warn("Unsupported "+(a?"optional ":"")+"extension: "+t+".")),o||a||n("Required extension unsupported by this device / browser: "+t+"."),o}},593:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isPowerOf2=t.isWebGL2=t.compileShader=void 0,t.compileShader=function(e,t,r,n,a){var o=e.createShader(n);return o?(e.shaderSource(o,r),e.compileShader(o),e.getShaderParameter(o,e.COMPILE_STATUS)?o:(t("Could not compile "+(n===e.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader"+(a?' for program "'+a+'"':"")+": "+e.getShaderInfoLog(o)+"."),null)):(t("Unable to init gl shader."),null)},t.isWebGL2=function(e){return"undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&e instanceof WebGL2ComputeRenderingContext},t.isPowerOf2=function(e){return 0==(e&e-1)}},406:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Vector4=void 0;var r=function(){function e(e,t,r,n){void 0===e&&(e=0),void 0===t&&(t=0),void 0===r&&(r=0),void 0===n&&(n=1),this.x=e,this.y=t,this.z=r,this.w=n}return Object.defineProperty(e.prototype,"width",{get:function(){return this.z},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.w},enumerable:!1,configurable:!0}),e.prototype.copy=function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this},e}();t.Vector4=r},541:e=>{e.exports="precision highp float;\n\nvarying vec2 v_UV;\n\nuniform sampler2D u_state;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_state, v_UV);\n}"},790:e=>{e.exports="precision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},518:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp sampler2D;\n\nin vec2 v_UV;\n\nuniform sampler2D u_state;\n\nout vec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},546:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp isampler2D;\n\nin vec2 v_UV;\n\nuniform isampler2D u_state;\n\nout ivec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},374:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp usampler2D;\n\nin vec2 v_UV;\n\nuniform usampler2D u_state;\n\nout uvec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},435:e=>{e.exports="#version 300 es\nprecision highp float;\n\nin vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nout vec2 v_UV_local;\nout vec2 v_UV;\nout vec2 out_position;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tout_position = position;\n}"}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{"use strict";var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.MIRRORED_REPEAT=e.REPEAT=e.CLAMP_TO_EDGE=e.LINEAR=e.NEAREST=e.GLSL3=e.GLSL1=e.INT=e.UNSIGNED_INT=e.SHORT=e.UNSIGNED_SHORT=e.BYTE=e.UNSIGNED_BYTE=e.FLOAT=e.HALF_FLOAT=e.GLCompute=void 0;var t=r(321);Object.defineProperty(e,"GLCompute",{enumerable:!0,get:function(){return t.GLCompute}});var a=r(738);Object.defineProperty(e,"HALF_FLOAT",{enumerable:!0,get:function(){return a.HALF_FLOAT}}),Object.defineProperty(e,"FLOAT",{enumerable:!0,get:function(){return a.FLOAT}}),Object.defineProperty(e,"UNSIGNED_BYTE",{enumerable:!0,get:function(){return a.UNSIGNED_BYTE}}),Object.defineProperty(e,"BYTE",{enumerable:!0,get:function(){return a.BYTE}}),Object.defineProperty(e,"UNSIGNED_SHORT",{enumerable:!0,get:function(){return a.UNSIGNED_SHORT}}),Object.defineProperty(e,"SHORT",{enumerable:!0,get:function(){return a.SHORT}}),Object.defineProperty(e,"UNSIGNED_INT",{enumerable:!0,get:function(){return a.UNSIGNED_INT}}),Object.defineProperty(e,"INT",{enumerable:!0,get:function(){return a.INT}}),Object.defineProperty(e,"NEAREST",{enumerable:!0,get:function(){return a.NEAREST}}),Object.defineProperty(e,"LINEAR",{enumerable:!0,get:function(){return a.LINEAR}}),Object.defineProperty(e,"CLAMP_TO_EDGE",{enumerable:!0,get:function(){return a.CLAMP_TO_EDGE}}),Object.defineProperty(e,"REPEAT",{enumerable:!0,get:function(){return a.REPEAT}}),Object.defineProperty(e,"MIRRORED_REPEAT",{enumerable:!0,get:function(){return a.MIRRORED_REPEAT}}),Object.defineProperty(e,"GLSL1",{enumerable:!0,get:function(){return a.GLSL1}}),Object.defineProperty(e,"GLSL3",{enumerable:!0,get:function(){return a.GLSL3}})})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,