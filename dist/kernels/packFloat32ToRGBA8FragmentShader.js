"use strict";
// TODO: this is still off by a factor of 2 sometimes.
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = "\nprecision highp float;\n\nuniform vec2 u_floatTextureDim;\nuniform sampler2D u_floatTexture;\nuniform float u_numFloatComponents;\n\nfloat shift_right (float v, float amt) {\n\tv = floor(v) + 0.5;\n\treturn floor(v / exp2(amt));\n}\nfloat shift_left (float v, float amt) {\n\treturn floor(v * exp2(amt) + 0.5);\n}\nfloat mask_last (float v, float bits) {\n\treturn mod(v, shift_left(1.0, bits));\n}\nfloat extract_bits (float num, float from, float to) {\n\tfrom = floor(from + 0.5); to = floor(to + 0.5);\n\treturn mask_last(shift_right(num, from), to - from);\n}\nvec4 encode_float (float val) {\n\tif (val == 0.0) return vec4(0, 0, 0, 0);\n\tfloat sign = val > 0.0 ? 0.0 : 1.0;\n\tval = abs(val);\n\tfloat exponent = floor(log2(val));\n\tfloat biased_exponent = exponent + 127.0;\n\tfloat fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;\n\tfloat t = biased_exponent / 2.0;\n\tfloat last_bit_of_biased_exponent = fract(t) * 2.0;\n\tfloat remaining_bits_of_biased_exponent = floor(t);\n\tfloat byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;\n\tfloat byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;\n\tfloat byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;\n\tfloat byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0;\n\treturn vec4(byte4, byte3, byte2, byte1);\n}\nvoid main(){\n\tvec2 fragCoord = gl_FragCoord.xy;\n\tfloat textureXcoord = floor((fragCoord.x - 0.5)/u_numFloatComponents+0.0001) + 0.5;\n\tvec4 data = texture2D(u_floatTexture, vec2(textureXcoord, fragCoord.y)/u_floatTextureDim);\n\tint textureIndex = int(floor(mod(fragCoord.x-0.5+0.0001, u_numFloatComponents)));\n\tif (textureIndex == 0) gl_FragColor = encode_float(data[0]);\n\telse if (textureIndex == 1) gl_FragColor = encode_float(data[1]);\n\telse if (textureIndex == 2) gl_FragColor = encode_float(data[2]);\n\telse if (textureIndex == 3) gl_FragColor = encode_float(data[3]);\n}";
//# sourceMappingURL=packFloat32ToRGBA8FragmentShader.js.map