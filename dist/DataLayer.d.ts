import { DataLayerArrayType, DataLayerFilterType, DataLayerNumComponents, DataLayerType, DataLayerWrapType, GLSLVersion } from './Constants';
export declare type DataLayerBuffer = {
    texture: WebGLTexture;
    framebuffer?: WebGLFramebuffer;
};
declare type ErrorCallback = (message: string) => void;
export declare class DataLayer {
    readonly name: string;
    private readonly gl;
    private readonly errorCallback;
    private bufferIndex;
    readonly numBuffers: number;
    private readonly buffers;
    private length?;
    private width;
    private height;
    readonly type: DataLayerType;
    readonly internalType: DataLayerType;
    readonly numComponents: DataLayerNumComponents;
    readonly filter: DataLayerFilterType;
    readonly writable: boolean;
    readonly glInternalFormat: number;
    readonly glFormat: number;
    readonly glType: number;
    readonly glNumChannels: number;
    readonly glFilter: number;
    readonly glWrapS: number;
    readonly glWrapT: number;
    constructor(params: {
        gl: WebGLRenderingContext | WebGL2RenderingContext;
        name: string;
        dimensions: number | [number, number];
        type: DataLayerType;
        numComponents: DataLayerNumComponents;
        glslVersion: GLSLVersion;
        data?: DataLayerArrayType;
        filter?: DataLayerFilterType;
        wrapS?: DataLayerWrapType;
        wrapT?: DataLayerWrapType;
        writable?: boolean;
        numBuffers?: number;
        errorCallback: ErrorCallback;
    });
    private static calcSize;
    private static getGLWrap;
    private static getGLFilter;
    private static getInternalType;
    private static shouldCastIntTypeAsFloat;
    private static getGLTextureParameters;
    private static testFramebufferWrite;
    private validateDataArray;
    private initBuffers;
    getCurrentStateTexture(): WebGLTexture;
    getPreviousStateTexture(index?: number): WebGLTexture;
    bindOutputBuffer(incrementBufferIndex: boolean): void;
    resize(dimensions: number | [number, number], data?: DataLayerArrayType): void;
    clear(): void;
    getDimensions(): [number, number];
    getTextures(): WebGLTexture[];
    getLength(): number;
    private destroyBuffers;
    destroy(): void;
}
export {};
